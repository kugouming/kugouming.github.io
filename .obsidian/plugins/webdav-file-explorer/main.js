/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/webdav/web/index.js
var require_web = __commonJS({
  "node_modules/webdav/web/index.js"(exports, module2) {
    !function(t, e) {
      "object" == typeof exports && "object" == typeof module2 ? module2.exports = e() : "function" == typeof define && define.amd ? define([], e) : "object" == typeof exports ? exports.WebDAV = e() : t.WebDAV = e();
    }(self, () => (() => {
      var t = { 5056: (t2, e2, r2) => {
        t2.exports = r2(203);
      }, 3198: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(5888), i = r2(4963), a = r2(8826), s = r2(4466), u = r2(8418), c = r2(6130), f = r2(8760), l = r2(4200), p = r2(2800), h = r2(4830);
        t2.exports = function(t3) {
          return new Promise(function(e3, r3) {
            var d, y = t3.data, g = t3.headers, m = t3.responseType;
            function v() {
              t3.cancelToken && t3.cancelToken.unsubscribe(d), t3.signal && t3.signal.removeEventListener("abort", d);
            }
            n2.isFormData(y) && n2.isStandardBrowserEnv() && delete g["Content-Type"];
            var b = new XMLHttpRequest();
            if (t3.auth) {
              var w = t3.auth.username || "", O = t3.auth.password ? unescape(encodeURIComponent(t3.auth.password)) : "";
              g.Authorization = "Basic " + btoa(w + ":" + O);
            }
            var A = s(t3.baseURL, t3.url);
            function j() {
              if (b) {
                var n3 = "getAllResponseHeaders" in b ? u(b.getAllResponseHeaders()) : null, i2 = { data: m && "text" !== m && "json" !== m ? b.response : b.responseText, status: b.status, statusText: b.statusText, headers: n3, config: t3, request: b };
                o(function(t4) {
                  e3(t4), v();
                }, function(t4) {
                  r3(t4), v();
                }, i2), b = null;
              }
            }
            if (b.open(t3.method.toUpperCase(), a(A, t3.params, t3.paramsSerializer), true), b.timeout = t3.timeout, "onloadend" in b ? b.onloadend = j : b.onreadystatechange = function() {
              b && 4 === b.readyState && (0 !== b.status || b.responseURL && 0 === b.responseURL.indexOf("file:")) && setTimeout(j);
            }, b.onabort = function() {
              b && (r3(new l("Request aborted", l.ECONNABORTED, t3, b)), b = null);
            }, b.onerror = function() {
              r3(new l("Network Error", l.ERR_NETWORK, t3, b, b)), b = null;
            }, b.ontimeout = function() {
              var e4 = t3.timeout ? "timeout of " + t3.timeout + "ms exceeded" : "timeout exceeded", n3 = t3.transitional || f;
              t3.timeoutErrorMessage && (e4 = t3.timeoutErrorMessage), r3(new l(e4, n3.clarifyTimeoutError ? l.ETIMEDOUT : l.ECONNABORTED, t3, b)), b = null;
            }, n2.isStandardBrowserEnv()) {
              var x = (t3.withCredentials || c(A)) && t3.xsrfCookieName ? i.read(t3.xsrfCookieName) : void 0;
              x && (g[t3.xsrfHeaderName] = x);
            }
            "setRequestHeader" in b && n2.forEach(g, function(t4, e4) {
              void 0 === y && "content-type" === e4.toLowerCase() ? delete g[e4] : b.setRequestHeader(e4, t4);
            }), n2.isUndefined(t3.withCredentials) || (b.withCredentials = !!t3.withCredentials), m && "json" !== m && (b.responseType = t3.responseType), "function" == typeof t3.onDownloadProgress && b.addEventListener("progress", t3.onDownloadProgress), "function" == typeof t3.onUploadProgress && b.upload && b.upload.addEventListener("progress", t3.onUploadProgress), (t3.cancelToken || t3.signal) && (d = function(t4) {
              b && (r3(!t4 || t4 && t4.type ? new p() : t4), b.abort(), b = null);
            }, t3.cancelToken && t3.cancelToken.subscribe(d), t3.signal && (t3.signal.aborted ? d() : t3.signal.addEventListener("abort", d))), y || (y = null);
            var E = h(A);
            E && -1 === ["http", "https", "file"].indexOf(E) ? r3(new l("Unsupported protocol " + E + ":", l.ERR_BAD_REQUEST, t3)) : b.send(y);
          });
        };
      }, 203: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(9366), i = r2(1112), a = r2(3674), s = function t3(e3) {
          var r3 = new i(e3), s2 = o(i.prototype.request, r3);
          return n2.extend(s2, i.prototype, r3), n2.extend(s2, r3), s2.create = function(r4) {
            return t3(a(e3, r4));
          }, s2;
        }(r2(9050));
        s.Axios = i, s.CanceledError = r2(2800), s.CancelToken = r2(4078), s.isCancel = r2(1907), s.VERSION = r2(8963).version, s.toFormData = r2(7427), s.AxiosError = r2(4200), s.Cancel = s.CanceledError, s.all = function(t3) {
          return Promise.all(t3);
        }, s.spread = r2(7998), s.isAxiosError = r2(1720), t2.exports = s, t2.exports.default = s;
      }, 4078: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(2800);
        function o(t3) {
          if ("function" != typeof t3)
            throw new TypeError("executor must be a function.");
          var e3;
          this.promise = new Promise(function(t4) {
            e3 = t4;
          });
          var r3 = this;
          this.promise.then(function(t4) {
            if (r3._listeners) {
              var e4, n3 = r3._listeners.length;
              for (e4 = 0; e4 < n3; e4++)
                r3._listeners[e4](t4);
              r3._listeners = null;
            }
          }), this.promise.then = function(t4) {
            var e4, n3 = new Promise(function(t5) {
              r3.subscribe(t5), e4 = t5;
            }).then(t4);
            return n3.cancel = function() {
              r3.unsubscribe(e4);
            }, n3;
          }, t3(function(t4) {
            r3.reason || (r3.reason = new n2(t4), e3(r3.reason));
          });
        }
        o.prototype.throwIfRequested = function() {
          if (this.reason)
            throw this.reason;
        }, o.prototype.subscribe = function(t3) {
          this.reason ? t3(this.reason) : this._listeners ? this._listeners.push(t3) : this._listeners = [t3];
        }, o.prototype.unsubscribe = function(t3) {
          if (this._listeners) {
            var e3 = this._listeners.indexOf(t3);
            -1 !== e3 && this._listeners.splice(e3, 1);
          }
        }, o.source = function() {
          var t3;
          return { token: new o(function(e3) {
            t3 = e3;
          }), cancel: t3 };
        }, t2.exports = o;
      }, 2800: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(4200);
        function o(t3) {
          n2.call(this, null == t3 ? "canceled" : t3, n2.ERR_CANCELED), this.name = "CanceledError";
        }
        r2(3401).inherits(o, n2, { __CANCEL__: true }), t2.exports = o;
      }, 1907: (t2) => {
        "use strict";
        t2.exports = function(t3) {
          return !(!t3 || !t3.__CANCEL__);
        };
      }, 1112: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(8826), i = r2(9655), a = r2(4412), s = r2(3674), u = r2(4466), c = r2(3465), f = c.validators;
        function l(t3) {
          this.defaults = t3, this.interceptors = { request: new i(), response: new i() };
        }
        l.prototype.request = function(t3, e3) {
          "string" == typeof t3 ? (e3 = e3 || {}).url = t3 : e3 = t3 || {}, (e3 = s(this.defaults, e3)).method ? e3.method = e3.method.toLowerCase() : this.defaults.method ? e3.method = this.defaults.method.toLowerCase() : e3.method = "get";
          var r3 = e3.transitional;
          void 0 !== r3 && c.assertOptions(r3, { silentJSONParsing: f.transitional(f.boolean), forcedJSONParsing: f.transitional(f.boolean), clarifyTimeoutError: f.transitional(f.boolean) }, false);
          var n3 = [], o2 = true;
          this.interceptors.request.forEach(function(t4) {
            "function" == typeof t4.runWhen && false === t4.runWhen(e3) || (o2 = o2 && t4.synchronous, n3.unshift(t4.fulfilled, t4.rejected));
          });
          var i2, u2 = [];
          if (this.interceptors.response.forEach(function(t4) {
            u2.push(t4.fulfilled, t4.rejected);
          }), !o2) {
            var l2 = [a, void 0];
            for (Array.prototype.unshift.apply(l2, n3), l2 = l2.concat(u2), i2 = Promise.resolve(e3); l2.length; )
              i2 = i2.then(l2.shift(), l2.shift());
            return i2;
          }
          for (var p = e3; n3.length; ) {
            var h = n3.shift(), d = n3.shift();
            try {
              p = h(p);
            } catch (t4) {
              d(t4);
              break;
            }
          }
          try {
            i2 = a(p);
          } catch (t4) {
            return Promise.reject(t4);
          }
          for (; u2.length; )
            i2 = i2.then(u2.shift(), u2.shift());
          return i2;
        }, l.prototype.getUri = function(t3) {
          t3 = s(this.defaults, t3);
          var e3 = u(t3.baseURL, t3.url);
          return o(e3, t3.params, t3.paramsSerializer);
        }, n2.forEach(["delete", "get", "head", "options"], function(t3) {
          l.prototype[t3] = function(e3, r3) {
            return this.request(s(r3 || {}, { method: t3, url: e3, data: (r3 || {}).data }));
          };
        }), n2.forEach(["post", "put", "patch"], function(t3) {
          function e3(e4) {
            return function(r3, n3, o2) {
              return this.request(s(o2 || {}, { method: t3, headers: e4 ? { "Content-Type": "multipart/form-data" } : {}, url: r3, data: n3 }));
            };
          }
          l.prototype[t3] = e3(), l.prototype[t3 + "Form"] = e3(true);
        }), t2.exports = l;
      }, 4200: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        function o(t3, e3, r3, n3, o2) {
          Error.call(this), this.message = t3, this.name = "AxiosError", e3 && (this.code = e3), r3 && (this.config = r3), n3 && (this.request = n3), o2 && (this.response = o2);
        }
        n2.inherits(o, Error, { toJSON: function() {
          return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code, status: this.response && this.response.status ? this.response.status : null };
        } });
        var i = o.prototype, a = {};
        ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(t3) {
          a[t3] = { value: t3 };
        }), Object.defineProperties(o, a), Object.defineProperty(i, "isAxiosError", { value: true }), o.from = function(t3, e3, r3, a2, s, u) {
          var c = Object.create(i);
          return n2.toFlatObject(t3, c, function(t4) {
            return t4 !== Error.prototype;
          }), o.call(c, t3.message, e3, r3, a2, s), c.name = t3.name, u && Object.assign(c, u), c;
        }, t2.exports = o;
      }, 9655: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        function o() {
          this.handlers = [];
        }
        o.prototype.use = function(t3, e3, r3) {
          return this.handlers.push({ fulfilled: t3, rejected: e3, synchronous: !!r3 && r3.synchronous, runWhen: r3 ? r3.runWhen : null }), this.handlers.length - 1;
        }, o.prototype.eject = function(t3) {
          this.handlers[t3] && (this.handlers[t3] = null);
        }, o.prototype.forEach = function(t3) {
          n2.forEach(this.handlers, function(e3) {
            null !== e3 && t3(e3);
          });
        }, t2.exports = o;
      }, 4466: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(4206), o = r2(7955);
        t2.exports = function(t3, e3) {
          return t3 && !n2(e3) ? o(t3, e3) : e3;
        };
      }, 4412: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(8092), i = r2(1907), a = r2(9050), s = r2(2800);
        function u(t3) {
          if (t3.cancelToken && t3.cancelToken.throwIfRequested(), t3.signal && t3.signal.aborted)
            throw new s();
        }
        t2.exports = function(t3) {
          return u(t3), t3.headers = t3.headers || {}, t3.data = o.call(t3, t3.data, t3.headers, t3.transformRequest), t3.headers = n2.merge(t3.headers.common || {}, t3.headers[t3.method] || {}, t3.headers), n2.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(e3) {
            delete t3.headers[e3];
          }), (t3.adapter || a.adapter)(t3).then(function(e3) {
            return u(t3), e3.data = o.call(t3, e3.data, e3.headers, t3.transformResponse), e3;
          }, function(e3) {
            return i(e3) || (u(t3), e3 && e3.response && (e3.response.data = o.call(t3, e3.response.data, e3.response.headers, t3.transformResponse))), Promise.reject(e3);
          });
        };
      }, 3674: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        t2.exports = function(t3, e3) {
          e3 = e3 || {};
          var r3 = {};
          function o(t4, e4) {
            return n2.isPlainObject(t4) && n2.isPlainObject(e4) ? n2.merge(t4, e4) : n2.isPlainObject(e4) ? n2.merge({}, e4) : n2.isArray(e4) ? e4.slice() : e4;
          }
          function i(r4) {
            return n2.isUndefined(e3[r4]) ? n2.isUndefined(t3[r4]) ? void 0 : o(void 0, t3[r4]) : o(t3[r4], e3[r4]);
          }
          function a(t4) {
            if (!n2.isUndefined(e3[t4]))
              return o(void 0, e3[t4]);
          }
          function s(r4) {
            return n2.isUndefined(e3[r4]) ? n2.isUndefined(t3[r4]) ? void 0 : o(void 0, t3[r4]) : o(void 0, e3[r4]);
          }
          function u(r4) {
            return r4 in e3 ? o(t3[r4], e3[r4]) : r4 in t3 ? o(void 0, t3[r4]) : void 0;
          }
          var c = { url: a, method: a, data: a, baseURL: s, transformRequest: s, transformResponse: s, paramsSerializer: s, timeout: s, timeoutMessage: s, withCredentials: s, adapter: s, responseType: s, xsrfCookieName: s, xsrfHeaderName: s, onUploadProgress: s, onDownloadProgress: s, decompress: s, maxContentLength: s, maxBodyLength: s, beforeRedirect: s, transport: s, httpAgent: s, httpsAgent: s, cancelToken: s, socketPath: s, responseEncoding: s, validateStatus: u };
          return n2.forEach(Object.keys(t3).concat(Object.keys(e3)), function(t4) {
            var e4 = c[t4] || i, o2 = e4(t4);
            n2.isUndefined(o2) && e4 !== u || (r3[t4] = o2);
          }), r3;
        };
      }, 5888: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(4200);
        t2.exports = function(t3, e3, r3) {
          var o = r3.config.validateStatus;
          r3.status && o && !o(r3.status) ? e3(new n2("Request failed with status code " + r3.status, [n2.ERR_BAD_REQUEST, n2.ERR_BAD_RESPONSE][Math.floor(r3.status / 100) - 4], r3.config, r3.request, r3)) : t3(r3);
        };
      }, 8092: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(9050);
        t2.exports = function(t3, e3, r3) {
          var i = this || o;
          return n2.forEach(r3, function(r4) {
            t3 = r4.call(i, t3, e3);
          }), t3;
        };
      }, 9050: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = r2(5854), i = r2(4200), a = r2(8760), s = r2(7427), u = { "Content-Type": "application/x-www-form-urlencoded" };
        function c(t3, e3) {
          !n2.isUndefined(t3) && n2.isUndefined(t3["Content-Type"]) && (t3["Content-Type"] = e3);
        }
        var f, l = { transitional: a, adapter: (("undefined" != typeof XMLHttpRequest || "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process)) && (f = r2(3198)), f), transformRequest: [function(t3, e3) {
          if (o(e3, "Accept"), o(e3, "Content-Type"), n2.isFormData(t3) || n2.isArrayBuffer(t3) || n2.isBuffer(t3) || n2.isStream(t3) || n2.isFile(t3) || n2.isBlob(t3))
            return t3;
          if (n2.isArrayBufferView(t3))
            return t3.buffer;
          if (n2.isURLSearchParams(t3))
            return c(e3, "application/x-www-form-urlencoded;charset=utf-8"), t3.toString();
          var r3, i2 = n2.isObject(t3), a2 = e3 && e3["Content-Type"];
          if ((r3 = n2.isFileList(t3)) || i2 && "multipart/form-data" === a2) {
            var u2 = this.env && this.env.FormData;
            return s(r3 ? { "files[]": t3 } : t3, u2 && new u2());
          }
          return i2 || "application/json" === a2 ? (c(e3, "application/json"), function(t4, e4, r4) {
            if (n2.isString(t4))
              try {
                return (0, JSON.parse)(t4), n2.trim(t4);
              } catch (t5) {
                if ("SyntaxError" !== t5.name)
                  throw t5;
              }
            return (0, JSON.stringify)(t4);
          }(t3)) : t3;
        }], transformResponse: [function(t3) {
          var e3 = this.transitional || l.transitional, r3 = e3 && e3.silentJSONParsing, o2 = e3 && e3.forcedJSONParsing, a2 = !r3 && "json" === this.responseType;
          if (a2 || o2 && n2.isString(t3) && t3.length)
            try {
              return JSON.parse(t3);
            } catch (t4) {
              if (a2) {
                if ("SyntaxError" === t4.name)
                  throw i.from(t4, i.ERR_BAD_RESPONSE, this, null, this.response);
                throw t4;
              }
            }
          return t3;
        }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: r2(846) }, validateStatus: function(t3) {
          return t3 >= 200 && t3 < 300;
        }, headers: { common: { Accept: "application/json, text/plain, */*" } } };
        n2.forEach(["delete", "get", "head"], function(t3) {
          l.headers[t3] = {};
        }), n2.forEach(["post", "put", "patch"], function(t3) {
          l.headers[t3] = n2.merge(u);
        }), t2.exports = l;
      }, 8760: (t2) => {
        "use strict";
        t2.exports = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false };
      }, 8963: (t2) => {
        t2.exports = { version: "0.27.2" };
      }, 9366: (t2) => {
        "use strict";
        t2.exports = function(t3, e2) {
          return function() {
            for (var r2 = new Array(arguments.length), n2 = 0; n2 < r2.length; n2++)
              r2[n2] = arguments[n2];
            return t3.apply(e2, r2);
          };
        };
      }, 8826: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        function o(t3) {
          return encodeURIComponent(t3).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
        }
        t2.exports = function(t3, e3, r3) {
          if (!e3)
            return t3;
          var i;
          if (r3)
            i = r3(e3);
          else if (n2.isURLSearchParams(e3))
            i = e3.toString();
          else {
            var a = [];
            n2.forEach(e3, function(t4, e4) {
              null != t4 && (n2.isArray(t4) ? e4 += "[]" : t4 = [t4], n2.forEach(t4, function(t5) {
                n2.isDate(t5) ? t5 = t5.toISOString() : n2.isObject(t5) && (t5 = JSON.stringify(t5)), a.push(o(e4) + "=" + o(t5));
              }));
            }), i = a.join("&");
          }
          if (i) {
            var s = t3.indexOf("#");
            -1 !== s && (t3 = t3.slice(0, s)), t3 += (-1 === t3.indexOf("?") ? "?" : "&") + i;
          }
          return t3;
        };
      }, 7955: (t2) => {
        "use strict";
        t2.exports = function(t3, e2) {
          return e2 ? t3.replace(/\/+$/, "") + "/" + e2.replace(/^\/+/, "") : t3;
        };
      }, 4963: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        t2.exports = n2.isStandardBrowserEnv() ? { write: function(t3, e3, r3, o, i, a) {
          var s = [];
          s.push(t3 + "=" + encodeURIComponent(e3)), n2.isNumber(r3) && s.push("expires=" + new Date(r3).toGMTString()), n2.isString(o) && s.push("path=" + o), n2.isString(i) && s.push("domain=" + i), true === a && s.push("secure"), document.cookie = s.join("; ");
        }, read: function(t3) {
          var e3 = document.cookie.match(new RegExp("(^|;\\s*)(" + t3 + ")=([^;]*)"));
          return e3 ? decodeURIComponent(e3[3]) : null;
        }, remove: function(t3) {
          this.write(t3, "", Date.now() - 864e5);
        } } : { write: function() {
        }, read: function() {
          return null;
        }, remove: function() {
        } };
      }, 4206: (t2) => {
        "use strict";
        t2.exports = function(t3) {
          return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(t3);
        };
      }, 1720: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        t2.exports = function(t3) {
          return n2.isObject(t3) && true === t3.isAxiosError;
        };
      }, 6130: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        t2.exports = n2.isStandardBrowserEnv() ? function() {
          var t3, e3 = /(msie|trident)/i.test(navigator.userAgent), r3 = document.createElement("a");
          function o(t4) {
            var n3 = t4;
            return e3 && (r3.setAttribute("href", n3), n3 = r3.href), r3.setAttribute("href", n3), { href: r3.href, protocol: r3.protocol ? r3.protocol.replace(/:$/, "") : "", host: r3.host, search: r3.search ? r3.search.replace(/^\?/, "") : "", hash: r3.hash ? r3.hash.replace(/^#/, "") : "", hostname: r3.hostname, port: r3.port, pathname: "/" === r3.pathname.charAt(0) ? r3.pathname : "/" + r3.pathname };
          }
          return t3 = o(window.location.href), function(e4) {
            var r4 = n2.isString(e4) ? o(e4) : e4;
            return r4.protocol === t3.protocol && r4.host === t3.host;
          };
        }() : function() {
          return true;
        };
      }, 5854: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401);
        t2.exports = function(t3, e3) {
          n2.forEach(t3, function(r3, n3) {
            n3 !== e3 && n3.toUpperCase() === e3.toUpperCase() && (t3[e3] = r3, delete t3[n3]);
          });
        };
      }, 846: (t2) => {
        t2.exports = null;
      }, 8418: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(3401), o = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
        t2.exports = function(t3) {
          var e3, r3, i, a = {};
          return t3 ? (n2.forEach(t3.split("\n"), function(t4) {
            if (i = t4.indexOf(":"), e3 = n2.trim(t4.substr(0, i)).toLowerCase(), r3 = n2.trim(t4.substr(i + 1)), e3) {
              if (a[e3] && o.indexOf(e3) >= 0)
                return;
              a[e3] = "set-cookie" === e3 ? (a[e3] ? a[e3] : []).concat([r3]) : a[e3] ? a[e3] + ", " + r3 : r3;
            }
          }), a) : a;
        };
      }, 4830: (t2) => {
        "use strict";
        t2.exports = function(t3) {
          var e2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(t3);
          return e2 && e2[1] || "";
        };
      }, 7998: (t2) => {
        "use strict";
        t2.exports = function(t3) {
          return function(e2) {
            return t3.apply(null, e2);
          };
        };
      }, 7427: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(3401);
        t2.exports = function(t3, e3) {
          e3 = e3 || new FormData();
          var r3 = [];
          function i(t4) {
            return null === t4 ? "" : o.isDate(t4) ? t4.toISOString() : o.isArrayBuffer(t4) || o.isTypedArray(t4) ? "function" == typeof Blob ? new Blob([t4]) : Buffer.from(t4) : t4;
          }
          return function t4(a, s) {
            if (o.isPlainObject(a) || o.isArray(a)) {
              if (-1 !== r3.indexOf(a))
                throw Error("Circular reference detected in " + s);
              r3.push(a), o.forEach(a, function(r4, a2) {
                if (!o.isUndefined(r4)) {
                  var u, c = s ? s + "." + a2 : a2;
                  if (r4 && !s && "object" === n2(r4)) {
                    if (o.endsWith(a2, "{}"))
                      r4 = JSON.stringify(r4);
                    else if (o.endsWith(a2, "[]") && (u = o.toArray(r4)))
                      return void u.forEach(function(t5) {
                        !o.isUndefined(t5) && e3.append(c, i(t5));
                      });
                  }
                  t4(r4, c);
                }
              }), r3.pop();
            } else
              e3.append(s, i(a));
          }(t3), e3;
        };
      }, 3465: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(8963).version, i = r2(4200), a = {};
        ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t3, e3) {
          a[t3] = function(r3) {
            return n2(r3) === t3 || "a" + (e3 < 1 ? "n " : " ") + t3;
          };
        });
        var s = {};
        a.transitional = function(t3, e3, r3) {
          function n3(t4, e4) {
            return "[Axios v" + o + "] Transitional option '" + t4 + "'" + e4 + (r3 ? ". " + r3 : "");
          }
          return function(r4, o2, a2) {
            if (false === t3)
              throw new i(n3(o2, " has been removed" + (e3 ? " in " + e3 : "")), i.ERR_DEPRECATED);
            return e3 && !s[o2] && (s[o2] = true, console.warn(n3(o2, " has been deprecated since v" + e3 + " and will be removed in the near future"))), !t3 || t3(r4, o2, a2);
          };
        }, t2.exports = { assertOptions: function(t3, e3, r3) {
          if ("object" !== n2(t3))
            throw new i("options must be an object", i.ERR_BAD_OPTION_VALUE);
          for (var o2 = Object.keys(t3), a2 = o2.length; a2-- > 0; ) {
            var s2 = o2[a2], u = e3[s2];
            if (u) {
              var c = t3[s2], f = void 0 === c || u(c, s2, t3);
              if (true !== f)
                throw new i("option " + s2 + " must be " + f, i.ERR_BAD_OPTION_VALUE);
            } else if (true !== r3)
              throw new i("Unknown option " + s2, i.ERR_BAD_OPTION);
          }
        }, validators: a };
      }, 3401: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o, i = r2(9366), a = Object.prototype.toString, s = (o = /* @__PURE__ */ Object.create(null), function(t3) {
          var e3 = a.call(t3);
          return o[e3] || (o[e3] = e3.slice(8, -1).toLowerCase());
        });
        function u(t3) {
          return t3 = t3.toLowerCase(), function(e3) {
            return s(e3) === t3;
          };
        }
        function c(t3) {
          return Array.isArray(t3);
        }
        function f(t3) {
          return void 0 === t3;
        }
        var l = u("ArrayBuffer");
        function p(t3) {
          return null !== t3 && "object" === n2(t3);
        }
        function h(t3) {
          if ("object" !== s(t3))
            return false;
          var e3 = Object.getPrototypeOf(t3);
          return null === e3 || e3 === Object.prototype;
        }
        var d = u("Date"), y = u("File"), g = u("Blob"), m = u("FileList");
        function v(t3) {
          return "[object Function]" === a.call(t3);
        }
        var b = u("URLSearchParams");
        function w(t3, e3) {
          if (null != t3)
            if ("object" !== n2(t3) && (t3 = [t3]), c(t3))
              for (var r3 = 0, o2 = t3.length; r3 < o2; r3++)
                e3.call(null, t3[r3], r3, t3);
            else
              for (var i2 in t3)
                Object.prototype.hasOwnProperty.call(t3, i2) && e3.call(null, t3[i2], i2, t3);
        }
        var O, A = (O = "undefined" != typeof Uint8Array && Object.getPrototypeOf(Uint8Array), function(t3) {
          return O && t3 instanceof O;
        });
        t2.exports = { isArray: c, isArrayBuffer: l, isBuffer: function(t3) {
          return null !== t3 && !f(t3) && null !== t3.constructor && !f(t3.constructor) && "function" == typeof t3.constructor.isBuffer && t3.constructor.isBuffer(t3);
        }, isFormData: function(t3) {
          var e3 = "[object FormData]";
          return t3 && ("function" == typeof FormData && t3 instanceof FormData || a.call(t3) === e3 || v(t3.toString) && t3.toString() === e3);
        }, isArrayBufferView: function(t3) {
          return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t3) : t3 && t3.buffer && l(t3.buffer);
        }, isString: function(t3) {
          return "string" == typeof t3;
        }, isNumber: function(t3) {
          return "number" == typeof t3;
        }, isObject: p, isPlainObject: h, isUndefined: f, isDate: d, isFile: y, isBlob: g, isFunction: v, isStream: function(t3) {
          return p(t3) && v(t3.pipe);
        }, isURLSearchParams: b, isStandardBrowserEnv: function() {
          return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && "undefined" != typeof window && "undefined" != typeof document;
        }, forEach: w, merge: function t3() {
          var e3 = {};
          function r3(r4, n4) {
            h(e3[n4]) && h(r4) ? e3[n4] = t3(e3[n4], r4) : h(r4) ? e3[n4] = t3({}, r4) : c(r4) ? e3[n4] = r4.slice() : e3[n4] = r4;
          }
          for (var n3 = 0, o2 = arguments.length; n3 < o2; n3++)
            w(arguments[n3], r3);
          return e3;
        }, extend: function(t3, e3, r3) {
          return w(e3, function(e4, n3) {
            t3[n3] = r3 && "function" == typeof e4 ? i(e4, r3) : e4;
          }), t3;
        }, trim: function(t3) {
          return t3.trim ? t3.trim() : t3.replace(/^\s+|\s+$/g, "");
        }, stripBOM: function(t3) {
          return 65279 === t3.charCodeAt(0) && (t3 = t3.slice(1)), t3;
        }, inherits: function(t3, e3, r3, n3) {
          t3.prototype = Object.create(e3.prototype, n3), t3.prototype.constructor = t3, r3 && Object.assign(t3.prototype, r3);
        }, toFlatObject: function(t3, e3, r3) {
          var n3, o2, i2, a2 = {};
          e3 = e3 || {};
          do {
            for (o2 = (n3 = Object.getOwnPropertyNames(t3)).length; o2-- > 0; )
              a2[i2 = n3[o2]] || (e3[i2] = t3[i2], a2[i2] = true);
            t3 = Object.getPrototypeOf(t3);
          } while (t3 && (!r3 || r3(t3, e3)) && t3 !== Object.prototype);
          return e3;
        }, kindOf: s, kindOfTest: u, endsWith: function(t3, e3, r3) {
          t3 = String(t3), (void 0 === r3 || r3 > t3.length) && (r3 = t3.length), r3 -= e3.length;
          var n3 = t3.indexOf(e3, r3);
          return -1 !== n3 && n3 === r3;
        }, toArray: function(t3) {
          if (!t3)
            return null;
          var e3 = t3.length;
          if (f(e3))
            return null;
          for (var r3 = new Array(e3); e3-- > 0; )
            r3[e3] = t3[e3];
          return r3;
        }, isTypedArray: A, isFileList: m };
      }, 9584: (t2) => {
        "use strict";
        function e2(t3, e3, o) {
          t3 instanceof RegExp && (t3 = r2(t3, o)), e3 instanceof RegExp && (e3 = r2(e3, o));
          var i = n2(t3, e3, o);
          return i && { start: i[0], end: i[1], pre: o.slice(0, i[0]), body: o.slice(i[0] + t3.length, i[1]), post: o.slice(i[1] + e3.length) };
        }
        function r2(t3, e3) {
          var r3 = e3.match(t3);
          return r3 ? r3[0] : null;
        }
        function n2(t3, e3, r3) {
          var n3, o, i, a, s, u = r3.indexOf(t3), c = r3.indexOf(e3, u + 1), f = u;
          if (u >= 0 && c > 0) {
            for (n3 = [], i = r3.length; f >= 0 && !s; )
              f == u ? (n3.push(f), u = r3.indexOf(t3, f + 1)) : 1 == n3.length ? s = [n3.pop(), c] : ((o = n3.pop()) < i && (i = o, a = c), c = r3.indexOf(e3, f + 1)), f = u < c && u >= 0 ? u : c;
            n3.length && (s = [i, a]);
          }
          return s;
        }
        t2.exports = e2, e2.range = n2;
      }, 9146: function(t2, e2, r2) {
        var n2;
        function o(t3) {
          return o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, o(t3);
        }
        t2 = r2.nmd(t2), function(i) {
          var a = "object" == o(e2) && e2, s = "object" == o(t2) && t2 && t2.exports == a && t2, u = "object" == ("undefined" == typeof global ? "undefined" : o(global)) && global;
          u.global !== u && u.window !== u || (i = u);
          var c = function(t3) {
            this.message = t3;
          };
          (c.prototype = new Error()).name = "InvalidCharacterError";
          var f = function(t3) {
            throw new c(t3);
          }, l = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", p = /[\t\n\f\r ]/g, h = { encode: function(t3) {
            t3 = String(t3), /[^\0-\xFF]/.test(t3) && f("The string to be encoded contains characters outside of the Latin1 range.");
            for (var e3, r3, n3, o2, i2 = t3.length % 3, a2 = "", s2 = -1, u2 = t3.length - i2; ++s2 < u2; )
              e3 = t3.charCodeAt(s2) << 16, r3 = t3.charCodeAt(++s2) << 8, n3 = t3.charCodeAt(++s2), a2 += l.charAt((o2 = e3 + r3 + n3) >> 18 & 63) + l.charAt(o2 >> 12 & 63) + l.charAt(o2 >> 6 & 63) + l.charAt(63 & o2);
            return 2 == i2 ? (e3 = t3.charCodeAt(s2) << 8, r3 = t3.charCodeAt(++s2), a2 += l.charAt((o2 = e3 + r3) >> 10) + l.charAt(o2 >> 4 & 63) + l.charAt(o2 << 2 & 63) + "=") : 1 == i2 && (o2 = t3.charCodeAt(s2), a2 += l.charAt(o2 >> 2) + l.charAt(o2 << 4 & 63) + "=="), a2;
          }, decode: function(t3) {
            var e3 = (t3 = String(t3).replace(p, "")).length;
            e3 % 4 == 0 && (e3 = (t3 = t3.replace(/==?$/, "")).length), (e3 % 4 == 1 || /[^+a-zA-Z0-9/]/.test(t3)) && f("Invalid character: the string to be decoded is not correctly encoded.");
            for (var r3, n3, o2 = 0, i2 = "", a2 = -1; ++a2 < e3; )
              n3 = l.indexOf(t3.charAt(a2)), r3 = o2 % 4 ? 64 * r3 + n3 : n3, o2++ % 4 && (i2 += String.fromCharCode(255 & r3 >> (-2 * o2 & 6)));
            return i2;
          }, version: "1.0.0" };
          if ("object" == o(r2.amdO) && r2.amdO)
            void 0 === (n2 = function() {
              return h;
            }.call(e2, r2, e2, t2)) || (t2.exports = n2);
          else if (a && !a.nodeType)
            if (s)
              s.exports = h;
            else
              for (var d in h)
                h.hasOwnProperty(d) && (a[d] = h[d]);
          else
            i.base64 = h;
        }(this);
      }, 8918: (t2, e2) => {
        "use strict";
        e2.k = function(t3) {
          if (!t3)
            return 0;
          for (var e3 = (t3 = t3.toString()).length, r2 = t3.length; r2--; ) {
            var n2 = t3.charCodeAt(r2);
            56320 <= n2 && n2 <= 57343 && r2--, 127 < n2 && n2 <= 2047 ? e3++ : 2047 < n2 && n2 <= 65535 && (e3 += 2);
          }
          return e3;
        };
      }, 5106: (t2) => {
        var e2 = { utf8: { stringToBytes: function(t3) {
          return e2.bin.stringToBytes(unescape(encodeURIComponent(t3)));
        }, bytesToString: function(t3) {
          return decodeURIComponent(escape(e2.bin.bytesToString(t3)));
        } }, bin: { stringToBytes: function(t3) {
          for (var e3 = [], r2 = 0; r2 < t3.length; r2++)
            e3.push(255 & t3.charCodeAt(r2));
          return e3;
        }, bytesToString: function(t3) {
          for (var e3 = [], r2 = 0; r2 < t3.length; r2++)
            e3.push(String.fromCharCode(t3[r2]));
          return e3.join("");
        } } };
        t2.exports = e2;
      }, 3718: (t2) => {
        var e2, r2;
        e2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", r2 = { rotl: function(t3, e3) {
          return t3 << e3 | t3 >>> 32 - e3;
        }, rotr: function(t3, e3) {
          return t3 << 32 - e3 | t3 >>> e3;
        }, endian: function(t3) {
          if (t3.constructor == Number)
            return 16711935 & r2.rotl(t3, 8) | 4278255360 & r2.rotl(t3, 24);
          for (var e3 = 0; e3 < t3.length; e3++)
            t3[e3] = r2.endian(t3[e3]);
          return t3;
        }, randomBytes: function(t3) {
          for (var e3 = []; t3 > 0; t3--)
            e3.push(Math.floor(256 * Math.random()));
          return e3;
        }, bytesToWords: function(t3) {
          for (var e3 = [], r3 = 0, n2 = 0; r3 < t3.length; r3++, n2 += 8)
            e3[n2 >>> 5] |= t3[r3] << 24 - n2 % 32;
          return e3;
        }, wordsToBytes: function(t3) {
          for (var e3 = [], r3 = 0; r3 < 32 * t3.length; r3 += 8)
            e3.push(t3[r3 >>> 5] >>> 24 - r3 % 32 & 255);
          return e3;
        }, bytesToHex: function(t3) {
          for (var e3 = [], r3 = 0; r3 < t3.length; r3++)
            e3.push((t3[r3] >>> 4).toString(16)), e3.push((15 & t3[r3]).toString(16));
          return e3.join("");
        }, hexToBytes: function(t3) {
          for (var e3 = [], r3 = 0; r3 < t3.length; r3 += 2)
            e3.push(parseInt(t3.substr(r3, 2), 16));
          return e3;
        }, bytesToBase64: function(t3) {
          for (var r3 = [], n2 = 0; n2 < t3.length; n2 += 3)
            for (var o = t3[n2] << 16 | t3[n2 + 1] << 8 | t3[n2 + 2], i = 0; i < 4; i++)
              8 * n2 + 6 * i <= 8 * t3.length ? r3.push(e2.charAt(o >>> 6 * (3 - i) & 63)) : r3.push("=");
          return r3.join("");
        }, base64ToBytes: function(t3) {
          t3 = t3.replace(/[^A-Z0-9+\/]/gi, "");
          for (var r3 = [], n2 = 0, o = 0; n2 < t3.length; o = ++n2 % 4)
            0 != o && r3.push((e2.indexOf(t3.charAt(n2 - 1)) & Math.pow(2, -2 * o + 8) - 1) << 2 * o | e2.indexOf(t3.charAt(n2)) >>> 6 - 2 * o);
          return r3;
        } }, t2.exports = r2;
      }, 7412: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(6410).buildOptions, i = { attributeNamePrefix: "@_", attrNodeName: false, textNodeName: "#text", ignoreAttributes: true, cdataTagName: false, cdataPositionChar: "\\c", format: false, indentBy: "  ", supressEmptyNode: false, tagValueProcessor: function(t3) {
          return t3;
        }, attrValueProcessor: function(t3) {
          return t3;
        } }, a = ["attributeNamePrefix", "attrNodeName", "textNodeName", "ignoreAttributes", "cdataTagName", "cdataPositionChar", "format", "indentBy", "supressEmptyNode", "tagValueProcessor", "attrValueProcessor", "rootNodeName"];
        function s(t3) {
          this.options = o(t3, i, a), this.options.ignoreAttributes || this.options.attrNodeName ? this.isAttribute = function() {
            return false;
          } : (this.attrPrefixLen = this.options.attributeNamePrefix.length, this.isAttribute = g), this.options.cdataTagName ? this.isCDATA = m : this.isCDATA = function() {
            return false;
          }, this.replaceCDATAstr = c, this.replaceCDATAarr = f, this.processTextOrObjNode = u, this.options.format ? (this.indentate = y, this.tagEndChar = ">\n", this.newLine = "\n") : (this.indentate = function() {
            return "";
          }, this.tagEndChar = ">", this.newLine = ""), this.options.supressEmptyNode ? (this.buildTextNode = d, this.buildObjNode = p) : (this.buildTextNode = h, this.buildObjNode = l), this.buildTextValNode = h, this.buildObjectNode = l;
        }
        function u(t3, e3, r3) {
          var n3 = this.j2x(t3, r3 + 1);
          return void 0 !== t3[this.options.textNodeName] && 1 === Object.keys(t3).length ? this.buildTextNode(n3.val, e3, n3.attrStr, r3) : this.buildObjNode(n3.val, e3, n3.attrStr, r3);
        }
        function c(t3, e3) {
          return t3 = this.options.tagValueProcessor("" + t3), "" === this.options.cdataPositionChar || "" === t3 ? t3 + "<![CDATA[" + e3 + "]]" + this.tagEndChar : t3.replace(this.options.cdataPositionChar, "<![CDATA[" + e3 + "]]" + this.tagEndChar);
        }
        function f(t3, e3) {
          if (t3 = this.options.tagValueProcessor("" + t3), "" === this.options.cdataPositionChar || "" === t3)
            return t3 + "<![CDATA[" + e3.join("]]><![CDATA[") + "]]" + this.tagEndChar;
          for (var r3 in e3)
            t3 = t3.replace(this.options.cdataPositionChar, "<![CDATA[" + e3[r3] + "]]>");
          return t3 + this.newLine;
        }
        function l(t3, e3, r3, n3) {
          return r3 && -1 === t3.indexOf("<") ? this.indentate(n3) + "<" + e3 + r3 + ">" + t3 + "</" + e3 + this.tagEndChar : this.indentate(n3) + "<" + e3 + r3 + this.tagEndChar + t3 + this.indentate(n3) + "</" + e3 + this.tagEndChar;
        }
        function p(t3, e3, r3, n3) {
          return "" !== t3 ? this.buildObjectNode(t3, e3, r3, n3) : this.indentate(n3) + "<" + e3 + r3 + "/" + this.tagEndChar;
        }
        function h(t3, e3, r3, n3) {
          return this.indentate(n3) + "<" + e3 + r3 + ">" + this.options.tagValueProcessor(t3) + "</" + e3 + this.tagEndChar;
        }
        function d(t3, e3, r3, n3) {
          return "" !== t3 ? this.buildTextValNode(t3, e3, r3, n3) : this.indentate(n3) + "<" + e3 + r3 + "/" + this.tagEndChar;
        }
        function y(t3) {
          return this.options.indentBy.repeat(t3);
        }
        function g(t3) {
          return !!t3.startsWith(this.options.attributeNamePrefix) && t3.substr(this.attrPrefixLen);
        }
        function m(t3) {
          return t3 === this.options.cdataTagName;
        }
        s.prototype.parse = function(t3) {
          var e3, r3, n3;
          return Array.isArray(t3) && this.options.rootNodeName && this.options.rootNodeName.length > 1 && (e3 = {}, n3 = t3, (r3 = this.options.rootNodeName) in e3 ? Object.defineProperty(e3, r3, { value: n3, enumerable: true, configurable: true, writable: true }) : e3[r3] = n3, t3 = e3), this.j2x(t3, 0).val;
        }, s.prototype.j2x = function(t3, e3) {
          var r3 = "", o2 = "";
          for (var i2 in t3)
            if (void 0 === t3[i2])
              ;
            else if (null === t3[i2])
              o2 += this.indentate(e3) + "<" + i2 + "/" + this.tagEndChar;
            else if (t3[i2] instanceof Date)
              o2 += this.buildTextNode(t3[i2], i2, "", e3);
            else if ("object" !== n2(t3[i2])) {
              var a2 = this.isAttribute(i2);
              a2 ? r3 += " " + a2 + '="' + this.options.attrValueProcessor("" + t3[i2]) + '"' : this.isCDATA(i2) ? t3[this.options.textNodeName] ? o2 += this.replaceCDATAstr(t3[this.options.textNodeName], t3[i2]) : o2 += this.replaceCDATAstr("", t3[i2]) : i2 === this.options.textNodeName ? t3[this.options.cdataTagName] || (o2 += this.options.tagValueProcessor("" + t3[i2])) : o2 += this.buildTextNode(t3[i2], i2, "", e3);
            } else if (Array.isArray(t3[i2]))
              if (this.isCDATA(i2))
                o2 += this.indentate(e3), t3[this.options.textNodeName] ? o2 += this.replaceCDATAarr(t3[this.options.textNodeName], t3[i2]) : o2 += this.replaceCDATAarr("", t3[i2]);
              else
                for (var s2 = t3[i2].length, u2 = 0; u2 < s2; u2++) {
                  var c2 = t3[i2][u2];
                  void 0 === c2 || (null === c2 ? o2 += this.indentate(e3) + "<" + i2 + "/" + this.tagEndChar : "object" === n2(c2) ? o2 += this.processTextOrObjNode(c2, i2, e3) : o2 += this.buildTextNode(c2, i2, "", e3));
                }
            else if (this.options.attrNodeName && i2 === this.options.attrNodeName)
              for (var f2 = Object.keys(t3[i2]), l2 = f2.length, p2 = 0; p2 < l2; p2++)
                r3 += " " + f2[p2] + '="' + this.options.attrValueProcessor("" + t3[i2][f2[p2]]) + '"';
            else
              o2 += this.processTextOrObjNode(t3[i2], i2, e3);
          return { attrStr: r3, val: o2 };
        }, t2.exports = s;
      }, 3927: (t2, e2, r2) => {
        "use strict";
        var n2 = function(t3) {
          return String.fromCharCode(t3);
        }, o = { nilChar: n2(176), missingChar: n2(201), nilPremitive: n2(175), missingPremitive: n2(200), emptyChar: n2(178), emptyValue: n2(177), boundryChar: n2(179), objStart: n2(198), arrStart: n2(204), arrayEnd: n2(185) }, i = [o.nilChar, o.nilPremitive, o.missingChar, o.missingPremitive, o.boundryChar, o.emptyChar, o.emptyValue, o.arrayEnd, o.objStart, o.arrStart], a = function t3(e3, r3, n3) {
          if ("string" == typeof r3)
            return e3 && e3[0] && void 0 !== e3[0].val ? s(e3[0].val, r3) : s(e3, r3);
          var i2, a2 = void 0 === (i2 = e3) ? o.missingChar : null === i2 ? o.nilChar : !(i2.child && 0 === Object.keys(i2.child).length && (!i2.attrsMap || 0 === Object.keys(i2.attrsMap).length)) || o.emptyChar;
          if (true === a2) {
            var c2 = "";
            if (Array.isArray(r3)) {
              c2 += o.arrStart;
              var f2 = r3[0], l2 = e3.length;
              if ("string" == typeof f2)
                for (var p = 0; p < l2; p++) {
                  var h = s(e3[p].val, f2);
                  c2 = u(c2, h);
                }
              else
                for (var d = 0; d < l2; d++) {
                  var y = t3(e3[d], f2, n3);
                  c2 = u(c2, y);
                }
              c2 += o.arrayEnd;
            } else {
              c2 += o.objStart;
              var g = Object.keys(r3);
              for (var m in Array.isArray(e3) && (e3 = e3[0]), g) {
                var v, b = g[m];
                v = !n3.ignoreAttributes && e3.attrsMap && e3.attrsMap[b] ? t3(e3.attrsMap[b], r3[b], n3) : b === n3.textNodeName ? t3(e3.val, r3[b], n3) : t3(e3.child[b], r3[b], n3), c2 = u(c2, v);
              }
            }
            return c2;
          }
          return a2;
        }, s = function(t3) {
          switch (t3) {
            case void 0:
              return o.missingPremitive;
            case null:
              return o.nilPremitive;
            case "":
              return o.emptyValue;
            default:
              return t3;
          }
        }, u = function(t3, e3) {
          return c(e3[0]) || c(t3[t3.length - 1]) || (t3 += o.boundryChar), t3 + e3;
        }, c = function(t3) {
          return -1 !== i.indexOf(t3);
        }, f = r2(4369), l = r2(6410).buildOptions;
        e2.convert2nimn = function(t3, e3, r3) {
          return r3 = l(r3, f.defaultOptions, f.props), a(t3, e3, r3);
        };
      }, 504: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(6410);
        e2.convertToJson = function t3(e3, r3, i) {
          var a = {};
          if (!r3.alwaysCreateTextNode && (!e3.child || o.isEmptyObject(e3.child)) && (!e3.attrsMap || o.isEmptyObject(e3.attrsMap)))
            return o.isExist(e3.val) ? e3.val : "";
          if (o.isExist(e3.val) && ("string" != typeof e3.val || "" !== e3.val && e3.val !== r3.cdataPositionChar)) {
            var s = o.isTagNameInArrayMode(e3.tagname, r3.arrayMode, i);
            a[r3.textNodeName] = s ? [e3.val] : e3.val;
          }
          o.merge(a, e3.attrsMap, r3.arrayMode);
          for (var u = Object.keys(e3.child), c = 0; c < u.length; c++) {
            var f = u[c];
            if (e3.child[f] && e3.child[f].length > 1)
              for (var l in a[f] = [], e3.child[f])
                e3.child[f].hasOwnProperty(l) && a[f].push(t3(e3.child[f][l], r3, f));
            else {
              var p = t3(e3.child[f][0], r3, f), h = true === r3.arrayMode && "object" === n2(p) || o.isTagNameInArrayMode(f, r3.arrayMode, i);
              a[f] = h ? [p] : p;
            }
          }
          return a;
        };
      }, 5651: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(6410), o = r2(6410).buildOptions, i = r2(4369), a = function t3(e3, r3, o2) {
          for (var i2, a2 = "{", s = Object.keys(e3.child), u = 0; u < s.length; u++) {
            var c = s[u];
            if (e3.child[c] && e3.child[c].length > 1) {
              for (var f in a2 += '"' + c + '" : [ ', e3.child[c])
                a2 += t3(e3.child[c][f], r3) + " , ";
              a2 = a2.substr(0, a2.length - 1) + " ] ";
            } else
              a2 += '"' + c + '" : ' + t3(e3.child[c][0], r3) + " ,";
          }
          return n2.merge(a2, e3.attrsMap), n2.isEmptyObject(a2) ? n2.isExist(e3.val) ? e3.val : "" : (n2.isExist(e3.val) && ("string" != typeof e3.val || "" !== e3.val && e3.val !== r3.cdataPositionChar) && (a2 += '"' + r3.textNodeName + '" : ' + (true !== (i2 = e3.val) && false !== i2 && isNaN(i2) ? '"' + i2 + '"' : i2)), "," === a2[a2.length - 1] && (a2 = a2.substr(0, a2.length - 2)), a2 + "}");
        };
        e2.convertToJsonString = function(t3, e3) {
          return (e3 = o(e3, i.defaultOptions, i.props)).indentBy = e3.indentBy || "", a(t3, e3);
        };
      }, 8819: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(504), o = r2(4369), i = r2(4369), a = r2(6410).buildOptions, s = r2(1135);
        e2.parse = function(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = arguments.length > 2 ? arguments[2] : void 0;
          if (r3) {
            true === r3 && (r3 = {});
            var u = s.validate(t3, r3);
            if (true !== u)
              throw Error(u.err.msg);
          }
          e3.parseTrueNumberOnly && false !== e3.parseNodeValue && !e3.numParseOptions && (e3.numParseOptions = { leadingZeros: false });
          var c = a(e3, i.defaultOptions, i.props), f = o.getTraversalObj(t3, c);
          return n2.convertToJson(f, c);
        }, e2.convertTonimn = r2(3927).convert2nimn, e2.getTraversalObj = o.getTraversalObj, e2.convertToJson = n2.convertToJson, e2.convertToJsonString = r2(5651).convertToJsonString, e2.validate = s.validate, e2.j2xParser = r2(7412), e2.parseToNimn = function(t3, r3, n3) {
          return e2.convertTonimn(e2.getTraversalObj(t3, n3), r3, n3);
        };
      }, 6410: (t2, e2) => {
        "use strict";
        var r2 = "[:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*", n2 = new RegExp("^" + r2 + "$");
        e2.isExist = function(t3) {
          return void 0 !== t3;
        }, e2.isEmptyObject = function(t3) {
          return 0 === Object.keys(t3).length;
        }, e2.merge = function(t3, e3, r3) {
          if (e3)
            for (var n3 = Object.keys(e3), o = n3.length, i = 0; i < o; i++)
              t3[n3[i]] = "strict" === r3 ? [e3[n3[i]]] : e3[n3[i]];
        }, e2.getValue = function(t3) {
          return e2.isExist(t3) ? t3 : "";
        }, e2.buildOptions = function(t3, e3, r3) {
          var n3 = {};
          if (!t3)
            return e3;
          for (var o = 0; o < r3.length; o++)
            void 0 !== t3[r3[o]] ? n3[r3[o]] = t3[r3[o]] : n3[r3[o]] = e3[r3[o]];
          return n3;
        }, e2.isTagNameInArrayMode = function(t3, e3, r3) {
          return false !== e3 && (e3 instanceof RegExp ? e3.test(t3) : "function" == typeof e3 ? !!e3(t3, r3) : "strict" === e3);
        }, e2.isName = function(t3) {
          return !(null == n2.exec(t3));
        }, e2.getAllMatches = function(t3, e3) {
          for (var r3 = [], n3 = e3.exec(t3); n3; ) {
            var o = [];
            o.startIndex = e3.lastIndex - n3[0].length;
            for (var i = n3.length, a = 0; a < i; a++)
              o.push(n3[a]);
            r3.push(o), n3 = e3.exec(t3);
          }
          return r3;
        }, e2.nameRegexp = r2;
      }, 1135: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(6410), o = { allowBooleanAttributes: false }, i = ["allowBooleanAttributes"];
        function a(t3, e3) {
          for (var r3 = e3; e3 < t3.length; e3++)
            if ("?" != t3[e3] && " " != t3[e3])
              ;
            else {
              var n3 = t3.substr(r3, e3 - r3);
              if (e3 > 5 && "xml" === n3)
                return p("InvalidXml", "XML declaration allowed only at the start of the document.", d(t3, e3));
              if ("?" == t3[e3] && ">" == t3[e3 + 1]) {
                e3++;
                break;
              }
            }
          return e3;
        }
        function s(t3, e3) {
          if (t3.length > e3 + 5 && "-" === t3[e3 + 1] && "-" === t3[e3 + 2]) {
            for (e3 += 3; e3 < t3.length; e3++)
              if ("-" === t3[e3] && "-" === t3[e3 + 1] && ">" === t3[e3 + 2]) {
                e3 += 2;
                break;
              }
          } else if (t3.length > e3 + 8 && "D" === t3[e3 + 1] && "O" === t3[e3 + 2] && "C" === t3[e3 + 3] && "T" === t3[e3 + 4] && "Y" === t3[e3 + 5] && "P" === t3[e3 + 6] && "E" === t3[e3 + 7]) {
            var r3 = 1;
            for (e3 += 8; e3 < t3.length; e3++)
              if ("<" === t3[e3])
                r3++;
              else if (">" === t3[e3] && 0 == --r3)
                break;
          } else if (t3.length > e3 + 9 && "[" === t3[e3 + 1] && "C" === t3[e3 + 2] && "D" === t3[e3 + 3] && "A" === t3[e3 + 4] && "T" === t3[e3 + 5] && "A" === t3[e3 + 6] && "[" === t3[e3 + 7]) {
            for (e3 += 8; e3 < t3.length; e3++)
              if ("]" === t3[e3] && "]" === t3[e3 + 1] && ">" === t3[e3 + 2]) {
                e3 += 2;
                break;
              }
          }
          return e3;
        }
        function u(t3, e3) {
          for (var r3 = "", n3 = "", o2 = false; e3 < t3.length; e3++) {
            if ('"' === t3[e3] || "'" === t3[e3])
              "" === n3 ? n3 = t3[e3] : n3 !== t3[e3] || (n3 = "");
            else if (">" === t3[e3] && "" === n3) {
              o2 = true;
              break;
            }
            r3 += t3[e3];
          }
          return "" === n3 && { value: r3, index: e3, tagClosed: o2 };
        }
        e2.validate = function(t3, e3) {
          e3 = n2.buildOptions(e3, o, i);
          var r3, c2 = [], h2 = false, y2 = false;
          "\uFEFF" === t3[0] && (t3 = t3.substr(1));
          for (var g = 0; g < t3.length; g++)
            if ("<" === t3[g] && "?" === t3[g + 1]) {
              if ((g = a(t3, g += 2)).err)
                return g;
            } else {
              if ("<" !== t3[g]) {
                if (" " === t3[g] || "	" === t3[g] || "\n" === t3[g] || "\r" === t3[g])
                  continue;
                return p("InvalidChar", "char '" + t3[g] + "' is not expected.", d(t3, g));
              }
              var m = g;
              if ("!" === t3[++g]) {
                g = s(t3, g);
                continue;
              }
              var v = false;
              "/" === t3[g] && (v = true, g++);
              for (var b = ""; g < t3.length && ">" !== t3[g] && " " !== t3[g] && "	" !== t3[g] && "\n" !== t3[g] && "\r" !== t3[g]; g++)
                b += t3[g];
              if ("/" === (b = b.trim())[b.length - 1] && (b = b.substring(0, b.length - 1), g--), r3 = b, !n2.isName(r3))
                return p("InvalidTag", 0 === b.trim().length ? "Invalid space after '<'." : "Tag '" + b + "' is an invalid name.", d(t3, g));
              var w = u(t3, g);
              if (false === w)
                return p("InvalidAttr", "Attributes for '" + b + "' have open quote.", d(t3, g));
              var O = w.value;
              if (g = w.index, "/" === O[O.length - 1]) {
                var A = g - O.length, j = f(O = O.substring(0, O.length - 1), e3);
                if (true !== j)
                  return p(j.err.code, j.err.msg, d(t3, A + j.err.line));
                h2 = true;
              } else if (v) {
                if (!w.tagClosed)
                  return p("InvalidTag", "Closing tag '" + b + "' doesn't have proper closing.", d(t3, g));
                if (O.trim().length > 0)
                  return p("InvalidTag", "Closing tag '" + b + "' can't have attributes or invalid starting.", d(t3, m));
                var x = c2.pop();
                if (b !== x.tagName) {
                  var E = d(t3, x.tagStartPos);
                  return p("InvalidTag", "Expected closing tag '" + x.tagName + "' (opened in line " + E.line + ", col " + E.col + ") instead of closing tag '" + b + "'.", d(t3, m));
                }
                0 == c2.length && (y2 = true);
              } else {
                var P = f(O, e3);
                if (true !== P)
                  return p(P.err.code, P.err.msg, d(t3, g - O.length + P.err.line));
                if (true === y2)
                  return p("InvalidXml", "Multiple possible root nodes found.", d(t3, g));
                c2.push({ tagName: b, tagStartPos: m }), h2 = true;
              }
              for (g++; g < t3.length; g++)
                if ("<" === t3[g]) {
                  if ("!" === t3[g + 1]) {
                    g = s(t3, ++g);
                    continue;
                  }
                  if ("?" !== t3[g + 1])
                    break;
                  if ((g = a(t3, ++g)).err)
                    return g;
                } else if ("&" === t3[g]) {
                  var S = l(t3, g);
                  if (-1 == S)
                    return p("InvalidChar", "char '&' is not expected.", d(t3, g));
                  g = S;
                }
              "<" === t3[g] && g--;
            }
          return h2 ? 1 == c2.length ? p("InvalidTag", "Unclosed tag '" + c2[0].tagName + "'.", d(t3, c2[0].tagStartPos)) : !(c2.length > 0) || p("InvalidXml", "Invalid '" + JSON.stringify(c2.map(function(t4) {
            return t4.tagName;
          }), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 }) : p("InvalidXml", "Start tag expected.", 1);
        };
        var c = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
        function f(t3, e3) {
          for (var r3 = n2.getAllMatches(t3, c), o2 = {}, i2 = 0; i2 < r3.length; i2++) {
            if (0 === r3[i2][1].length)
              return p("InvalidAttr", "Attribute '" + r3[i2][2] + "' has no space in starting.", y(r3[i2]));
            if (void 0 === r3[i2][3] && !e3.allowBooleanAttributes)
              return p("InvalidAttr", "boolean attribute '" + r3[i2][2] + "' is not allowed.", y(r3[i2]));
            var a2 = r3[i2][2];
            if (!h(a2))
              return p("InvalidAttr", "Attribute '" + a2 + "' is an invalid name.", y(r3[i2]));
            if (o2.hasOwnProperty(a2))
              return p("InvalidAttr", "Attribute '" + a2 + "' is repeated.", y(r3[i2]));
            o2[a2] = 1;
          }
          return true;
        }
        function l(t3, e3) {
          if (";" === t3[++e3])
            return -1;
          if ("#" === t3[e3])
            return function(t4, e4) {
              var r4 = /\d/;
              for ("x" === t4[e4] && (e4++, r4 = /[\da-fA-F]/); e4 < t4.length; e4++) {
                if (";" === t4[e4])
                  return e4;
                if (!t4[e4].match(r4))
                  break;
              }
              return -1;
            }(t3, ++e3);
          for (var r3 = 0; e3 < t3.length; e3++, r3++)
            if (!(t3[e3].match(/\w/) && r3 < 20)) {
              if (";" === t3[e3])
                break;
              return -1;
            }
          return e3;
        }
        function p(t3, e3, r3) {
          return { err: { code: t3, msg: e3, line: r3.line || r3, col: r3.col } };
        }
        function h(t3) {
          return n2.isName(t3);
        }
        function d(t3, e3) {
          var r3 = t3.substring(0, e3).split(/\r?\n/);
          return { line: r3.length, col: r3[r3.length - 1].length + 1 };
        }
        function y(t3) {
          return t3.startIndex + t3[1].length;
        }
      }, 6613: (t2) => {
        "use strict";
        t2.exports = function(t3, e2, r2) {
          this.tagname = t3, this.parent = e2, this.child = {}, this.attrsMap = {}, this.val = r2, this.addChild = function(t4) {
            Array.isArray(this.child[t4.tagname]) ? this.child[t4.tagname].push(t4) : this.child[t4.tagname] = [t4];
          };
        };
      }, 4369: (t2, e2, r2) => {
        "use strict";
        var n2 = r2(6410), o = r2(6410).buildOptions, i = r2(6613), a = r2(5512);
        "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, n2.nameRegexp), !Number.parseInt && window.parseInt && (Number.parseInt = window.parseInt), !Number.parseFloat && window.parseFloat && (Number.parseFloat = window.parseFloat);
        var s = { attributeNamePrefix: "@_", attrNodeName: false, textNodeName: "#text", ignoreAttributes: true, ignoreNameSpace: false, allowBooleanAttributes: false, parseNodeValue: true, parseAttributeValue: false, arrayMode: false, trimValues: true, cdataTagName: false, cdataPositionChar: "\\c", numParseOptions: { hex: true, leadingZeros: true }, tagValueProcessor: function(t3, e3) {
          return t3;
        }, attrValueProcessor: function(t3, e3) {
          return t3;
        }, stopNodes: [], alwaysCreateTextNode: false };
        e2.defaultOptions = s;
        var u = ["attributeNamePrefix", "attrNodeName", "textNodeName", "ignoreAttributes", "ignoreNameSpace", "allowBooleanAttributes", "parseNodeValue", "parseAttributeValue", "arrayMode", "trimValues", "cdataTagName", "cdataPositionChar", "tagValueProcessor", "attrValueProcessor", "parseTrueNumberOnly", "numParseOptions", "stopNodes", "alwaysCreateTextNode"];
        function c(t3, e3, r3) {
          return e3 && (r3.trimValues && (e3 = e3.trim()), e3 = l(e3 = r3.tagValueProcessor(e3, t3), r3.parseNodeValue, r3.numParseOptions)), e3;
        }
        function f(t3, e3) {
          if (e3.ignoreNameSpace) {
            var r3 = t3.split(":"), n3 = "/" === t3.charAt(0) ? "/" : "";
            if ("xmlns" === r3[0])
              return "";
            2 === r3.length && (t3 = n3 + r3[1]);
          }
          return t3;
        }
        function l(t3, e3, r3) {
          if (e3 && "string" == typeof t3) {
            var o2 = t3.trim();
            return "true" === o2 || "false" !== o2 && a(t3, r3);
          }
          return n2.isExist(t3) ? t3 : "";
        }
        e2.props = u;
        var p = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])(.*?)\\3)?`, "g");
        function h(t3, e3) {
          if (!e3.ignoreAttributes && "string" == typeof t3) {
            t3 = t3.replace(/\r?\n/g, " ");
            for (var r3 = n2.getAllMatches(t3, p), o2 = r3.length, i2 = {}, a2 = 0; a2 < o2; a2++) {
              var s2 = f(r3[a2][1], e3);
              s2.length && (void 0 !== r3[a2][4] ? (e3.trimValues && (r3[a2][4] = r3[a2][4].trim()), r3[a2][4] = e3.attrValueProcessor(r3[a2][4], s2), i2[e3.attributeNamePrefix + s2] = l(r3[a2][4], e3.parseAttributeValue, e3.numParseOptions)) : e3.allowBooleanAttributes && (i2[e3.attributeNamePrefix + s2] = true));
            }
            if (!Object.keys(i2).length)
              return;
            if (e3.attrNodeName) {
              var u2 = {};
              return u2[e3.attrNodeName] = i2, u2;
            }
            return i2;
          }
        }
        function d(t3, e3) {
          for (var r3, n3 = "", o2 = e3; o2 < t3.length; o2++) {
            var i2 = t3[o2];
            if (r3)
              i2 === r3 && (r3 = "");
            else if ('"' === i2 || "'" === i2)
              r3 = i2;
            else {
              if (">" === i2)
                return { data: n3, index: o2 };
              "	" === i2 && (i2 = " ");
            }
            n3 += i2;
          }
        }
        function y(t3, e3, r3, n3) {
          var o2 = t3.indexOf(e3, r3);
          if (-1 === o2)
            throw new Error(n3);
          return o2 + e3.length - 1;
        }
        e2.getTraversalObj = function(t3, e3) {
          t3 = t3.replace(/\r\n?/g, "\n"), e3 = o(e3, s, u);
          for (var r3 = new i("!xml"), a2 = r3, f2 = "", l2 = 0; l2 < t3.length; l2++)
            if ("<" === t3[l2])
              if ("/" === t3[l2 + 1]) {
                var p2 = y(t3, ">", l2, "Closing Tag is not closed."), g = t3.substring(l2 + 2, p2).trim();
                if (e3.ignoreNameSpace) {
                  var m = g.indexOf(":");
                  -1 !== m && (g = g.substr(m + 1));
                }
                a2 && (a2.val ? a2.val = n2.getValue(a2.val) + "" + c(g, f2, e3) : a2.val = c(g, f2, e3)), e3.stopNodes.length && e3.stopNodes.includes(a2.tagname) && (a2.child = [], null == a2.attrsMap && (a2.attrsMap = {}), a2.val = t3.substr(a2.startIndex + 1, l2 - a2.startIndex - 1)), a2 = a2.parent, f2 = "", l2 = p2;
              } else if ("?" === t3[l2 + 1])
                l2 = y(t3, "?>", l2, "Pi Tag is not closed.");
              else if ("!--" === t3.substr(l2 + 1, 3))
                l2 = y(t3, "-->", l2, "Comment is not closed.");
              else if ("!D" === t3.substr(l2 + 1, 2)) {
                var v = y(t3, ">", l2, "DOCTYPE is not closed.");
                l2 = t3.substring(l2, v).indexOf("[") >= 0 ? t3.indexOf("]>", l2) + 1 : v;
              } else if ("![" === t3.substr(l2 + 1, 2)) {
                var b = y(t3, "]]>", l2, "CDATA is not closed.") - 2, w = t3.substring(l2 + 9, b);
                if (f2 && (a2.val = n2.getValue(a2.val) + "" + c(a2.tagname, f2, e3), f2 = ""), e3.cdataTagName) {
                  var O = new i(e3.cdataTagName, a2, w);
                  a2.addChild(O), a2.val = n2.getValue(a2.val) + e3.cdataPositionChar, w && (O.val = w);
                } else
                  a2.val = (a2.val || "") + (w || "");
                l2 = b + 2;
              } else {
                var A = d(t3, l2 + 1), j = A.data, x = A.index, E = j.indexOf(" "), P = j, S = true;
                if (-1 !== E && (P = j.substr(0, E).replace(/\s\s*$/, ""), j = j.substr(E + 1)), e3.ignoreNameSpace) {
                  var N = P.indexOf(":");
                  -1 !== N && (S = (P = P.substr(N + 1)) !== A.data.substr(N + 1));
                }
                if (a2 && f2 && "!xml" !== a2.tagname && (a2.val = n2.getValue(a2.val) + "" + c(a2.tagname, f2, e3)), j.length > 0 && j.lastIndexOf("/") === j.length - 1) {
                  j = "/" === P[P.length - 1] ? P = P.substr(0, P.length - 1) : j.substr(0, j.length - 1);
                  var T = new i(P, a2, "");
                  P !== j && (T.attrsMap = h(j, e3)), a2.addChild(T);
                } else {
                  var C = new i(P, a2);
                  e3.stopNodes.length && e3.stopNodes.includes(C.tagname) && (C.startIndex = x), P !== j && S && (C.attrsMap = h(j, e3)), a2.addChild(C), a2 = C;
                }
                f2 = "", l2 = x;
              }
            else
              f2 += t3[l2];
          return r3;
        };
      }, 2665: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true }), e2.sequence = void 0, e2.sequence = function() {
          for (var t3 = [], e3 = 0; e3 < arguments.length; e3++)
            t3[e3] = arguments[e3];
          if (0 === t3.length)
            throw new Error("Failed creating sequence: No functions provided");
          return function() {
            for (var e4 = [], r2 = 0; r2 < arguments.length; r2++)
              e4[r2] = arguments[r2];
            for (var n2 = e4, o = this; t3.length > 0; ) {
              var i = t3.shift();
              n2 = [i.apply(o, n2)];
            }
            return n2[0];
          };
        };
      }, 9361: function(t2, e2, r2) {
        "use strict";
        var n2 = this && this.__createBinding || (Object.create ? function(t3, e3, r3, n3) {
          void 0 === n3 && (n3 = r3);
          var o2 = Object.getOwnPropertyDescriptor(e3, r3);
          o2 && !("get" in o2 ? !e3.__esModule : o2.writable || o2.configurable) || (o2 = { enumerable: true, get: function() {
            return e3[r3];
          } }), Object.defineProperty(t3, n3, o2);
        } : function(t3, e3, r3, n3) {
          void 0 === n3 && (n3 = r3), t3[n3] = e3[r3];
        }), o = this && this.__exportStar || function(t3, e3) {
          for (var r3 in t3)
            "default" === r3 || Object.prototype.hasOwnProperty.call(e3, r3) || n2(e3, t3, r3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.HotPatcher = void 0;
        var i = r2(2957);
        Object.defineProperty(e2, "HotPatcher", { enumerable: true, get: function() {
          return i.HotPatcher;
        } }), o(r2(2696), e2);
      }, 2957: function(t2, e2, r2) {
        "use strict";
        var n2 = this && this.__spreadArray || function(t3, e3, r3) {
          if (r3 || 2 === arguments.length)
            for (var n3, o2 = 0, i2 = e3.length; o2 < i2; o2++)
              !n3 && o2 in e3 || (n3 || (n3 = Array.prototype.slice.call(e3, 0, o2)), n3[o2] = e3[o2]);
          return t3.concat(n3 || Array.prototype.slice.call(e3));
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.HotPatcher = void 0;
        var o = r2(2665), i = "@@HOTPATCHER", a = function() {
        };
        function s(t3) {
          return { original: t3, methods: [t3], final: false };
        }
        var u = function() {
          function t3() {
            this._configuration = { registry: {}, getEmptyAction: "null" }, this.__type__ = i;
          }
          return Object.defineProperty(t3.prototype, "configuration", { get: function() {
            return this._configuration;
          }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "getEmptyAction", { get: function() {
            return this.configuration.getEmptyAction;
          }, set: function(t4) {
            this.configuration.getEmptyAction = t4;
          }, enumerable: false, configurable: true }), t3.prototype.control = function(t4, e3) {
            var r3 = this;
            if (void 0 === e3 && (e3 = false), !t4 || t4.__type__ !== i)
              throw new Error("Failed taking control of target HotPatcher instance: Invalid type or object");
            return Object.keys(t4.configuration.registry).forEach(function(n3) {
              r3.configuration.registry.hasOwnProperty(n3) ? e3 && (r3.configuration.registry[n3] = Object.assign({}, t4.configuration.registry[n3])) : r3.configuration.registry[n3] = Object.assign({}, t4.configuration.registry[n3]);
            }), t4._configuration = this.configuration, this;
          }, t3.prototype.execute = function(t4) {
            for (var e3 = [], r3 = 1; r3 < arguments.length; r3++)
              e3[r3 - 1] = arguments[r3];
            var n3 = this.get(t4) || a;
            return n3.apply(void 0, e3);
          }, t3.prototype.get = function(t4) {
            var e3 = this.configuration.registry[t4];
            if (!e3)
              switch (this.getEmptyAction) {
                case "null":
                  return null;
                case "throw":
                  throw new Error("Failed handling method request: No method provided for override: ".concat(t4));
                default:
                  throw new Error("Failed handling request which resulted in an empty method: Invalid empty-action specified: ".concat(this.getEmptyAction));
              }
            return o.sequence.apply(void 0, e3.methods);
          }, t3.prototype.isPatched = function(t4) {
            return !!this.configuration.registry[t4];
          }, t3.prototype.patch = function(t4, e3, r3) {
            void 0 === r3 && (r3 = {});
            var n3 = r3.chain, o2 = void 0 !== n3 && n3;
            if (this.configuration.registry[t4] && this.configuration.registry[t4].final)
              throw new Error("Failed patching '".concat(t4, "': Method marked as being final"));
            if ("function" != typeof e3)
              throw new Error("Failed patching '".concat(t4, "': Provided method is not a function"));
            if (o2)
              this.configuration.registry[t4] ? this.configuration.registry[t4].methods.push(e3) : this.configuration.registry[t4] = s(e3);
            else if (this.isPatched(t4)) {
              var i2 = this.configuration.registry[t4].original;
              this.configuration.registry[t4] = Object.assign(s(e3), { original: i2 });
            } else
              this.configuration.registry[t4] = s(e3);
            return this;
          }, t3.prototype.patchInline = function(t4, e3) {
            for (var r3 = [], o2 = 2; o2 < arguments.length; o2++)
              r3[o2 - 2] = arguments[o2];
            return this.isPatched(t4) || this.patch(t4, e3), this.execute.apply(this, n2([t4], r3, false));
          }, t3.prototype.plugin = function(t4) {
            for (var e3 = this, r3 = [], n3 = 1; n3 < arguments.length; n3++)
              r3[n3 - 1] = arguments[n3];
            return r3.forEach(function(r4) {
              e3.patch(t4, r4, { chain: true });
            }), this;
          }, t3.prototype.restore = function(t4) {
            if (!this.isPatched(t4))
              throw new Error("Failed restoring method: No method present for key: ".concat(t4));
            if ("function" != typeof this.configuration.registry[t4].original)
              throw new Error("Failed restoring method: Original method not found or of invalid type for key: ".concat(t4));
            return this.configuration.registry[t4].methods = [this.configuration.registry[t4].original], this;
          }, t3.prototype.setFinal = function(t4) {
            if (!this.configuration.registry.hasOwnProperty(t4))
              throw new Error("Failed marking '".concat(t4, "' as final: No method found for key"));
            return this.configuration.registry[t4].final = true, this;
          }, t3;
        }();
        e2.HotPatcher = u;
      }, 2696: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 163: (t2) => {
        function e2(t3) {
          return !!t3.constructor && "function" == typeof t3.constructor.isBuffer && t3.constructor.isBuffer(t3);
        }
        t2.exports = function(t3) {
          return null != t3 && (e2(t3) || function(t4) {
            return "function" == typeof t4.readFloatLE && "function" == typeof t4.slice && e2(t4.slice(0, 0));
          }(t3) || !!t3._isBuffer);
        };
      }, 6893: (t2, e2) => {
        "use strict";
        function r2(t3) {
          return "[object Error]" === (e3 = t3, Object.prototype.toString.call(e3)) || t3 instanceof Error;
          var e3;
        }
        Object.defineProperty(e2, "__esModule", { value: true }), e2.isError = e2.inherit = e2.assertError = void 0, e2.assertError = function(t3) {
          if (!r2(t3))
            throw new Error("Parameter was not an error");
        }, e2.inherit = function(t3, e3) {
          t3.super_ = e3, t3.prototype = Object.create(e3.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } });
        }, e2.isError = r2;
      }, 9104: function(t2, e2, r2) {
        "use strict";
        var n2 = this && this.__createBinding || (Object.create ? function(t3, e3, r3, n3) {
          void 0 === n3 && (n3 = r3), Object.defineProperty(t3, n3, { enumerable: true, get: function() {
            return e3[r3];
          } });
        } : function(t3, e3, r3, n3) {
          void 0 === n3 && (n3 = r3), t3[n3] = e3[r3];
        }), o = this && this.__exportStar || function(t3, e3) {
          for (var r3 in t3)
            "default" === r3 || Object.prototype.hasOwnProperty.call(e3, r3) || n2(e3, t3, r3);
        };
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Layerr = void 0;
        var i = r2(2248);
        Object.defineProperty(e2, "Layerr", { enumerable: true, get: function() {
          return i.Layerr;
        } }), o(r2(8646), e2);
      }, 2248: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        Object.defineProperty(e2, "__esModule", { value: true }), e2.Layerr = void 0;
        var o = r2(6893), i = r2(7235);
        function a(t3, e3) {
          var r3 = Array.prototype.slice.call(arguments);
          if (this instanceof a == 0)
            throw new Error("Cannot invoke 'Layerr' like a function: It must be called with 'new'");
          var o2 = i.parseArguments(r3), s = o2.options, u = o2.shortMessage;
          this.name = "Layerr", s.name && "string" == typeof s.name && (this.name = s.name);
          var c = u;
          if (s.cause && (Object.defineProperty(this, "_cause", { value: s.cause }), c = "".concat(c, ": ").concat(s.cause.message)), this.message = c, Object.defineProperty(this, "_info", { value: {} }), s.info && "object" === n2(s.info) && Object.assign(this._info, s.info), Error.call(this, c), Error.captureStackTrace) {
            var f = s.constructorOpt || this.constructor;
            Error.captureStackTrace(this, f);
          }
          return this;
        }
        e2.Layerr = a, o.inherit(a, Error), a.prototype.cause = function() {
          return a.cause(this) || void 0;
        }, a.prototype.toString = function() {
          var t3 = this.name || this.constructor.name || this.constructor.prototype.name;
          return this.message && (t3 = "".concat(t3, ": ").concat(this.message)), t3;
        }, a.cause = function(t3) {
          return o.assertError(t3), o.isError(t3._cause) ? t3._cause : null;
        }, a.fullStack = function(t3) {
          o.assertError(t3);
          var e3 = a.cause(t3);
          return e3 ? "".concat(t3.stack, "\ncaused by: ").concat(a.fullStack(e3)) : t3.stack;
        }, a.info = function(t3) {
          o.assertError(t3);
          var e3 = {}, r3 = a.cause(t3);
          return r3 && Object.assign(e3, a.info(r3)), t3._info && Object.assign(e3, t3._info), e3;
        };
      }, 7235: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        Object.defineProperty(e2, "__esModule", { value: true }), e2.parseArguments = void 0;
        var o = r2(6893);
        e2.parseArguments = function(t3) {
          var e3, r3 = "";
          if (0 === t3.length)
            e3 = {};
          else if (o.isError(t3[0]))
            e3 = { cause: t3[0] }, r3 = t3.slice(1).join(" ") || "";
          else if (t3[0] && "object" === n2(t3[0]))
            e3 = Object.assign({}, t3[0]), r3 = t3.slice(1).join(" ") || "";
          else {
            if ("string" != typeof t3[0])
              throw new Error("Invalid arguments passed to Layerr");
            e3 = {}, r3 = r3 = t3.join(" ") || "";
          }
          return { options: e3, shortMessage: r3 };
        };
      }, 8646: (t2, e2) => {
        "use strict";
        Object.defineProperty(e2, "__esModule", { value: true });
      }, 9243: (t2, e2, r2) => {
        var n2, o, i, a, s;
        n2 = r2(3718), o = r2(5106).utf8, i = r2(163), a = r2(5106).bin, (s = function t3(e3, r3) {
          e3.constructor == String ? e3 = r3 && "binary" === r3.encoding ? a.stringToBytes(e3) : o.stringToBytes(e3) : i(e3) ? e3 = Array.prototype.slice.call(e3, 0) : Array.isArray(e3) || e3.constructor === Uint8Array || (e3 = e3.toString());
          for (var s2 = n2.bytesToWords(e3), u = 8 * e3.length, c = 1732584193, f = -271733879, l = -1732584194, p = 271733878, h = 0; h < s2.length; h++)
            s2[h] = 16711935 & (s2[h] << 8 | s2[h] >>> 24) | 4278255360 & (s2[h] << 24 | s2[h] >>> 8);
          s2[u >>> 5] |= 128 << u % 32, s2[14 + (u + 64 >>> 9 << 4)] = u;
          var d = t3._ff, y = t3._gg, g = t3._hh, m = t3._ii;
          for (h = 0; h < s2.length; h += 16) {
            var v = c, b = f, w = l, O = p;
            c = d(c, f, l, p, s2[h + 0], 7, -680876936), p = d(p, c, f, l, s2[h + 1], 12, -389564586), l = d(l, p, c, f, s2[h + 2], 17, 606105819), f = d(f, l, p, c, s2[h + 3], 22, -1044525330), c = d(c, f, l, p, s2[h + 4], 7, -176418897), p = d(p, c, f, l, s2[h + 5], 12, 1200080426), l = d(l, p, c, f, s2[h + 6], 17, -1473231341), f = d(f, l, p, c, s2[h + 7], 22, -45705983), c = d(c, f, l, p, s2[h + 8], 7, 1770035416), p = d(p, c, f, l, s2[h + 9], 12, -1958414417), l = d(l, p, c, f, s2[h + 10], 17, -42063), f = d(f, l, p, c, s2[h + 11], 22, -1990404162), c = d(c, f, l, p, s2[h + 12], 7, 1804603682), p = d(p, c, f, l, s2[h + 13], 12, -40341101), l = d(l, p, c, f, s2[h + 14], 17, -1502002290), c = y(c, f = d(f, l, p, c, s2[h + 15], 22, 1236535329), l, p, s2[h + 1], 5, -165796510), p = y(p, c, f, l, s2[h + 6], 9, -1069501632), l = y(l, p, c, f, s2[h + 11], 14, 643717713), f = y(f, l, p, c, s2[h + 0], 20, -373897302), c = y(c, f, l, p, s2[h + 5], 5, -701558691), p = y(p, c, f, l, s2[h + 10], 9, 38016083), l = y(l, p, c, f, s2[h + 15], 14, -660478335), f = y(f, l, p, c, s2[h + 4], 20, -405537848), c = y(c, f, l, p, s2[h + 9], 5, 568446438), p = y(p, c, f, l, s2[h + 14], 9, -1019803690), l = y(l, p, c, f, s2[h + 3], 14, -187363961), f = y(f, l, p, c, s2[h + 8], 20, 1163531501), c = y(c, f, l, p, s2[h + 13], 5, -1444681467), p = y(p, c, f, l, s2[h + 2], 9, -51403784), l = y(l, p, c, f, s2[h + 7], 14, 1735328473), c = g(c, f = y(f, l, p, c, s2[h + 12], 20, -1926607734), l, p, s2[h + 5], 4, -378558), p = g(p, c, f, l, s2[h + 8], 11, -2022574463), l = g(l, p, c, f, s2[h + 11], 16, 1839030562), f = g(f, l, p, c, s2[h + 14], 23, -35309556), c = g(c, f, l, p, s2[h + 1], 4, -1530992060), p = g(p, c, f, l, s2[h + 4], 11, 1272893353), l = g(l, p, c, f, s2[h + 7], 16, -155497632), f = g(f, l, p, c, s2[h + 10], 23, -1094730640), c = g(c, f, l, p, s2[h + 13], 4, 681279174), p = g(p, c, f, l, s2[h + 0], 11, -358537222), l = g(l, p, c, f, s2[h + 3], 16, -722521979), f = g(f, l, p, c, s2[h + 6], 23, 76029189), c = g(c, f, l, p, s2[h + 9], 4, -640364487), p = g(p, c, f, l, s2[h + 12], 11, -421815835), l = g(l, p, c, f, s2[h + 15], 16, 530742520), c = m(c, f = g(f, l, p, c, s2[h + 2], 23, -995338651), l, p, s2[h + 0], 6, -198630844), p = m(p, c, f, l, s2[h + 7], 10, 1126891415), l = m(l, p, c, f, s2[h + 14], 15, -1416354905), f = m(f, l, p, c, s2[h + 5], 21, -57434055), c = m(c, f, l, p, s2[h + 12], 6, 1700485571), p = m(p, c, f, l, s2[h + 3], 10, -1894986606), l = m(l, p, c, f, s2[h + 10], 15, -1051523), f = m(f, l, p, c, s2[h + 1], 21, -2054922799), c = m(c, f, l, p, s2[h + 8], 6, 1873313359), p = m(p, c, f, l, s2[h + 15], 10, -30611744), l = m(l, p, c, f, s2[h + 6], 15, -1560198380), f = m(f, l, p, c, s2[h + 13], 21, 1309151649), c = m(c, f, l, p, s2[h + 4], 6, -145523070), p = m(p, c, f, l, s2[h + 11], 10, -1120210379), l = m(l, p, c, f, s2[h + 2], 15, 718787259), f = m(f, l, p, c, s2[h + 9], 21, -343485551), c = c + v >>> 0, f = f + b >>> 0, l = l + w >>> 0, p = p + O >>> 0;
          }
          return n2.endian([c, f, l, p]);
        })._ff = function(t3, e3, r3, n3, o2, i2, a2) {
          var s2 = t3 + (e3 & r3 | ~e3 & n3) + (o2 >>> 0) + a2;
          return (s2 << i2 | s2 >>> 32 - i2) + e3;
        }, s._gg = function(t3, e3, r3, n3, o2, i2, a2) {
          var s2 = t3 + (e3 & n3 | r3 & ~n3) + (o2 >>> 0) + a2;
          return (s2 << i2 | s2 >>> 32 - i2) + e3;
        }, s._hh = function(t3, e3, r3, n3, o2, i2, a2) {
          var s2 = t3 + (e3 ^ r3 ^ n3) + (o2 >>> 0) + a2;
          return (s2 << i2 | s2 >>> 32 - i2) + e3;
        }, s._ii = function(t3, e3, r3, n3, o2, i2, a2) {
          var s2 = t3 + (r3 ^ (e3 | ~n3)) + (o2 >>> 0) + a2;
          return (s2 << i2 | s2 >>> 32 - i2) + e3;
        }, s._blocksize = 16, s._digestsize = 16, t2.exports = function(t3, e3) {
          if (null == t3)
            throw new Error("Illegal argument " + t3);
          var r3 = n2.wordsToBytes(s(t3, e3));
          return e3 && e3.asBytes ? r3 : e3 && e3.asString ? a.bytesToString(r3) : n2.bytesToHex(r3);
        };
      }, 1050: (t2) => {
        function e2(t3) {
          return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, e2(t3);
        }
        var r2 = "object" === ("undefined" == typeof process ? "undefined" : e2(process)) && process && "win32" === process.platform;
        t2.exports = r2 ? { sep: "\\" } : { sep: "/" };
      }, 3e3: (t2, e2, r2) => {
        function n2(t3, e3) {
          for (var r3 = 0; r3 < e3.length; r3++) {
            var n3 = e3[r3];
            n3.enumerable = n3.enumerable || false, n3.configurable = true, "value" in n3 && (n3.writable = true), Object.defineProperty(t3, n3.key, n3);
          }
        }
        function o(t3, e3, r3) {
          return e3 && n2(t3.prototype, e3), r3 && n2(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        function i(t3, e3) {
          if (!(t3 instanceof e3))
            throw new TypeError("Cannot call a class as a function");
        }
        function a(t3, e3) {
          return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, a(t3, e3);
        }
        function s(t3, e3) {
          if (e3 && ("object" === c(e3) || "function" == typeof e3))
            return e3;
          if (void 0 !== e3)
            throw new TypeError("Derived constructors may only return object or undefined");
          return function(t4) {
            if (void 0 === t4)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t4;
          }(t3);
        }
        function u(t3) {
          return u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, u(t3);
        }
        function c(t3) {
          return c = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, c(t3);
        }
        var f = t2.exports = function(t3, e3) {
          var r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          return j(e3), !(!r3.nocomment && "#" === e3.charAt(0)) && new E(e3, r3).match(t3);
        };
        t2.exports = f;
        var l = r2(1050);
        f.sep = l.sep;
        var p = Symbol("globstar **");
        f.GLOBSTAR = p;
        var h = r2(3637), d = { "!": { open: "(?:(?!(?:", close: "))[^/]*?)" }, "?": { open: "(?:", close: ")?" }, "+": { open: "(?:", close: ")+" }, "*": { open: "(?:", close: ")*" }, "@": { open: "(?:", close: ")" } }, y = "[^/]", g = "[^/]*?", m = function(t3) {
          return t3.split("").reduce(function(t4, e3) {
            return t4[e3] = true, t4;
          }, {});
        }, v = m("().*{}+?[]^$\\!"), b = m("[.("), w = /\/+/;
        f.filter = function(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          return function(r3, n3, o2) {
            return f(r3, t3, e3);
          };
        };
        var O = function(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r3 = {};
          return Object.keys(t3).forEach(function(e4) {
            return r3[e4] = t3[e4];
          }), Object.keys(e3).forEach(function(t4) {
            return r3[t4] = e3[t4];
          }), r3;
        };
        f.defaults = function(t3) {
          if (!t3 || "object" !== c(t3) || !Object.keys(t3).length)
            return f;
          var e3 = f, r3 = function(r4, n3, o2) {
            return e3(r4, n3, O(t3, o2));
          };
          return (r3.Minimatch = function(e4) {
            !function(t4, e5) {
              if ("function" != typeof e5 && null !== e5)
                throw new TypeError("Super expression must either be null or a function");
              t4.prototype = Object.create(e5 && e5.prototype, { constructor: { value: t4, writable: true, configurable: true } }), Object.defineProperty(t4, "prototype", { writable: false }), e5 && a(t4, e5);
            }(f2, e4);
            var r4, n3, c2 = (r4 = f2, n3 = function() {
              if ("undefined" == typeof Reflect || !Reflect.construct)
                return false;
              if (Reflect.construct.sham)
                return false;
              if ("function" == typeof Proxy)
                return true;
              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
                })), true;
              } catch (t4) {
                return false;
              }
            }(), function() {
              var t4, e5 = u(r4);
              if (n3) {
                var o2 = u(this).constructor;
                t4 = Reflect.construct(e5, arguments, o2);
              } else
                t4 = e5.apply(this, arguments);
              return s(this, t4);
            });
            function f2(e5, r5) {
              return i(this, f2), c2.call(this, e5, O(t3, r5));
            }
            return o(f2);
          }(e3.Minimatch)).defaults = function(r4) {
            return e3.defaults(O(t3, r4)).Minimatch;
          }, r3.filter = function(r4, n3) {
            return e3.filter(r4, O(t3, n3));
          }, r3.defaults = function(r4) {
            return e3.defaults(O(t3, r4));
          }, r3.makeRe = function(r4, n3) {
            return e3.makeRe(r4, O(t3, n3));
          }, r3.braceExpand = function(r4, n3) {
            return e3.braceExpand(r4, O(t3, n3));
          }, r3.match = function(r4, n3, o2) {
            return e3.match(r4, n3, O(t3, o2));
          }, r3;
        }, f.braceExpand = function(t3, e3) {
          return A(t3, e3);
        };
        var A = function(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          return j(t3), e3.nobrace || !/\{(?:(?!\{).)*\}/.test(t3) ? [t3] : h(t3);
        }, j = function(t3) {
          if ("string" != typeof t3)
            throw new TypeError("invalid pattern");
          if (t3.length > 65536)
            throw new TypeError("pattern is too long");
        }, x = Symbol("subparse");
        f.makeRe = function(t3, e3) {
          return new E(t3, e3 || {}).makeRe();
        }, f.match = function(t3, e3) {
          var r3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n3 = new E(e3, r3);
          return t3 = t3.filter(function(t4) {
            return n3.match(t4);
          }), n3.options.nonull && !t3.length && t3.push(e3), t3;
        };
        var E = function() {
          function t3(e3, r3) {
            i(this, t3), j(e3), r3 || (r3 = {}), this.options = r3, this.set = [], this.pattern = e3, this.windowsPathsNoEscape = !!r3.windowsPathsNoEscape || false === r3.allowWindowsEscape, this.windowsPathsNoEscape && (this.pattern = this.pattern.replace(/\\/g, "/")), this.regexp = null, this.negate = false, this.comment = false, this.empty = false, this.partial = !!r3.partial, this.make();
          }
          return o(t3, [{ key: "debug", value: function() {
          } }, { key: "make", value: function() {
            var t4 = this, e3 = this.pattern, r3 = this.options;
            if (r3.nocomment || "#" !== e3.charAt(0))
              if (e3) {
                this.parseNegate();
                var n3 = this.globSet = this.braceExpand();
                r3.debug && (this.debug = function() {
                  var t5;
                  return (t5 = console).error.apply(t5, arguments);
                }), this.debug(this.pattern, n3), n3 = this.globParts = n3.map(function(t5) {
                  return t5.split(w);
                }), this.debug(this.pattern, n3), n3 = n3.map(function(e4, r4, n4) {
                  return e4.map(t4.parse, t4);
                }), this.debug(this.pattern, n3), n3 = n3.filter(function(t5) {
                  return -1 === t5.indexOf(false);
                }), this.debug(this.pattern, n3), this.set = n3;
              } else
                this.empty = true;
            else
              this.comment = true;
          } }, { key: "parseNegate", value: function() {
            if (!this.options.nonegate) {
              for (var t4 = this.pattern, e3 = false, r3 = 0, n3 = 0; n3 < t4.length && "!" === t4.charAt(n3); n3++)
                e3 = !e3, r3++;
              r3 && (this.pattern = t4.substr(r3)), this.negate = e3;
            }
          } }, { key: "matchOne", value: function(t4, e3, r3) {
            var n3 = this.options;
            this.debug("matchOne", { this: this, file: t4, pattern: e3 }), this.debug("matchOne", t4.length, e3.length);
            for (var o2 = 0, i2 = 0, a2 = t4.length, s2 = e3.length; o2 < a2 && i2 < s2; o2++, i2++) {
              this.debug("matchOne loop");
              var u2, c2 = e3[i2], f2 = t4[o2];
              if (this.debug(e3, c2, f2), false === c2)
                return false;
              if (c2 === p) {
                this.debug("GLOBSTAR", [e3, c2, f2]);
                var l2 = o2, h2 = i2 + 1;
                if (h2 === s2) {
                  for (this.debug("** at the end"); o2 < a2; o2++)
                    if ("." === t4[o2] || ".." === t4[o2] || !n3.dot && "." === t4[o2].charAt(0))
                      return false;
                  return true;
                }
                for (; l2 < a2; ) {
                  var d2 = t4[l2];
                  if (this.debug("\nglobstar while", t4, l2, e3, h2, d2), this.matchOne(t4.slice(l2), e3.slice(h2), r3))
                    return this.debug("globstar found match!", l2, a2, d2), true;
                  if ("." === d2 || ".." === d2 || !n3.dot && "." === d2.charAt(0)) {
                    this.debug("dot detected!", t4, l2, e3, h2);
                    break;
                  }
                  this.debug("globstar swallow a segment, and continue"), l2++;
                }
                return !(!r3 || (this.debug("\n>>> no match, partial?", t4, l2, e3, h2), l2 !== a2));
              }
              if ("string" == typeof c2 ? (u2 = f2 === c2, this.debug("string match", c2, f2, u2)) : (u2 = f2.match(c2), this.debug("pattern match", c2, f2, u2)), !u2)
                return false;
            }
            if (o2 === a2 && i2 === s2)
              return true;
            if (o2 === a2)
              return r3;
            if (i2 === s2)
              return o2 === a2 - 1 && "" === t4[o2];
            throw new Error("wtf?");
          } }, { key: "braceExpand", value: function() {
            return A(this.pattern, this.options);
          } }, { key: "parse", value: function(t4, e3) {
            var r3 = this;
            j(t4);
            var n3 = this.options;
            if ("**" === t4) {
              if (!n3.noglobstar)
                return p;
              t4 = "*";
            }
            if ("" === t4)
              return "";
            for (var o2, i2, a2, s2, u2, c2 = "", f2 = !!n3.nocase, l2 = false, h2 = [], m2 = [], w2 = false, O2 = -1, A2 = -1, E2 = "." === t4.charAt(0) ? "" : n3.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)", P = function() {
              if (o2) {
                switch (o2) {
                  case "*":
                    c2 += g, f2 = true;
                    break;
                  case "?":
                    c2 += y, f2 = true;
                    break;
                  default:
                    c2 += "\\" + o2;
                }
                r3.debug("clearStateChar %j %j", o2, c2), o2 = false;
              }
            }, S = 0; S < t4.length && (u2 = t4.charAt(S)); S++)
              if (this.debug("%s	%s %s %j", t4, S, c2, u2), l2) {
                if ("/" === u2)
                  return false;
                v[u2] && (c2 += "\\"), c2 += u2, l2 = false;
              } else
                switch (u2) {
                  case "/":
                    return false;
                  case "\\":
                    P(), l2 = true;
                    continue;
                  case "?":
                  case "*":
                  case "+":
                  case "@":
                  case "!":
                    if (this.debug("%s	%s %s %j <-- stateChar", t4, S, c2, u2), w2) {
                      this.debug("  in class"), "!" === u2 && S === A2 + 1 && (u2 = "^"), c2 += u2;
                      continue;
                    }
                    this.debug("call clearStateChar %j", o2), P(), o2 = u2, n3.noext && P();
                    continue;
                  case "(":
                    if (w2) {
                      c2 += "(";
                      continue;
                    }
                    if (!o2) {
                      c2 += "\\(";
                      continue;
                    }
                    h2.push({ type: o2, start: S - 1, reStart: c2.length, open: d[o2].open, close: d[o2].close }), c2 += "!" === o2 ? "(?:(?!(?:" : "(?:", this.debug("plType %j %j", o2, c2), o2 = false;
                    continue;
                  case ")":
                    if (w2 || !h2.length) {
                      c2 += "\\)";
                      continue;
                    }
                    P(), f2 = true, a2 = h2.pop(), c2 += a2.close, "!" === a2.type && m2.push(a2), a2.reEnd = c2.length;
                    continue;
                  case "|":
                    if (w2 || !h2.length) {
                      c2 += "\\|";
                      continue;
                    }
                    P(), c2 += "|";
                    continue;
                  case "[":
                    if (P(), w2) {
                      c2 += "\\" + u2;
                      continue;
                    }
                    w2 = true, A2 = S, O2 = c2.length, c2 += u2;
                    continue;
                  case "]":
                    if (S === A2 + 1 || !w2) {
                      c2 += "\\" + u2;
                      continue;
                    }
                    i2 = t4.substring(A2 + 1, S);
                    try {
                      RegExp("[" + i2 + "]");
                    } catch (t5) {
                      s2 = this.parse(i2, x), c2 = c2.substr(0, O2) + "\\[" + s2[0] + "\\]", f2 = f2 || s2[1], w2 = false;
                      continue;
                    }
                    f2 = true, w2 = false, c2 += u2;
                    continue;
                  default:
                    P(), !v[u2] || "^" === u2 && w2 || (c2 += "\\"), c2 += u2;
                }
            for (w2 && (i2 = t4.substr(A2 + 1), s2 = this.parse(i2, x), c2 = c2.substr(0, O2) + "\\[" + s2[0], f2 = f2 || s2[1]), a2 = h2.pop(); a2; a2 = h2.pop()) {
              var N = void 0;
              N = c2.slice(a2.reStart + a2.open.length), this.debug("setting tail", c2, a2), N = N.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(t5, e4, r4) {
                return r4 || (r4 = "\\"), e4 + e4 + r4 + "|";
              }), this.debug("tail=%j\n   %s", N, N, a2, c2);
              var T = "*" === a2.type ? g : "?" === a2.type ? y : "\\" + a2.type;
              f2 = true, c2 = c2.slice(0, a2.reStart) + T + "\\(" + N;
            }
            P(), l2 && (c2 += "\\\\");
            for (var C = b[c2.charAt(0)], R = m2.length - 1; R > -1; R--) {
              for (var _ = m2[R], k = c2.slice(0, _.reStart), I = c2.slice(_.reStart, _.reEnd - 8), D = c2.slice(_.reEnd), L = c2.slice(_.reEnd - 8, _.reEnd) + D, F = k.split("(").length - 1, U = D, M = 0; M < F; M++)
                U = U.replace(/\)[+*?]?/, "");
              c2 = k + I + (D = U) + ("" === D && e3 !== x ? "$" : "") + L;
            }
            if ("" !== c2 && f2 && (c2 = "(?=.)" + c2), C && (c2 = E2 + c2), e3 === x)
              return [c2, f2];
            if (!f2)
              return t4.replace(/\\(.)/g, "$1");
            var B = n3.nocase ? "i" : "";
            try {
              return Object.assign(new RegExp("^" + c2 + "$", B), { _glob: t4, _src: c2 });
            } catch (t5) {
              return new RegExp("$.");
            }
          } }, { key: "makeRe", value: function() {
            if (this.regexp || false === this.regexp)
              return this.regexp;
            var t4 = this.set;
            if (!t4.length)
              return this.regexp = false, this.regexp;
            var e3 = this.options, r3 = e3.noglobstar ? g : e3.dot ? "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?" : "(?:(?!(?:\\/|^)\\.).)*?", n3 = e3.nocase ? "i" : "", o2 = t4.map(function(t5) {
              return t5 = t5.map(function(t6) {
                return "string" == typeof t6 ? t6.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : t6 === p ? p : t6._src;
              }).reduce(function(t6, e4) {
                return t6[t6.length - 1] === p && e4 === p || t6.push(e4), t6;
              }, []), t5.forEach(function(e4, n4) {
                e4 === p && t5[n4 - 1] !== p && (0 === n4 ? t5.length > 1 ? t5[n4 + 1] = "(?:\\/|" + r3 + "\\/)?" + t5[n4 + 1] : t5[n4] = r3 : n4 === t5.length - 1 ? t5[n4 - 1] += "(?:\\/|" + r3 + ")?" : (t5[n4 - 1] += "(?:\\/|\\/" + r3 + "\\/)" + t5[n4 + 1], t5[n4 + 1] = p));
              }), t5.filter(function(t6) {
                return t6 !== p;
              }).join("/");
            }).join("|");
            o2 = "^(?:" + o2 + ")$", this.negate && (o2 = "^(?!" + o2 + ").*$");
            try {
              this.regexp = new RegExp(o2, n3);
            } catch (t5) {
              this.regexp = false;
            }
            return this.regexp;
          } }, { key: "match", value: function(t4) {
            var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.partial;
            if (this.debug("match", t4, this.pattern), this.comment)
              return false;
            if (this.empty)
              return "" === t4;
            if ("/" === t4 && e3)
              return true;
            var r3 = this.options;
            "/" !== l.sep && (t4 = t4.split(l.sep).join("/")), t4 = t4.split(w), this.debug(this.pattern, "split", t4);
            var n3, o2 = this.set;
            this.debug(this.pattern, "set", o2);
            for (var i2 = t4.length - 1; i2 >= 0 && !(n3 = t4[i2]); i2--)
              ;
            for (var a2 = 0; a2 < o2.length; a2++) {
              var s2 = o2[a2], u2 = t4;
              r3.matchBase && 1 === s2.length && (u2 = [n3]);
              var c2 = this.matchOne(u2, s2, e3);
              if (c2)
                return !!r3.flipNegate || !this.negate;
            }
            return !r3.flipNegate && this.negate;
          } }], [{ key: "defaults", value: function(t4) {
            return f.defaults(t4).Minimatch;
          } }]), t3;
        }();
        f.Minimatch = E;
      }, 3637: (t2, e2, r2) => {
        var n2 = r2(9584);
        t2.exports = function(t3) {
          return t3 ? ("{}" === t3.substr(0, 2) && (t3 = "\\{\\}" + t3.substr(2)), g(function(t4) {
            return t4.split("\\\\").join(o).split("\\{").join(i).split("\\}").join(a).split("\\,").join(s).split("\\.").join(u);
          }(t3), true).map(f)) : [];
        };
        var o = "\0SLASH" + Math.random() + "\0", i = "\0OPEN" + Math.random() + "\0", a = "\0CLOSE" + Math.random() + "\0", s = "\0COMMA" + Math.random() + "\0", u = "\0PERIOD" + Math.random() + "\0";
        function c(t3) {
          return parseInt(t3, 10) == t3 ? parseInt(t3, 10) : t3.charCodeAt(0);
        }
        function f(t3) {
          return t3.split(o).join("\\").split(i).join("{").split(a).join("}").split(s).join(",").split(u).join(".");
        }
        function l(t3) {
          if (!t3)
            return [""];
          var e3 = [], r3 = n2("{", "}", t3);
          if (!r3)
            return t3.split(",");
          var o2 = r3.pre, i2 = r3.body, a2 = r3.post, s2 = o2.split(",");
          s2[s2.length - 1] += "{" + i2 + "}";
          var u2 = l(a2);
          return a2.length && (s2[s2.length - 1] += u2.shift(), s2.push.apply(s2, u2)), e3.push.apply(e3, s2), e3;
        }
        function p(t3) {
          return "{" + t3 + "}";
        }
        function h(t3) {
          return /^-?0\d/.test(t3);
        }
        function d(t3, e3) {
          return t3 <= e3;
        }
        function y(t3, e3) {
          return t3 >= e3;
        }
        function g(t3, e3) {
          var r3 = [], o2 = n2("{", "}", t3);
          if (!o2)
            return [t3];
          var i2 = o2.pre, s2 = o2.post.length ? g(o2.post, false) : [""];
          if (/\$$/.test(o2.pre))
            for (var u2 = 0; u2 < s2.length; u2++) {
              var f2 = i2 + "{" + o2.body + "}" + s2[u2];
              r3.push(f2);
            }
          else {
            var m, v, b = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(o2.body), w = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(o2.body), O = b || w, A = o2.body.indexOf(",") >= 0;
            if (!O && !A)
              return o2.post.match(/,.*\}/) ? g(t3 = o2.pre + "{" + o2.body + a + o2.post) : [t3];
            if (O)
              m = o2.body.split(/\.\./);
            else if (1 === (m = l(o2.body)).length && 1 === (m = g(m[0], false).map(p)).length)
              return s2.map(function(t4) {
                return o2.pre + m[0] + t4;
              });
            if (O) {
              var j = c(m[0]), x = c(m[1]), E = Math.max(m[0].length, m[1].length), P = 3 == m.length ? Math.abs(c(m[2])) : 1, S = d;
              x < j && (P *= -1, S = y);
              var N = m.some(h);
              v = [];
              for (var T = j; S(T, x); T += P) {
                var C;
                if (w)
                  "\\" === (C = String.fromCharCode(T)) && (C = "");
                else if (C = String(T), N) {
                  var R = E - C.length;
                  if (R > 0) {
                    var _ = new Array(R + 1).join("0");
                    C = T < 0 ? "-" + _ + C.slice(1) : _ + C;
                  }
                }
                v.push(C);
              }
            } else {
              v = [];
              for (var k = 0; k < m.length; k++)
                v.push.apply(v, g(m[k], false));
            }
            for (k = 0; k < v.length; k++)
              for (u2 = 0; u2 < s2.length; u2++)
                f2 = i2 + v[k] + s2[u2], (!e3 || O || f2) && r3.push(f2);
          }
          return r3;
        }
      }, 2421: (t2) => {
        "use strict";
        function e2(t3) {
          return e2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, e2(t3);
        }
        function r2(t3) {
          var e3 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return r2 = function(t4) {
            if (null === t4 || (r3 = t4, -1 === Function.toString.call(r3).indexOf("[native code]")))
              return t4;
            var r3;
            if ("function" != typeof t4)
              throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e3) {
              if (e3.has(t4))
                return e3.get(t4);
              e3.set(t4, o2);
            }
            function o2() {
              return n2(t4, arguments, a(this).constructor);
            }
            return o2.prototype = Object.create(t4.prototype, { constructor: { value: o2, enumerable: false, writable: true, configurable: true } }), i(o2, t4);
          }, r2(t3);
        }
        function n2(t3, e3, r3) {
          return n2 = o() ? Reflect.construct : function(t4, e4, r4) {
            var n3 = [null];
            n3.push.apply(n3, e4);
            var o2 = new (Function.bind.apply(t4, n3))();
            return r4 && i(o2, r4.prototype), o2;
          }, n2.apply(null, arguments);
        }
        function o() {
          if ("undefined" == typeof Reflect || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if ("function" == typeof Proxy)
            return true;
          try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
            })), true;
          } catch (t3) {
            return false;
          }
        }
        function i(t3, e3) {
          return i = Object.setPrototypeOf || function(t4, e4) {
            return t4.__proto__ = e4, t4;
          }, i(t3, e3);
        }
        function a(t3) {
          return a = Object.setPrototypeOf ? Object.getPrototypeOf : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, a(t3);
        }
        var s = ".", u = function(t3) {
          function r3(t4) {
            var n3;
            return function(t5, e3) {
              if (!(t5 instanceof e3))
                throw new TypeError("Cannot call a class as a function");
            }(this, r3), (n3 = function(t5, r4) {
              return !r4 || "object" !== e2(r4) && "function" != typeof r4 ? function(t6) {
                if (void 0 === t6)
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t6;
              }(t5) : r4;
            }(this, a(r3).call(this, t4))).name = "ObjectPrototypeMutationError", n3;
          }
          return function(t4, e3) {
            if ("function" != typeof e3 && null !== e3)
              throw new TypeError("Super expression must either be null or a function");
            t4.prototype = Object.create(e3 && e3.prototype, { constructor: { value: t4, writable: true, configurable: true } }), e3 && i(t4, e3);
          }(r3, t3), r3;
        }(r2(Error));
        function c(t3, r3) {
          for (var n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function() {
          }, o2 = r3.split(s), i2 = o2.length, a2 = function(e3) {
            var r4 = o2[e3];
            if (!t3)
              return { v: void 0 };
            if ("+" === r4) {
              if (Array.isArray(t3))
                return { v: t3.map(function(r5, i4) {
                  var a3 = o2.slice(e3 + 1);
                  return a3.length > 0 ? c(r5, a3.join(s), n3) : n3(t3, i4, o2, e3);
                }) };
              var i3 = o2.slice(0, e3).join(s);
              throw new Error("Object at wildcard (".concat(i3, ") is not an array"));
            }
            t3 = n3(t3, r4, o2, e3);
          }, u2 = 0; u2 < i2; u2++) {
            var f2 = a2(u2);
            if ("object" === e2(f2))
              return f2.v;
          }
          return t3;
        }
        function f(t3, e3) {
          return t3.length === e3 + 1;
        }
        t2.exports = { set: function(t3, r3, n3) {
          if ("object" != e2(t3) || null === t3)
            return t3;
          if (void 0 === r3)
            return t3;
          if ("number" == typeof r3)
            return t3[r3] = n3, t3[r3];
          try {
            return c(t3, r3, function(t4, e3, r4, o2) {
              if (t4 === Reflect.getPrototypeOf({}))
                throw new u("Attempting to mutate Object.prototype");
              if (!t4[e3]) {
                var i2 = Number.isInteger(Number(r4[o2 + 1])), a2 = "+" === r4[o2 + 1];
                t4[e3] = i2 || a2 ? [] : {};
              }
              return f(r4, o2) && (t4[e3] = n3), t4[e3];
            });
          } catch (e3) {
            if (e3 instanceof u)
              throw e3;
            return t3;
          }
        }, get: function(t3, r3) {
          if ("object" != e2(t3) || null === t3)
            return t3;
          if (void 0 === r3)
            return t3;
          if ("number" == typeof r3)
            return t3[r3];
          try {
            return c(t3, r3, function(t4, e3) {
              return t4[e3];
            });
          } catch (e3) {
            return t3;
          }
        }, has: function(t3, r3) {
          var n3 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if ("object" != e2(t3) || null === t3)
            return false;
          if (void 0 === r3)
            return false;
          if ("number" == typeof r3)
            return r3 in t3;
          try {
            var o2 = false;
            return c(t3, r3, function(t4, e3, r4, i2) {
              if (!f(r4, i2))
                return t4 && t4[e3];
              o2 = n3.own ? t4.hasOwnProperty(e3) : e3 in t4;
            }), o2;
          } catch (t4) {
            return false;
          }
        }, hasOwn: function(t3, e3, r3) {
          return this.has(t3, e3, r3 || { own: true });
        }, isIn: function(t3, r3, n3) {
          var o2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
          if ("object" != e2(t3) || null === t3)
            return false;
          if (void 0 === r3)
            return false;
          try {
            var i2 = false, a2 = false;
            return c(t3, r3, function(t4, r4, o3, s2) {
              return i2 = i2 || t4 === n3 || !!t4 && t4[r4] === n3, a2 = f(o3, s2) && "object" === e2(t4) && r4 in t4, t4 && t4[r4];
            }), o2.validPath ? i2 && a2 : i2;
          } catch (t4) {
            return false;
          }
        }, ObjectPrototypeMutationError: u };
      }, 1441: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(6930), i = function(t3) {
          return "string" == typeof t3;
        };
        function a(t3, e3) {
          for (var r3 = [], n3 = 0; n3 < t3.length; n3++) {
            var o2 = t3[n3];
            o2 && "." !== o2 && (".." === o2 ? r3.length && ".." !== r3[r3.length - 1] ? r3.pop() : e3 && r3.push("..") : r3.push(o2));
          }
          return r3;
        }
        var s = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/, u = {};
        function c(t3) {
          return s.exec(t3).slice(1);
        }
        u.resolve = function() {
          for (var t3 = "", e3 = false, r3 = arguments.length - 1; r3 >= -1 && !e3; r3--) {
            var n3 = r3 >= 0 ? arguments[r3] : process.cwd();
            if (!i(n3))
              throw new TypeError("Arguments to path.resolve must be strings");
            n3 && (t3 = n3 + "/" + t3, e3 = "/" === n3.charAt(0));
          }
          return (e3 ? "/" : "") + (t3 = a(t3.split("/"), !e3).join("/")) || ".";
        }, u.normalize = function(t3) {
          var e3 = u.isAbsolute(t3), r3 = "/" === t3.substr(-1);
          return (t3 = a(t3.split("/"), !e3).join("/")) || e3 || (t3 = "."), t3 && r3 && (t3 += "/"), (e3 ? "/" : "") + t3;
        }, u.isAbsolute = function(t3) {
          return "/" === t3.charAt(0);
        }, u.join = function() {
          for (var t3 = "", e3 = 0; e3 < arguments.length; e3++) {
            var r3 = arguments[e3];
            if (!i(r3))
              throw new TypeError("Arguments to path.join must be strings");
            r3 && (t3 += t3 ? "/" + r3 : r3);
          }
          return u.normalize(t3);
        }, u.relative = function(t3, e3) {
          function r3(t4) {
            for (var e4 = 0; e4 < t4.length && "" === t4[e4]; e4++)
              ;
            for (var r4 = t4.length - 1; r4 >= 0 && "" === t4[r4]; r4--)
              ;
            return e4 > r4 ? [] : t4.slice(e4, r4 + 1);
          }
          t3 = u.resolve(t3).substr(1), e3 = u.resolve(e3).substr(1);
          for (var n3 = r3(t3.split("/")), o2 = r3(e3.split("/")), i2 = Math.min(n3.length, o2.length), a2 = i2, s2 = 0; s2 < i2; s2++)
            if (n3[s2] !== o2[s2]) {
              a2 = s2;
              break;
            }
          var c2 = [];
          for (s2 = a2; s2 < n3.length; s2++)
            c2.push("..");
          return (c2 = c2.concat(o2.slice(a2))).join("/");
        }, u._makeLong = function(t3) {
          return t3;
        }, u.dirname = function(t3) {
          var e3 = c(t3), r3 = e3[0], n3 = e3[1];
          return r3 || n3 ? (n3 && (n3 = n3.substr(0, n3.length - 1)), r3 + n3) : ".";
        }, u.basename = function(t3, e3) {
          var r3 = c(t3)[2];
          return e3 && r3.substr(-1 * e3.length) === e3 && (r3 = r3.substr(0, r3.length - e3.length)), r3;
        }, u.extname = function(t3) {
          return c(t3)[3];
        }, u.format = function(t3) {
          if (!o.isObject(t3))
            throw new TypeError("Parameter 'pathObject' must be an object, not " + n2(t3));
          var e3 = t3.root || "";
          if (!i(e3))
            throw new TypeError("'pathObject.root' must be a string or undefined, not " + n2(t3.root));
          return (t3.dir ? t3.dir + u.sep : "") + (t3.base || "");
        }, u.parse = function(t3) {
          if (!i(t3))
            throw new TypeError("Parameter 'pathString' must be a string, not " + n2(t3));
          var e3 = c(t3);
          if (!e3 || 4 !== e3.length)
            throw new TypeError("Invalid path '" + t3 + "'");
          return e3[1] = e3[1] || "", e3[2] = e3[2] || "", e3[3] = e3[3] || "", { root: e3[0], dir: e3[0] + e3[1].slice(0, e3[1].length - 1), base: e3[2], ext: e3[3], name: e3[2].slice(0, e3[2].length - e3[3].length) };
        }, u.sep = "/", u.delimiter = ":", t2.exports = u;
      }, 1361: (t2, e2) => {
        "use strict";
        var r2 = Object.prototype.hasOwnProperty;
        function n2(t3) {
          try {
            return decodeURIComponent(t3.replace(/\+/g, " "));
          } catch (t4) {
            return null;
          }
        }
        function o(t3) {
          try {
            return encodeURIComponent(t3);
          } catch (t4) {
            return null;
          }
        }
        e2.stringify = function(t3, e3) {
          e3 = e3 || "";
          var n3, i, a = [];
          for (i in "string" != typeof e3 && (e3 = "?"), t3)
            if (r2.call(t3, i)) {
              if ((n3 = t3[i]) || null != n3 && !isNaN(n3) || (n3 = ""), i = o(i), n3 = o(n3), null === i || null === n3)
                continue;
              a.push(i + "=" + n3);
            }
          return a.length ? e3 + a.join("&") : "";
        }, e2.parse = function(t3) {
          for (var e3, r3 = /([^=?#&]+)=?([^&]*)/g, o2 = {}; e3 = r3.exec(t3); ) {
            var i = n2(e3[1]), a = n2(e3[2]);
            null === i || null === a || i in o2 || (o2[i] = a);
          }
          return o2;
        };
      }, 4095: (t2) => {
        "use strict";
        t2.exports = function(t3, e2) {
          if (e2 = e2.split(":")[0], !(t3 = +t3))
            return false;
          switch (e2) {
            case "http":
            case "ws":
              return 80 !== t3;
            case "https":
            case "wss":
              return 443 !== t3;
            case "ftp":
              return 21 !== t3;
            case "gopher":
              return 70 !== t3;
            case "file":
              return false;
          }
          return 0 !== t3;
        };
      }, 5512: (t2) => {
        var e2 = /^[-+]?0x[a-fA-F0-9]+$/, r2 = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
        !Number.parseInt && window.parseInt && (Number.parseInt = window.parseInt), !Number.parseFloat && window.parseFloat && (Number.parseFloat = window.parseFloat);
        var n2 = { hex: true, leadingZeros: true, decimalPoint: ".", eNotation: true };
        function o(t3) {
          return t3 && -1 !== t3.indexOf(".") ? ("." === (t3 = t3.replace(/0+$/, "")) ? t3 = "0" : "." === t3[0] ? t3 = "0" + t3 : "." === t3[t3.length - 1] && (t3 = t3.substr(0, t3.length - 1)), t3) : t3;
        }
        t2.exports = function(t3) {
          var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if (i = Object.assign({}, n2, i), !t3 || "string" != typeof t3)
            return t3;
          var a = t3.trim();
          if (void 0 !== i.skipLike && i.skipLike.test(a))
            return t3;
          if (i.hex && e2.test(a))
            return Number.parseInt(a, 16);
          var s = r2.exec(a);
          if (s) {
            var u = s[1], c = s[2], f = o(s[3]), l = s[4] || s[6];
            if (!i.leadingZeros && c.length > 0 && u && "." !== a[2])
              return t3;
            if (!i.leadingZeros && c.length > 0 && !u && "." !== a[1])
              return t3;
            var p = Number(a), h = "" + p;
            return -1 !== h.search(/[eE]/) || l ? i.eNotation ? p : t3 : -1 !== a.indexOf(".") ? "0" === h && "" === f || h === f || u && h === "-" + f ? p : t3 : c ? f === h || u + f === h ? p : t3 : a === h || a === u + h ? p : t3;
          }
          return t3;
        };
      }, 5842: function(t2, e2, r2) {
        var n2, o, i;
        function a(t3) {
          return a = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, a(t3);
        }
        i = function() {
          function t3(t4) {
            var e3 = [];
            if (0 === t4.length)
              return "";
            if ("string" != typeof t4[0])
              throw new TypeError("Url must be a string. Received " + t4[0]);
            if (t4[0].match(/^[^/:]+:\/*$/) && t4.length > 1) {
              var r3 = t4.shift();
              t4[0] = r3 + t4[0];
            }
            t4[0].match(/^file:\/\/\//) ? t4[0] = t4[0].replace(/^([^/:]+):\/*/, "$1:///") : t4[0] = t4[0].replace(/^([^/:]+):\/*/, "$1://");
            for (var n3 = 0; n3 < t4.length; n3++) {
              var o2 = t4[n3];
              if ("string" != typeof o2)
                throw new TypeError("Url must be a string. Received " + o2);
              "" !== o2 && (n3 > 0 && (o2 = o2.replace(/^[\/]+/, "")), o2 = n3 < t4.length - 1 ? o2.replace(/[\/]+$/, "") : o2.replace(/[\/]+$/, "/"), e3.push(o2));
            }
            var i2 = e3.join("/"), a2 = (i2 = i2.replace(/\/(\?|&|#[^!])/g, "$1")).split("?");
            return a2.shift() + (a2.length > 0 ? "?" : "") + a2.join("&");
          }
          return function() {
            return t3("object" === a(arguments[0]) ? arguments[0] : [].slice.call(arguments));
          };
        }, t2.exports ? t2.exports = i() : void 0 === (o = "function" == typeof (n2 = i) ? n2.call(e2, r2, e2, t2) : n2) || (t2.exports = o);
      }, 1095: (t2, e2, r2) => {
        "use strict";
        function n2(t3) {
          return n2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, n2(t3);
        }
        var o = r2(4095), i = r2(1361), a = /^[\x00-\x20\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff]+/, s = /[\n\r\t]/g, u = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//, c = /:\d+$/, f = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\\/]+)?([\S\s]*)/i, l = /^[a-zA-Z]:/;
        function p(t3) {
          return (t3 || "").toString().replace(a, "");
        }
        var h = [["#", "hash"], ["?", "query"], function(t3, e3) {
          return g(e3.protocol) ? t3.replace(/\\/g, "/") : t3;
        }, ["/", "pathname"], ["@", "auth", 1], [NaN, "host", void 0, 1, 1], [/:(\d*)$/, "port", void 0, 1], [NaN, "hostname", void 0, 1, 1]], d = { hash: 1, query: 1 };
        function y(t3) {
          var e3, r3 = ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {}).location || {}, o2 = {}, i2 = n2(t3 = t3 || r3);
          if ("blob:" === t3.protocol)
            o2 = new v(unescape(t3.pathname), {});
          else if ("string" === i2)
            for (e3 in o2 = new v(t3, {}), d)
              delete o2[e3];
          else if ("object" === i2) {
            for (e3 in t3)
              e3 in d || (o2[e3] = t3[e3]);
            void 0 === o2.slashes && (o2.slashes = u.test(t3.href));
          }
          return o2;
        }
        function g(t3) {
          return "file:" === t3 || "ftp:" === t3 || "http:" === t3 || "https:" === t3 || "ws:" === t3 || "wss:" === t3;
        }
        function m(t3, e3) {
          t3 = (t3 = p(t3)).replace(s, ""), e3 = e3 || {};
          var r3, n3 = f.exec(t3), o2 = n3[1] ? n3[1].toLowerCase() : "", i2 = !!n3[2], a2 = !!n3[3], u2 = 0;
          return i2 ? a2 ? (r3 = n3[2] + n3[3] + n3[4], u2 = n3[2].length + n3[3].length) : (r3 = n3[2] + n3[4], u2 = n3[2].length) : a2 ? (r3 = n3[3] + n3[4], u2 = n3[3].length) : r3 = n3[4], "file:" === o2 ? u2 >= 2 && (r3 = r3.slice(2)) : g(o2) ? r3 = n3[4] : o2 ? i2 && (r3 = r3.slice(2)) : u2 >= 2 && g(e3.protocol) && (r3 = n3[4]), { protocol: o2, slashes: i2 || g(o2), slashesCount: u2, rest: r3 };
        }
        function v(t3, e3, r3) {
          if (t3 = (t3 = p(t3)).replace(s, ""), !(this instanceof v))
            return new v(t3, e3, r3);
          var a2, u2, c2, f2, d2, b, w = h.slice(), O = n2(e3), A = this, j = 0;
          for ("object" !== O && "string" !== O && (r3 = e3, e3 = null), r3 && "function" != typeof r3 && (r3 = i.parse), a2 = !(u2 = m(t3 || "", e3 = y(e3))).protocol && !u2.slashes, A.slashes = u2.slashes || a2 && e3.slashes, A.protocol = u2.protocol || e3.protocol || "", t3 = u2.rest, ("file:" === u2.protocol && (2 !== u2.slashesCount || l.test(t3)) || !u2.slashes && (u2.protocol || u2.slashesCount < 2 || !g(A.protocol))) && (w[3] = [/(.*)/, "pathname"]); j < w.length; j++)
            "function" != typeof (f2 = w[j]) ? (c2 = f2[0], b = f2[1], c2 != c2 ? A[b] = t3 : "string" == typeof c2 ? ~(d2 = "@" === c2 ? t3.lastIndexOf(c2) : t3.indexOf(c2)) && ("number" == typeof f2[2] ? (A[b] = t3.slice(0, d2), t3 = t3.slice(d2 + f2[2])) : (A[b] = t3.slice(d2), t3 = t3.slice(0, d2))) : (d2 = c2.exec(t3)) && (A[b] = d2[1], t3 = t3.slice(0, d2.index)), A[b] = A[b] || a2 && f2[3] && e3[b] || "", f2[4] && (A[b] = A[b].toLowerCase())) : t3 = f2(t3, A);
          r3 && (A.query = r3(A.query)), a2 && e3.slashes && "/" !== A.pathname.charAt(0) && ("" !== A.pathname || "" !== e3.pathname) && (A.pathname = function(t4, e4) {
            if ("" === t4)
              return e4;
            for (var r4 = (e4 || "/").split("/").slice(0, -1).concat(t4.split("/")), n3 = r4.length, o2 = r4[n3 - 1], i2 = false, a3 = 0; n3--; )
              "." === r4[n3] ? r4.splice(n3, 1) : ".." === r4[n3] ? (r4.splice(n3, 1), a3++) : a3 && (0 === n3 && (i2 = true), r4.splice(n3, 1), a3--);
            return i2 && r4.unshift(""), "." !== o2 && ".." !== o2 || r4.push(""), r4.join("/");
          }(A.pathname, e3.pathname)), "/" !== A.pathname.charAt(0) && g(A.protocol) && (A.pathname = "/" + A.pathname), o(A.port, A.protocol) || (A.host = A.hostname, A.port = ""), A.username = A.password = "", A.auth && (~(d2 = A.auth.indexOf(":")) ? (A.username = A.auth.slice(0, d2), A.username = encodeURIComponent(decodeURIComponent(A.username)), A.password = A.auth.slice(d2 + 1), A.password = encodeURIComponent(decodeURIComponent(A.password))) : A.username = encodeURIComponent(decodeURIComponent(A.auth)), A.auth = A.password ? A.username + ":" + A.password : A.username), A.origin = "file:" !== A.protocol && g(A.protocol) && A.host ? A.protocol + "//" + A.host : "null", A.href = A.toString();
        }
        v.prototype = { set: function(t3, e3, r3) {
          var n3 = this;
          switch (t3) {
            case "query":
              "string" == typeof e3 && e3.length && (e3 = (r3 || i.parse)(e3)), n3[t3] = e3;
              break;
            case "port":
              n3[t3] = e3, o(e3, n3.protocol) ? e3 && (n3.host = n3.hostname + ":" + e3) : (n3.host = n3.hostname, n3[t3] = "");
              break;
            case "hostname":
              n3[t3] = e3, n3.port && (e3 += ":" + n3.port), n3.host = e3;
              break;
            case "host":
              n3[t3] = e3, c.test(e3) ? (e3 = e3.split(":"), n3.port = e3.pop(), n3.hostname = e3.join(":")) : (n3.hostname = e3, n3.port = "");
              break;
            case "protocol":
              n3.protocol = e3.toLowerCase(), n3.slashes = !r3;
              break;
            case "pathname":
            case "hash":
              if (e3) {
                var a2 = "pathname" === t3 ? "/" : "#";
                n3[t3] = e3.charAt(0) !== a2 ? a2 + e3 : e3;
              } else
                n3[t3] = e3;
              break;
            case "username":
            case "password":
              n3[t3] = encodeURIComponent(e3);
              break;
            case "auth":
              var s2 = e3.indexOf(":");
              ~s2 ? (n3.username = e3.slice(0, s2), n3.username = encodeURIComponent(decodeURIComponent(n3.username)), n3.password = e3.slice(s2 + 1), n3.password = encodeURIComponent(decodeURIComponent(n3.password))) : n3.username = encodeURIComponent(decodeURIComponent(e3));
          }
          for (var u2 = 0; u2 < h.length; u2++) {
            var f2 = h[u2];
            f2[4] && (n3[f2[1]] = n3[f2[1]].toLowerCase());
          }
          return n3.auth = n3.password ? n3.username + ":" + n3.password : n3.username, n3.origin = "file:" !== n3.protocol && g(n3.protocol) && n3.host ? n3.protocol + "//" + n3.host : "null", n3.href = n3.toString(), n3;
        }, toString: function(t3) {
          t3 && "function" == typeof t3 || (t3 = i.stringify);
          var e3, r3 = this, o2 = r3.host, a2 = r3.protocol;
          a2 && ":" !== a2.charAt(a2.length - 1) && (a2 += ":");
          var s2 = a2 + (r3.protocol && r3.slashes || g(r3.protocol) ? "//" : "");
          return r3.username ? (s2 += r3.username, r3.password && (s2 += ":" + r3.password), s2 += "@") : r3.password ? (s2 += ":" + r3.password, s2 += "@") : "file:" !== r3.protocol && g(r3.protocol) && !o2 && "/" !== r3.pathname && (s2 += "@"), (":" === o2[o2.length - 1] || c.test(r3.hostname) && !r3.port) && (o2 += ":"), s2 += o2 + r3.pathname, (e3 = "object" === n2(r3.query) ? t3(r3.query) : r3.query) && (s2 += "?" !== e3.charAt(0) ? "?" + e3 : e3), r3.hash && (s2 += r3.hash), s2;
        } }, v.extractProtocol = m, v.location = y, v.trimLeft = p, v.qs = i, t2.exports = v;
      }, 6930: () => {
      }, 9227: () => {
      } }, e = {};
      function r(n2) {
        var o = e[n2];
        if (void 0 !== o)
          return o.exports;
        var i = e[n2] = { id: n2, loaded: false, exports: {} };
        return t[n2].call(i.exports, i, i.exports, r), i.loaded = true, i.exports;
      }
      r.amdO = {}, r.n = (t2) => {
        var e2 = t2 && t2.__esModule ? () => t2.default : () => t2;
        return r.d(e2, { a: e2 }), e2;
      }, r.d = (t2, e2) => {
        for (var n2 in e2)
          r.o(e2, n2) && !r.o(t2, n2) && Object.defineProperty(t2, n2, { enumerable: true, get: e2[n2] });
      }, r.o = (t2, e2) => Object.prototype.hasOwnProperty.call(t2, e2), r.r = (t2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t2, "__esModule", { value: true });
      }, r.nmd = (t2) => (t2.paths = [], t2.children || (t2.children = []), t2);
      var n = {};
      return (() => {
        "use strict";
        r.r(n), r.d(n, { AuthType: () => O, ErrorCode: () => A, createClient: () => Ae, getPatcher: () => R, parseStat: () => at, parseXML: () => ot });
        var t2 = r(1095), e2 = r.n(t2), o = r(5842), i = r.n(o), a = r(1441), s = r.n(a), u = "__PATH_SEPARATOR_POSIX__", c = "__PATH_SEPARATOR_WINDOWS__";
        function f(t3) {
          var e3 = t3.replace(/\//g, u).replace(/\\\\/g, c);
          return encodeURIComponent(e3).split(c).join("\\\\").split(u).join("/");
        }
        function l(t3) {
          if (!t3 || "/" === t3)
            return [];
          var e3 = t3, r2 = [];
          do {
            r2.push(e3), e3 = (0, a.dirname)(e3);
          } while (e3 && "/" !== e3);
          return r2;
        }
        function p(t3) {
          var e3 = t3;
          return "/" !== e3[0] && (e3 = "/" + e3), /^.+\/$/.test(e3) && (e3 = e3.substr(0, e3.length - 1)), e3;
        }
        function h(t3) {
          var r2 = new (e2())(t3).pathname;
          return r2.length <= 0 && (r2 = "/"), p(r2);
        }
        function d() {
          for (var t3 = arguments.length, e3 = new Array(t3), r2 = 0; r2 < t3; r2++)
            e3[r2] = arguments[r2];
          return i()(e3.reduce(function(t4, e4, r3) {
            return (0 === r3 || "/" !== e4 || "/" === e4 && "/" !== t4[t4.length - 1]) && t4.push(e4), t4;
          }, []));
        }
        function y(t3) {
          return t3.replace(/^https?:\/\/[^\/]+/, "");
        }
        var g = r(9104), m = r(9243), v = r.n(m), b = "abcdef0123456789";
        function w(t3, e3) {
          var r2 = t3.url.replace("//", ""), n2 = -1 == r2.indexOf("/") ? "/" : r2.slice(r2.indexOf("/")), o2 = t3.method ? t3.method.toUpperCase() : "GET", i2 = !!/(^|,)\s*auth\s*($|,)/.test(e3.qop) && "auth", a2 = "00000000".concat(e3.nc).slice(-8), s2 = function(t4, e4, r3, n3, o3, i3) {
            var a3 = v()("".concat(e4, ":").concat(r3, ":").concat(n3));
            return t4 && "md5-sess" === t4.toLowerCase() ? v()("".concat(a3, ":").concat(o3, ":").concat(i3)) : a3;
          }(e3.algorithm, e3.username, e3.realm, e3.password, e3.nonce, e3.cnonce), u2 = v()("".concat(o2, ":").concat(n2)), c2 = i2 ? v()("".concat(s2, ":").concat(e3.nonce, ":").concat(a2, ":").concat(e3.cnonce, ":").concat(i2, ":").concat(u2)) : v()("".concat(s2, ":").concat(e3.nonce, ":").concat(u2)), f2 = { username: e3.username, realm: e3.realm, nonce: e3.nonce, uri: n2, qop: i2, response: c2, nc: a2, cnonce: e3.cnonce, algorithm: e3.algorithm, opaque: e3.opaque }, l2 = [];
          for (var p2 in f2)
            f2[p2] && ("qop" === p2 || "nc" === p2 || "algorithm" === p2 ? l2.push("".concat(p2, "=").concat(f2[p2])) : l2.push("".concat(p2, '="').concat(f2[p2], '"')));
          return "Digest ".concat(l2.join(", "));
        }
        var O, A, j = r(9146);
        function x(t3) {
          var e3 = document.createElement("textarea");
          return e3.innerHTML = t3, e3.value;
        }
        function E(t3) {
          return (0, j.decode)(t3);
        }
        function P(t3, e3, r2, n2) {
          switch (t3.authType) {
            case O.Digest:
              t3.digest = function(t4, e4) {
                return { username: t4, password: e4, nc: 0, algorithm: "md5", hasDigestAuth: false };
              }(e3, r2);
              break;
            case O.None:
              break;
            case O.Password:
              t3.headers.Authorization = function(t4, e4) {
                var r3, n3 = (r3 = "".concat(t4, ":").concat(e4), (0, j.encode)(r3));
                return "Basic ".concat(n3);
              }(e3, r2);
              break;
            case O.Token:
              t3.headers.Authorization = "".concat((o2 = n2).token_type, " ").concat(o2.access_token);
              break;
            default:
              throw new g.Layerr({ info: { code: A.InvalidAuthType } }, "Invalid auth type: ".concat(t3.authType));
          }
          var o2;
        }
        !function(t3) {
          t3.Digest = "digest", t3.None = "none", t3.Password = "password", t3.Token = "token";
        }(O || (O = {})), function(t3) {
          t3.DataTypeNoLength = "data-type-no-length", t3.InvalidAuthType = "invalid-auth-type", t3.InvalidOutputFormat = "invalid-output-format", t3.LinkUnsupportedAuthType = "link-unsupported-auth";
        }(A || (A = {}));
        var S = r(5056), N = r.n(S), T = r(9361), C = null;
        function R() {
          return C || (C = new T.HotPatcher()), C;
        }
        function _(t3) {
          return function(t4) {
            if (Array.isArray(t4))
              return k(t4);
          }(t3) || function(t4) {
            if ("undefined" != typeof Symbol && null != t4[Symbol.iterator] || null != t4["@@iterator"])
              return Array.from(t4);
          }(t3) || function(t4, e3) {
            if (t4) {
              if ("string" == typeof t4)
                return k(t4, e3);
              var r2 = Object.prototype.toString.call(t4).slice(8, -1);
              return "Object" === r2 && t4.constructor && (r2 = t4.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(t4) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? k(t4, e3) : void 0;
            }
          }(t3) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function k(t3, e3) {
          (null == e3 || e3 > t3.length) && (e3 = t3.length);
          for (var r2 = 0, n2 = new Array(e3); r2 < e3; r2++)
            n2[r2] = t3[r2];
          return n2;
        }
        function I(t3) {
          return I = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, I(t3);
        }
        function D(t3) {
          return function(t4) {
            if ("object" !== I(t4) || null === t4 || "[object Object]" != Object.prototype.toString.call(t4))
              return false;
            if (null === Object.getPrototypeOf(t4))
              return true;
            for (var e3 = t4; null !== Object.getPrototypeOf(e3); )
              e3 = Object.getPrototypeOf(e3);
            return Object.getPrototypeOf(t4) === e3;
          }(t3) ? Object.assign({}, t3) : Object.setPrototypeOf(Object.assign({}, t3), Object.getPrototypeOf(t3));
        }
        function L() {
          for (var t3 = arguments.length, e3 = new Array(t3), r2 = 0; r2 < t3; r2++)
            e3[r2] = arguments[r2];
          for (var n2 = null, o2 = [].concat(e3); o2.length > 0; ) {
            var i2 = o2.shift();
            n2 = n2 ? F(n2, i2) : D(i2);
          }
          return n2;
        }
        function F(t3, e3) {
          var r2 = D(t3);
          return Object.keys(e3).forEach(function(t4) {
            r2.hasOwnProperty(t4) ? Array.isArray(e3[t4]) ? r2[t4] = Array.isArray(r2[t4]) ? [].concat(_(r2[t4]), _(e3[t4])) : _(e3[t4]) : "object" === I(e3[t4]) && e3[t4] ? r2[t4] = "object" === I(r2[t4]) && r2[t4] ? F(r2[t4], e3[t4]) : D(e3[t4]) : r2[t4] = e3[t4] : r2[t4] = e3[t4];
          }), r2;
        }
        function U(t3) {
          return R().patchInline("request", function(t4) {
            return N()(t4);
          }, t3);
        }
        function M(t3, e3, r2) {
          var n2 = D(t3);
          return n2.headers = function() {
            for (var t4 = arguments.length, e4 = new Array(t4), r3 = 0; r3 < t4; r3++)
              e4[r3] = arguments[r3];
            if (0 === e4.length)
              return {};
            var n3 = {};
            return e4.reduce(function(t5, e5) {
              return Object.keys(e5).forEach(function(r4) {
                var o2 = r4.toLowerCase();
                n3.hasOwnProperty(o2) ? t5[n3[o2]] = e5[r4] : (n3[o2] = r4, t5[r4] = e5[r4]);
              }), t5;
            }, {});
          }(e3.headers, n2.headers || {}, r2.headers || {}), void 0 !== r2.data && (n2.data = r2.data), r2.signal && (n2.signal = r2.signal), e3.httpAgent && (n2.httpAgent = e3.httpAgent), e3.httpsAgent && (n2.httpsAgent = e3.httpsAgent), e3.digest && (n2._digest = e3.digest), "boolean" == typeof e3.withCredentials && (n2.withCredentials = e3.withCredentials), e3.maxContentLength && (n2.maxContentLength = e3.maxContentLength), e3.maxBodyLength && (n2.maxBodyLength = e3.maxBodyLength), r2.hasOwnProperty("onUploadProgress") && (n2.onUploadProgress = r2.onUploadProgress), r2.hasOwnProperty("onDownloadProgress") && (n2.onDownloadProgress = r2.onDownloadProgress), n2.validateStatus = function() {
            return true;
          }, n2;
        }
        function B(t3) {
          if (!t3._digest)
            return U(t3);
          var e3 = t3._digest;
          return delete t3._digest, e3.hasDigestAuth && (t3 = L(t3, { headers: { Authorization: w(t3, e3) } })), U(t3).then(function(r2) {
            if (401 == r2.status) {
              if (e3.hasDigestAuth = function(t4, e4) {
                var r3 = t4.headers["www-authenticate"] || "";
                if ("digest" !== r3.split(/\s/)[0].toLowerCase())
                  return false;
                for (var n2 = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi; ; ) {
                  var o2 = n2.exec(r3);
                  if (!o2)
                    break;
                  e4[o2[1]] = o2[2] || o2[3];
                }
                return e4.nc += 1, e4.cnonce = function() {
                  for (var t5 = "", e5 = 0; e5 < 32; ++e5)
                    t5 = "".concat(t5).concat(b[Math.floor(Math.random() * b.length)]);
                  return t5;
                }(), true;
              }(r2, e3), e3.hasDigestAuth)
                return U(t3 = L(t3, { headers: { Authorization: w(t3, e3) } })).then(function(t4) {
                  return 401 == t4.status ? e3.hasDigestAuth = false : e3.nc++, t4;
                });
            } else
              e3.nc++;
            return r2;
          });
        }
        var V = r(3e3), q = r.n(V);
        function $(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", r2 = new Error("".concat(e3, "Invalid response: ").concat(t3.status, " ").concat(t3.statusText));
          return r2.status = t3.status, r2.response = t3, r2;
        }
        function z(t3, e3) {
          var r2 = e3.status;
          if (401 === r2 && t3.digest)
            return e3;
          if (r2 >= 400)
            throw $(e3);
          return e3;
        }
        function H(t3, e3) {
          return t3.filter(function(t4) {
            return q()(t4.filename, e3, { matchBase: true });
          });
        }
        function J(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return r2 ? { data: e3, headers: t3.headers || {}, status: t3.status, statusText: t3.statusText } : e3;
        }
        function W(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var Z, X, K = (Z = function(t3, e3, r2) {
          var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o2 = M({ url: d(t3.remoteURL, f(e3)), method: "COPY", headers: { Destination: d(t3.remoteURL, f(r2)) } }, t3, n2);
          return W(B(o2), function(e4) {
            z(t3, e4);
          });
        }, function() {
          for (var t3 = [], e3 = 0; e3 < arguments.length; e3++)
            t3[e3] = arguments[e3];
          try {
            return Promise.resolve(Z.apply(this, t3));
          } catch (t4) {
            return Promise.reject(t4);
          }
        }), G = r(8819), Q = r(2421), Y = r.n(Q);
        function tt(t3, e3) {
          return function(t4) {
            if (Array.isArray(t4))
              return t4;
          }(t3) || function(t4, e4) {
            var r2 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
            if (null != r2) {
              var n2, o2, i2 = [], a2 = true, s2 = false;
              try {
                for (r2 = r2.call(t4); !(a2 = (n2 = r2.next()).done) && (i2.push(n2.value), !e4 || i2.length !== e4); a2 = true)
                  ;
              } catch (t5) {
                s2 = true, o2 = t5;
              } finally {
                try {
                  a2 || null == r2.return || r2.return();
                } finally {
                  if (s2)
                    throw o2;
                }
              }
              return i2;
            }
          }(t3, e3) || function(t4, e4) {
            if (t4) {
              if ("string" == typeof t4)
                return et(t4, e4);
              var r2 = Object.prototype.toString.call(t4).slice(8, -1);
              return "Object" === r2 && t4.constructor && (r2 = t4.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(t4) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? et(t4, e4) : void 0;
            }
          }(t3, e3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }();
        }
        function et(t3, e3) {
          (null == e3 || e3 > t3.length) && (e3 = t3.length);
          for (var r2 = 0, n2 = new Array(e3); r2 < e3; r2++)
            n2[r2] = t3[r2];
          return n2;
        }
        function rt(t3) {
          return rt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, rt(t3);
        }
        function nt(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : X.Original, n2 = Y().get(t3, e3);
          return "array" === r2 && false === Array.isArray(n2) ? [n2] : "object" === r2 && Array.isArray(n2) ? n2[0] : n2;
        }
        function ot(t3) {
          return new Promise(function(e3) {
            e3(function(t4) {
              var e4 = t4.multistatus;
              if ("" === e4)
                return { multistatus: { response: [] } };
              if (!e4)
                throw new Error("Invalid response: No root multistatus found");
              var r2 = { multistatus: Array.isArray(e4) ? e4[0] : e4 };
              return Y().set(r2, "multistatus.response", nt(r2, "multistatus.response", X.Array)), Y().set(r2, "multistatus.response", Y().get(r2, "multistatus.response").map(function(t5) {
                return function(t6) {
                  var e5 = Object.assign({}, t6);
                  return Y().set(e5, "propstat", nt(e5, "propstat", X.Object)), Y().set(e5, "propstat.prop", nt(e5, "propstat.prop", X.Object)), e5;
                }(t5);
              })), r2;
            }(G.parse(t3, { arrayMode: false, ignoreNameSpace: true })));
          });
        }
        function it(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n2 = t3.getlastmodified, o2 = void 0 === n2 ? null : n2, i2 = t3.getcontentlength, a2 = void 0 === i2 ? "0" : i2, u2 = t3.resourcetype, c2 = void 0 === u2 ? null : u2, f2 = t3.getcontenttype, l2 = void 0 === f2 ? null : f2, p2 = t3.getetag, h2 = void 0 === p2 ? null : p2, d2 = c2 && "object" === rt(c2) && void 0 !== c2.collection ? "directory" : "file", y2 = x(e3), g2 = { filename: y2, basename: s().basename(y2), lastmod: o2, size: parseInt(a2, 10), type: d2, etag: "string" == typeof h2 ? h2.replace(/"/g, "") : null };
          return "file" === d2 && (g2.mime = l2 && "string" == typeof l2 ? l2.split(";")[0] : ""), r2 && (g2.props = t3), g2;
        }
        function at(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n2 = null;
          try {
            n2 = t3.multistatus.response[0];
          } catch (t4) {
          }
          if (!n2)
            throw new Error("Failed getting item stat: bad response");
          var o2 = n2, i2 = o2.propstat, a2 = i2.prop, s2 = i2.status, u2 = s2.split(" ", 3), c2 = tt(u2, 3), f2 = (c2[0], c2[1]), l2 = c2[2], h2 = parseInt(f2, 10);
          if (h2 >= 400) {
            var d2 = new Error("Invalid response: ".concat(h2, " ").concat(l2));
            throw d2.status = h2, d2;
          }
          var y2 = p(e3);
          return it(a2, y2, r2);
        }
        function st(t3) {
          switch (t3.toString()) {
            case "-3":
              return "unlimited";
            case "-2":
            case "-1":
              return "unknown";
            default:
              return parseInt(t3, 10);
          }
        }
        function ut(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        !function(t3) {
          t3.Array = "array", t3.Object = "object", t3.Original = "original";
        }(X || (X = {}));
        var ct = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = r2.details, o2 = void 0 !== n2 && n2, i2 = M({ url: d(t3.remoteURL, f(e3)), method: "PROPFIND", headers: { Accept: "text/plain,application/xml", Depth: "0" }, responseType: "text" }, t3, r2);
          return ut(B(i2), function(r3) {
            return z(t3, r3), ut(ot(r3.data), function(t4) {
              var n3 = at(t4, e3, o2);
              return J(r3, n3, o2);
            });
          });
        });
        function ft(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        function lt(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }
        function pt() {
        }
        function ht(t3, e3) {
          if (!e3)
            return t3 && t3.then ? t3.then(pt) : Promise.resolve();
        }
        function dt(t3, e3) {
          try {
            var r2 = t3();
          } catch (t4) {
            return e3(t4);
          }
          return r2 && r2.then ? r2.then(void 0, e3) : r2;
        }
        function yt(t3, e3) {
          var r2 = t3();
          return r2 && r2.then ? r2.then(e3) : e3(r2);
        }
        var gt = "undefined" != typeof Symbol ? Symbol.iterator || (Symbol.iterator = Symbol("Symbol.iterator")) : "@@iterator";
        function mt(t3, e3, r2) {
          if (!t3.s) {
            if (r2 instanceof vt) {
              if (!r2.s)
                return void (r2.o = mt.bind(null, t3, e3));
              1 & e3 && (e3 = r2.s), r2 = r2.v;
            }
            if (r2 && r2.then)
              return void r2.then(mt.bind(null, t3, e3), mt.bind(null, t3, 2));
            t3.s = e3, t3.v = r2;
            var n2 = t3.o;
            n2 && n2(t3);
          }
        }
        var vt = function() {
          function t3() {
          }
          return t3.prototype.then = function(e3, r2) {
            var n2 = new t3(), o2 = this.s;
            if (o2) {
              var i2 = 1 & o2 ? e3 : r2;
              if (i2) {
                try {
                  mt(n2, 1, i2(this.v));
                } catch (t4) {
                  mt(n2, 2, t4);
                }
                return n2;
              }
              return this;
            }
            return this.o = function(t4) {
              try {
                var o3 = t4.v;
                1 & t4.s ? mt(n2, 1, e3 ? e3(o3) : o3) : r2 ? mt(n2, 1, r2(o3)) : mt(n2, 2, o3);
              } catch (t5) {
                mt(n2, 2, t5);
              }
            }, n2;
          }, t3;
        }();
        function bt(t3) {
          return t3 instanceof vt && 1 & t3.s;
        }
        function wt(t3, e3, r2) {
          if ("function" == typeof t3[gt]) {
            let f2 = function(t4) {
              try {
                for (; !((n2 = a2.next()).done || r2 && r2()); )
                  if ((t4 = e3(n2.value)) && t4.then) {
                    if (!bt(t4))
                      return void t4.then(f2, i2 || (i2 = mt.bind(null, o2 = new vt(), 2)));
                    t4 = t4.v;
                  }
                o2 ? mt(o2, 1, t4) : o2 = t4;
              } catch (t5) {
                mt(o2 || (o2 = new vt()), 2, t5);
              }
            };
            var n2, o2, i2, a2 = t3[gt]();
            if (f2(), a2.return) {
              var s2 = function(t4) {
                try {
                  n2.done || a2.return();
                } catch (t5) {
                }
                return t4;
              };
              if (o2 && o2.then)
                return o2.then(s2, function(t4) {
                  throw s2(t4);
                });
              s2();
            }
            return o2;
          }
          if (!("length" in t3))
            throw new TypeError("Object is not iterable");
          for (var u2 = [], c2 = 0; c2 < t3.length; c2++)
            u2.push(t3[c2]);
          return function(t4, e4, r3) {
            var n3, o3, i3 = -1;
            return function a3(s3) {
              try {
                for (; ++i3 < t4.length && (!r3 || !r3()); )
                  if ((s3 = e4(i3)) && s3.then) {
                    if (!bt(s3))
                      return void s3.then(a3, o3 || (o3 = mt.bind(null, n3 = new vt(), 2)));
                    s3 = s3.v;
                  }
                n3 ? mt(n3, 1, s3) : n3 = s3;
              } catch (t5) {
                mt(n3 || (n3 = new vt()), 2, t5);
              }
            }(), n3;
          }(u2, function(t4) {
            return e3(u2[t4]);
          }, r2);
        }
        function Ot(t3, e3) {
          var r2 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(t3);
            e3 && (n2 = n2.filter(function(e4) {
              return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
            })), r2.push.apply(r2, n2);
          }
          return r2;
        }
        function At(t3) {
          for (var e3 = 1; e3 < arguments.length; e3++) {
            var r2 = null != arguments[e3] ? arguments[e3] : {};
            e3 % 2 ? Ot(Object(r2), true).forEach(function(e4) {
              jt(t3, e4, r2[e4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(r2)) : Ot(Object(r2)).forEach(function(e4) {
              Object.defineProperty(t3, e4, Object.getOwnPropertyDescriptor(r2, e4));
            });
          }
          return t3;
        }
        function jt(t3, e3, r2) {
          return e3 in t3 ? Object.defineProperty(t3, e3, { value: r2, enumerable: true, configurable: true, writable: true }) : t3[e3] = r2, t3;
        }
        var xt = lt(function(t3, e3) {
          var r2 = false, n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, o2 = l(p(e3));
          o2.sort(function(t4, e4) {
            return t4.length > e4.length ? 1 : e4.length > t4.length ? -1 : 0;
          });
          var i2 = false;
          return wt(o2, function(r3) {
            return yt(function() {
              if (i2)
                return ht(Et(t3, r3, At(At({}, n2), {}, { recursive: false })));
            }, function() {
              return dt(function() {
                return ft(ct(t3, r3), function(t4) {
                  if ("directory" !== t4.type)
                    throw new Error("Path includes a file: ".concat(e3));
                });
              }, function(e4) {
                var o3 = e4;
                return function() {
                  if (404 === o3.status)
                    return i2 = true, ht(Et(t3, r3, At(At({}, n2), {}, { recursive: false })));
                  throw e4;
                }();
              });
            });
          }, function() {
            return r2;
          });
        }), Et = lt(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (true === r2.recursive)
            return xt(t3, e3, r2);
          var n2 = M({ url: d(t3.remoteURL, Pt(f(e3))), method: "MKCOL" }, t3, r2);
          return ft(B(n2), function(e4) {
            z(t3, e4);
          });
        });
        function Pt(t3) {
          return t3.endsWith("/") ? t3 : t3 + "/";
        }
        var St = r(9227), Nt = r.n(St);
        function Tt(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        function Ct(t3) {
          return Ct = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, Ct(t3);
        }
        var Rt = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = {};
          if ("object" === Ct(r2.range) && "number" == typeof r2.range.start) {
            var o2 = "bytes=".concat(r2.range.start, "-");
            "number" == typeof r2.range.end && (o2 = "".concat(o2).concat(r2.range.end)), n2.Range = o2;
          }
          var i2 = M({ url: d(t3.remoteURL, f(e3)), method: "GET", headers: n2, responseType: "stream" }, t3, r2);
          return Tt(B(i2), function(e4) {
            if (z(t3, e4), n2.Range && 206 !== e4.status) {
              var o3 = new Error("Invalid response code for partial request: ".concat(e4.status));
              throw o3.status = e4.status, o3;
            }
            return r2.callback && setTimeout(function() {
              r2.callback(e4);
            }, 0), e4.data;
          });
        }), _t = function() {
        };
        function kt(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = Nt().PassThrough, o2 = new n2();
          return Rt(t3, e3, r2).then(function(t4) {
            t4.pipe(o2);
          }).catch(function(t4) {
            o2.emit("error", t4);
          }), o2;
        }
        function It(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : _t, o2 = Nt().PassThrough, i2 = new o2(), a2 = {};
          false === r2.overwrite && (a2["If-None-Match"] = "*");
          var s2 = M({ url: d(t3.remoteURL, f(e3)), method: "PUT", headers: a2, data: i2, maxRedirects: 0 }, t3, r2);
          return B(s2).then(function(e4) {
            return z(t3, e4);
          }).then(function(t4) {
            setTimeout(function() {
              n2(t4);
            }, 0);
          }).catch(function(t4) {
            i2.emit("error", t4);
          }), i2;
        }
        var Dt = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3, r2) {
          var n2, o2;
          return r2.url || (r2.url = d(t3.remoteURL, f(e3))), o2 = function(e4) {
            return z(t3, e4), e4;
          }, (n2 = B(M(r2, t3, {}))) && n2.then || (n2 = Promise.resolve(n2)), o2 ? n2.then(o2) : n2;
        });
        function Lt(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var Ft = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = M({ url: d(t3.remoteURL, f(e3)), method: "DELETE" }, t3, r2);
          return Lt(B(n2), function(e4) {
            z(t3, e4);
          });
        });
        function Ut(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        function Mt(t3, e3) {
          try {
            var r2 = t3();
          } catch (t4) {
            return e3(t4);
          }
          return r2 && r2.then ? r2.then(void 0, e3) : r2;
        }
        var Bt = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          return Mt(function() {
            return Ut(ct(t3, e3, r2), function() {
              return true;
            });
          }, function(t4) {
            if (404 === t4.status)
              return false;
            throw t4;
          });
        });
        function Vt(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var qt = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = M({ url: d(t3.remoteURL, f(e3), "/"), method: "PROPFIND", headers: { Accept: "text/plain", Depth: r2.deep ? "infinity" : "1" }, responseType: "text" }, t3, r2);
          return Vt(B(n2), function(n3) {
            return z(t3, n3), Vt(ot(n3.data), function(o2) {
              var i2 = e3.startsWith("/") ? e3 : "/" + e3, a2 = $t(o2, t3.remotePath, i2, r2.details);
              return r2.glob && (a2 = H(a2, r2.glob)), J(n3, a2, r2.details);
            });
          });
        });
        function $t(t3, e3, r2) {
          var n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], o2 = s().join(e3, "/"), i2 = t3.multistatus.response;
          return i2.map(function(t4) {
            var e4 = y(t4.href);
            return it(t4.propstat.prop, "/" === o2 ? decodeURIComponent(p(e4)) : decodeURIComponent(p(s().relative(o2, e4))), n2);
          }).filter(function(t4) {
            return t4.basename && ("file" === t4.type || t4.filename !== r2.replace(/\/$/, ""));
          });
        }
        function zt(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }
        var Ht = zt(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = M({ url: d(t3.remoteURL, f(e3)), method: "GET", responseType: "text", transformResponse: [Xt] }, t3, r2);
          return Jt(B(n2), function(e4) {
            return z(t3, e4), J(e4, e4.data, r2.details);
          });
        });
        function Jt(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var Wt = zt(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = M({ url: d(t3.remoteURL, f(e3)), method: "GET", responseType: "arraybuffer" }, t3, r2);
          return Jt(B(n2), function(e4) {
            return z(t3, e4), J(e4, e4.data, r2.details);
          });
        }), Zt = zt(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = r2.format, o2 = void 0 === n2 ? "binary" : n2;
          if ("binary" !== o2 && "text" !== o2)
            throw new g.Layerr({ info: { code: A.InvalidOutputFormat } }, "Invalid output format: ".concat(o2));
          return "text" === o2 ? Ht(t3, e3, r2) : Wt(t3, e3, r2);
        }), Xt = function(t3) {
          return t3;
        };
        function Kt(t3, e3) {
          var r2 = d(t3.remoteURL, f(e3)), n2 = /^https:/i.test(r2) ? "https" : "http";
          switch (t3.authType) {
            case O.None:
              break;
            case O.Password:
              var o2 = E(t3.headers.Authorization.replace(/^Basic /i, "").trim());
              r2 = r2.replace(/^https?:\/\//, "".concat(n2, "://").concat(o2, "@"));
              break;
            default:
              throw new g.Layerr({ info: { code: A.LinkUnsupportedAuthType } }, "Unsupported auth type for file link: ".concat(t3.authType));
          }
          return r2;
        }
        function Gt(t3) {
          return Gt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t4) {
            return typeof t4;
          } : function(t4) {
            return t4 && "function" == typeof Symbol && t4.constructor === Symbol && t4 !== Symbol.prototype ? "symbol" : typeof t4;
          }, Gt(t3);
        }
        function Qt(t3, e3) {
          var r2 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var n2 = Object.getOwnPropertySymbols(t3);
            e3 && (n2 = n2.filter(function(e4) {
              return Object.getOwnPropertyDescriptor(t3, e4).enumerable;
            })), r2.push.apply(r2, n2);
          }
          return r2;
        }
        function Yt(t3, e3, r2) {
          return e3 in t3 ? Object.defineProperty(t3, e3, { value: r2, enumerable: true, configurable: true, writable: true }) : t3[e3] = r2, t3;
        }
        function te(t3) {
          return new G.j2xParser({ attributeNamePrefix: "@_", format: true, ignoreAttributes: false, supressEmptyNode: true }).parse(ee({ lockinfo: { "@_xmlns:d": "DAV:", lockscope: { exclusive: {} }, locktype: { write: {} }, owner: { href: t3 } } }, "d"));
        }
        function ee(t3, e3) {
          var r2 = function(t4) {
            for (var e4 = 1; e4 < arguments.length; e4++) {
              var r3 = null != arguments[e4] ? arguments[e4] : {};
              e4 % 2 ? Qt(Object(r3), true).forEach(function(e5) {
                Yt(t4, e5, r3[e5]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t4, Object.getOwnPropertyDescriptors(r3)) : Qt(Object(r3)).forEach(function(e5) {
                Object.defineProperty(t4, e5, Object.getOwnPropertyDescriptor(r3, e5));
              });
            }
            return t4;
          }({}, t3);
          for (var n2 in r2)
            r2.hasOwnProperty(n2) && (r2[n2] && "object" === Gt(r2[n2]) && -1 === n2.indexOf(":") ? (r2["".concat(e3, ":").concat(n2)] = ee(r2[n2], e3), delete r2[n2]) : false === /^@_/.test(n2) && (r2["".concat(e3, ":").concat(n2)] = r2[n2], delete r2[n2]));
          return r2;
        }
        function re(t3) {
          return G.parse(t3, { arrayMode: false, ignoreNameSpace: true, parseAttributeValue: true, parseNodeValue: true });
        }
        function ne(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        function oe(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }
        var ie = oe(function(t3, e3, r2) {
          var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o2 = M({ url: d(t3.remoteURL, f(e3)), method: "UNLOCK", headers: { "Lock-Token": r2 } }, t3, n2);
          return ne(B(o2), function(e4) {
            if (z(t3, e4), 204 !== e4.status && 200 !== e4.status)
              throw $(e4);
          });
        }), ae = oe(function(t3, e3) {
          var r2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = r2.refreshToken, o2 = r2.timeout, i2 = void 0 === o2 ? se : o2, a2 = { Accept: "text/plain,application/xml", Timeout: i2 };
          n2 && (a2.If = n2);
          var s2 = M({ url: d(t3.remoteURL, f(e3)), method: "LOCK", headers: a2, data: te(t3.contactHref), responseType: "text" }, t3, r2);
          return ne(B(s2), function(e4) {
            z(t3, e4);
            var r3 = re(e4.data), n3 = Y().get(r3, "prop.lockdiscovery.activelock.locktoken.href"), o3 = Y().get(r3, "prop.lockdiscovery.activelock.timeout");
            if (!n3)
              throw $(e4, "No lock token received: ");
            return { token: n3, serverTimeout: o3 };
          });
        }), se = "Infinite, Second-4100000000";
        function ue(t3, e3) {
          (null == e3 || e3 > t3.length) && (e3 = t3.length);
          for (var r2 = 0, n2 = new Array(e3); r2 < e3; r2++)
            n2[r2] = t3[r2];
          return n2;
        }
        function ce(t3) {
          try {
            var e3 = (o2 = t3.multistatus.response, i2 = 1, function(t4) {
              if (Array.isArray(t4))
                return t4;
            }(o2) || function(t4, e4) {
              var r3 = null == t4 ? null : "undefined" != typeof Symbol && t4[Symbol.iterator] || t4["@@iterator"];
              if (null != r3) {
                var n3, o3, i3 = [], a2 = true, s2 = false;
                try {
                  for (r3 = r3.call(t4); !(a2 = (n3 = r3.next()).done) && (i3.push(n3.value), !e4 || i3.length !== e4); a2 = true)
                    ;
                } catch (t5) {
                  s2 = true, o3 = t5;
                } finally {
                  try {
                    a2 || null == r3.return || r3.return();
                  } finally {
                    if (s2)
                      throw o3;
                  }
                }
                return i3;
              }
            }(o2, i2) || function(t4, e4) {
              if (t4) {
                if ("string" == typeof t4)
                  return ue(t4, e4);
                var r3 = Object.prototype.toString.call(t4).slice(8, -1);
                return "Object" === r3 && t4.constructor && (r3 = t4.constructor.name), "Map" === r3 || "Set" === r3 ? Array.from(t4) : "Arguments" === r3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r3) ? ue(t4, e4) : void 0;
              }
            }(o2, i2) || function() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }())[0].propstat.prop, r2 = e3["quota-used-bytes"], n2 = e3["quota-available-bytes"];
            return void 0 !== r2 && void 0 !== n2 ? { used: parseInt(r2, 10), available: st(n2) } : null;
          } catch (t4) {
          }
          var o2, i2;
          return null;
        }
        function fe(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var le = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = e3.path || "/", n2 = M({ url: d(t3.remoteURL, r2), method: "PROPFIND", headers: { Accept: "text/plain", Depth: "0" }, responseType: "text" }, t3, e3);
          return fe(B(n2), function(r3) {
            return z(t3, r3), fe(ot(r3.data), function(t4) {
              var n3 = ce(t4);
              return J(r3, n3, e3.details);
            });
          });
        });
        function pe(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var he = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3, r2) {
          var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o2 = M({ url: d(t3.remoteURL, f(e3)), method: "MOVE", headers: { Destination: d(t3.remoteURL, f(r2)) } }, t3, n2);
          return pe(B(o2), function(e4) {
            z(t3, e4);
          });
        }), de = r(8918), ye = "function" == typeof ArrayBuffer, ge = Object.prototype.toString;
        function me(t3) {
          if (e3 = t3, ye && (e3 instanceof ArrayBuffer || "[object ArrayBuffer]" === ge.call(e3)))
            return t3.byteLength;
          if (function(t4) {
            return null != t4 && null != t4.constructor && "function" == typeof t4.constructor.isBuffer && t4.constructor.isBuffer(t4);
          }(t3))
            return t3.length;
          if ("string" == typeof t3)
            return (0, de.k)(t3);
          var e3;
          throw new g.Layerr({ info: { code: A.DataTypeNoLength } }, "Cannot calculate data length: Invalid type");
        }
        function ve(t3, e3, r2) {
          return r2 ? e3 ? e3(t3) : t3 : (t3 && t3.then || (t3 = Promise.resolve(t3)), e3 ? t3.then(e3) : t3);
        }
        var be = function(t3) {
          return function() {
            for (var e3 = [], r2 = 0; r2 < arguments.length; r2++)
              e3[r2] = arguments[r2];
            try {
              return Promise.resolve(t3.apply(this, e3));
            } catch (t4) {
              return Promise.reject(t4);
            }
          };
        }(function(t3, e3, r2) {
          var n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {}, o2 = n2.contentLength, i2 = void 0 === o2 || o2, a2 = n2.overwrite, s2 = void 0 === a2 || a2, u2 = { "Content-Type": "application/octet-stream" };
          false === i2 || (u2["Content-Length"] = "".concat("number" == typeof i2 ? i2 : me(r2))), s2 || (u2["If-None-Match"] = "*");
          var c2 = M({ url: d(t3.remoteURL, f(e3)), method: "PUT", headers: u2, data: r2 }, t3, n2);
          return ve(B(c2), function(e4) {
            try {
              z(t3, e4);
            } catch (t4) {
              var r3 = t4;
              if (412 !== r3.status || s2)
                throw r3;
              return false;
            }
            return true;
          });
        });
        function we(t3, e3) {
          var r2 = "".concat(d(t3.remoteURL, f(e3)), "?Content-Type=application/octet-stream"), n2 = /^https:/i.test(r2) ? "https" : "http";
          switch (t3.authType) {
            case O.None:
              break;
            case O.Password:
              var o2 = E(t3.headers.Authorization.replace(/^Basic /i, "").trim());
              r2 = r2.replace(/^https?:\/\//, "".concat(n2, "://").concat(o2, "@"));
              break;
            default:
              throw new g.Layerr({ info: { code: A.LinkUnsupportedAuthType } }, "Unsupported auth type for file link: ".concat(t3.authType));
          }
          return r2;
        }
        var Oe = "https://github.com/perry-mitchell/webdav-client/blob/master/LOCK_CONTACT.md";
        function Ae(t3) {
          var e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, r2 = e3.authType, n2 = void 0 === r2 ? null : r2, o2 = e3.contactHref, i2 = void 0 === o2 ? Oe : o2, a2 = e3.headers, s2 = void 0 === a2 ? {} : a2, u2 = e3.httpAgent, c2 = e3.httpsAgent, f2 = e3.maxBodyLength, l2 = e3.maxContentLength, p2 = e3.password, d2 = e3.token, y2 = e3.username, g2 = e3.withCredentials, m2 = n2;
          m2 || (m2 = y2 || p2 ? O.Password : O.None);
          var v2 = { authType: m2, contactHref: i2, headers: Object.assign({}, s2), httpAgent: u2, httpsAgent: c2, maxBodyLength: f2, maxContentLength: l2, remotePath: h(t3), remoteURL: t3, password: p2, token: d2, username: y2, withCredentials: g2 };
          return P(v2, y2, p2, d2), { copyFile: function(t4, e4, r3) {
            return K(v2, t4, e4, r3);
          }, createDirectory: function(t4, e4) {
            return Et(v2, t4, e4);
          }, createReadStream: function(t4, e4) {
            return kt(v2, t4, e4);
          }, createWriteStream: function(t4, e4, r3) {
            return It(v2, t4, e4, r3);
          }, customRequest: function(t4, e4) {
            return Dt(v2, t4, e4);
          }, deleteFile: function(t4, e4) {
            return Ft(v2, t4, e4);
          }, exists: function(t4, e4) {
            return Bt(v2, t4, e4);
          }, getDirectoryContents: function(t4, e4) {
            return qt(v2, t4, e4);
          }, getFileContents: function(t4, e4) {
            return Zt(v2, t4, e4);
          }, getFileDownloadLink: function(t4) {
            return Kt(v2, t4);
          }, getFileUploadLink: function(t4) {
            return we(v2, t4);
          }, getHeaders: function() {
            return Object.assign({}, v2.headers);
          }, getQuota: function(t4) {
            return le(v2, t4);
          }, lock: function(t4, e4) {
            return ae(v2, t4, e4);
          }, moveFile: function(t4, e4, r3) {
            return he(v2, t4, e4, r3);
          }, putFileContents: function(t4, e4, r3) {
            return be(v2, t4, e4, r3);
          }, setHeaders: function(t4) {
            v2.headers = Object.assign({}, t4);
          }, stat: function(t4, e4) {
            return ct(v2, t4, e4);
          }, unlock: function(t4, e4, r3) {
            return ie(v2, t4, e4, r3);
          } };
        }
      })(), n;
    })());
  }
});

// node_modules/@fyears/tsqueue/dist/index.js
var require_dist = __commonJS({
  "node_modules/@fyears/tsqueue/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Queue = exports.Stack = void 0;
    var Stack = class {
      constructor(x) {
        if (x === void 0) {
          this.stackBack = [];
          this.length = 0;
        } else {
          this.stackBack = [...x];
          this.length = this.stackBack.length;
        }
      }
      push(x) {
        this.stackBack.push(x);
        this.length += 1;
      }
      pop() {
        if (this.length === 0) {
          return void 0;
        }
        this.length -= 1;
        return this.stackBack.pop();
      }
      size() {
        return this.length;
      }
      /**
       * access the newest element but do not pop it
       */
      back() {
        if (this.length === 0) {
          return void 0;
        }
        return this.stackBack[this.stackBack.length - 1];
      }
    };
    exports.Stack = Stack;
    var Queue3 = class {
      constructor(x) {
        if (x === void 0) {
          this.stackBack = [];
          this.stackFront = [];
          this.length = 0;
        } else {
          this.stackFront = [];
          for (let i = x.length - 1; i >= 0; i--) {
            this.stackFront.push(x[i]);
          }
          this.stackBack = [];
          this.length = this.stackFront.length;
        }
      }
      push(x) {
        this.stackBack.push(x);
        this.length += 1;
      }
      pop() {
        if (this.length === 0) {
          return void 0;
        }
        if (this.stackFront.length === 0) {
          while (this.stackBack.length > 0) {
            this.stackFront.push(this.stackBack.pop());
          }
        }
        this.length -= 1;
        return this.stackFront.pop();
      }
      shift() {
        return this.pop();
      }
      size() {
        return this.length;
      }
      /**
       * access the oldest element in queue but do not pop it
       */
      front() {
        if (this.length === 0) {
          return void 0;
        }
        if (this.stackFront.length === 0) {
          while (this.stackBack.length > 0) {
            this.stackFront.push(this.stackBack.pop());
          }
        }
        return this.stackFront[this.stackFront.length - 1];
      }
      /**
       * access the newest element in queue
       */
      back() {
        if (this.length === 0) {
          return void 0;
        }
        if (this.stackBack.length > 0) {
          return this.stackBack[this.stackBack.length - 1];
        }
        return this.stackFront[0];
      }
    };
    exports.Queue = Queue3;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports, module2) {
    function baseSlice(array, start, end) {
      var index = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }
    module2.exports = baseSlice;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module2) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module2.exports = eq;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module2) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module2.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module2.exports = isFunction;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module2) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module2.exports = isArrayLike;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module2.exports = isIndex;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module2) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module2.exports = isIterateeCall;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module2) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module2.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module2) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module2.exports = baseTrim;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module2.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module2) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = toNumber;
  }
});

// node_modules/lodash/toFinite.js
var require_toFinite = __commonJS({
  "node_modules/lodash/toFinite.js"(exports, module2) {
    var toNumber = require_toNumber();
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    module2.exports = toFinite;
  }
});

// node_modules/lodash/toInteger.js
var require_toInteger = __commonJS({
  "node_modules/lodash/toInteger.js"(exports, module2) {
    var toFinite = require_toFinite();
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    module2.exports = toInteger;
  }
});

// node_modules/lodash/chunk.js
var require_chunk = __commonJS({
  "node_modules/lodash/chunk.js"(exports, module2) {
    var baseSlice = require_baseSlice();
    var isIterateeCall = require_isIterateeCall();
    var toInteger = require_toInteger();
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function chunk3(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size === void 0) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
      while (index < length) {
        result[resIndex++] = baseSlice(array, index, index += size);
      }
      return result;
    }
    module2.exports = chunk3;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module2) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module2.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module2) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module2.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module2) {
    var isArray = Array.isArray;
    module2.exports = isArray;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module2.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module2) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module2.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module2) {
    var baseFlatten = require_baseFlatten();
    function flatten3(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }
    module2.exports = flatten3;
  }
});

// node_modules/rfc4648/lib/index.js
var require_lib = __commonJS({
  "node_modules/rfc4648/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function parse(string, encoding, opts) {
      var _opts$out;
      if (opts === void 0) {
        opts = {};
      }
      if (!encoding.codes) {
        encoding.codes = {};
        for (var i = 0; i < encoding.chars.length; ++i) {
          encoding.codes[encoding.chars[i]] = i;
        }
      }
      if (!opts.loose && string.length * encoding.bits & 7) {
        throw new SyntaxError("Invalid padding");
      }
      var end = string.length;
      while (string[end - 1] === "=") {
        --end;
        if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {
          throw new SyntaxError("Invalid padding");
        }
      }
      var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0);
      var bits = 0;
      var buffer = 0;
      var written = 0;
      for (var _i = 0; _i < end; ++_i) {
        var value = encoding.codes[string[_i]];
        if (value === void 0) {
          throw new SyntaxError("Invalid character " + string[_i]);
        }
        buffer = buffer << encoding.bits | value;
        bits += encoding.bits;
        if (bits >= 8) {
          bits -= 8;
          out[written++] = 255 & buffer >> bits;
        }
      }
      if (bits >= encoding.bits || 255 & buffer << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
      }
      return out;
    }
    function stringify(data, encoding, opts) {
      if (opts === void 0) {
        opts = {};
      }
      var _opts = opts, _opts$pad = _opts.pad, pad = _opts$pad === void 0 ? true : _opts$pad;
      var mask = (1 << encoding.bits) - 1;
      var out = "";
      var bits = 0;
      var buffer = 0;
      for (var i = 0; i < data.length; ++i) {
        buffer = buffer << 8 | 255 & data[i];
        bits += 8;
        while (bits > encoding.bits) {
          bits -= encoding.bits;
          out += encoding.chars[mask & buffer >> bits];
        }
      }
      if (bits) {
        out += encoding.chars[mask & buffer << encoding.bits - bits];
      }
      if (pad) {
        while (out.length * encoding.bits & 7) {
          out += "=";
        }
      }
      return out;
    }
    var base16Encoding = {
      chars: "0123456789ABCDEF",
      bits: 4
    };
    var base32Encoding = {
      chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
      bits: 5
    };
    var base32HexEncoding = {
      chars: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
      bits: 5
    };
    var base64Encoding = {
      chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      bits: 6
    };
    var base64UrlEncoding = {
      chars: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
      bits: 6
    };
    var base162 = {
      parse: function parse$1(string, opts) {
        return parse(string.toUpperCase(), base16Encoding, opts);
      },
      stringify: function stringify$1(data, opts) {
        return stringify(data, base16Encoding, opts);
      }
    };
    var base322 = {
      parse: function parse$1(string, opts) {
        if (opts === void 0) {
          opts = {};
        }
        return parse(opts.loose ? string.toUpperCase().replace(/0/g, "O").replace(/1/g, "L").replace(/8/g, "B") : string, base32Encoding, opts);
      },
      stringify: function stringify$1(data, opts) {
        return stringify(data, base32Encoding, opts);
      }
    };
    var base32hex2 = {
      parse: function parse$1(string, opts) {
        return parse(string, base32HexEncoding, opts);
      },
      stringify: function stringify$1(data, opts) {
        return stringify(data, base32HexEncoding, opts);
      }
    };
    var base642 = {
      parse: function parse$1(string, opts) {
        return parse(string, base64Encoding, opts);
      },
      stringify: function stringify$1(data, opts) {
        return stringify(data, base64Encoding, opts);
      }
    };
    var base64url3 = {
      parse: function parse$1(string, opts) {
        return parse(string, base64UrlEncoding, opts);
      },
      stringify: function stringify$1(data, opts) {
        return stringify(data, base64UrlEncoding, opts);
      }
    };
    var codec2 = {
      parse,
      stringify
    };
    exports.base16 = base162;
    exports.base32 = base322;
    exports.base32hex = base32hex2;
    exports.base64 = base642;
    exports.base64url = base64url3;
    exports.codec = codec2;
  }
});

// node_modules/core-js-pure/internals/global.js
var require_global = __commonJS({
  "node_modules/core-js-pure/internals/global.js"(exports, module2) {
    "use strict";
    var check = function(it) {
      return it && it.Math == Math && it;
    };
    module2.exports = // eslint-disable-next-line es/no-global-this -- safe
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    check(typeof self == "object" && self) || check(typeof global == "object" && global) || // eslint-disable-next-line no-new-func -- fallback
    function() {
      return this;
    }() || exports || Function("return this")();
  }
});

// node_modules/core-js-pure/internals/fails.js
var require_fails = __commonJS({
  "node_modules/core-js-pure/internals/fails.js"(exports, module2) {
    "use strict";
    module2.exports = function(exec) {
      try {
        return !!exec();
      } catch (error) {
        return true;
      }
    };
  }
});

// node_modules/core-js-pure/internals/function-bind-native.js
var require_function_bind_native = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-native.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      var test = function() {
      }.bind();
      return typeof test != "function" || test.hasOwnProperty("prototype");
    });
  }
});

// node_modules/core-js-pure/internals/function-apply.js
var require_function_apply = __commonJS({
  "node_modules/core-js-pure/internals/function-apply.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var apply = FunctionPrototype.apply;
    var call = FunctionPrototype.call;
    module2.exports = typeof Reflect == "object" && Reflect.apply || (NATIVE_BIND ? call.bind(apply) : function() {
      return call.apply(apply, arguments);
    });
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this.js
var require_function_uncurry_this = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var FunctionPrototype = Function.prototype;
    var call = FunctionPrototype.call;
    var uncurryThisWithBind = NATIVE_BIND && FunctionPrototype.bind.bind(call, call);
    module2.exports = NATIVE_BIND ? uncurryThisWithBind : function(fn) {
      return function() {
        return call.apply(fn, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/classof-raw.js
var require_classof_raw = __commonJS({
  "node_modules/core-js-pure/internals/classof-raw.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toString = uncurryThis({}.toString);
    var stringSlice = uncurryThis("".slice);
    module2.exports = function(it) {
      return stringSlice(toString(it), 8, -1);
    };
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this-clause.js
var require_function_uncurry_this_clause = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this-clause.js"(exports, module2) {
    "use strict";
    var classofRaw = require_classof_raw();
    var uncurryThis = require_function_uncurry_this();
    module2.exports = function(fn) {
      if (classofRaw(fn) === "Function")
        return uncurryThis(fn);
    };
  }
});

// node_modules/core-js-pure/internals/document-all.js
var require_document_all = __commonJS({
  "node_modules/core-js-pure/internals/document-all.js"(exports, module2) {
    "use strict";
    var documentAll = typeof document == "object" && document.all;
    var IS_HTMLDDA = typeof documentAll == "undefined" && documentAll !== void 0;
    module2.exports = {
      all: documentAll,
      IS_HTMLDDA
    };
  }
});

// node_modules/core-js-pure/internals/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/core-js-pure/internals/is-callable.js"(exports, module2) {
    "use strict";
    var $documentAll = require_document_all();
    var documentAll = $documentAll.all;
    module2.exports = $documentAll.IS_HTMLDDA ? function(argument) {
      return typeof argument == "function" || argument === documentAll;
    } : function(argument) {
      return typeof argument == "function";
    };
  }
});

// node_modules/core-js-pure/internals/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/core-js-pure/internals/descriptors.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      return Object.defineProperty({}, 1, { get: function() {
        return 7;
      } })[1] != 7;
    });
  }
});

// node_modules/core-js-pure/internals/function-call.js
var require_function_call = __commonJS({
  "node_modules/core-js-pure/internals/function-call.js"(exports, module2) {
    "use strict";
    var NATIVE_BIND = require_function_bind_native();
    var call = Function.prototype.call;
    module2.exports = NATIVE_BIND ? call.bind(call) : function() {
      return call.apply(call, arguments);
    };
  }
});

// node_modules/core-js-pure/internals/object-property-is-enumerable.js
var require_object_property_is_enumerable = __commonJS({
  "node_modules/core-js-pure/internals/object-property-is-enumerable.js"(exports) {
    "use strict";
    var $propertyIsEnumerable = {}.propertyIsEnumerable;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);
    exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
      var descriptor = getOwnPropertyDescriptor(this, V);
      return !!descriptor && descriptor.enumerable;
    } : $propertyIsEnumerable;
  }
});

// node_modules/core-js-pure/internals/create-property-descriptor.js
var require_create_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/create-property-descriptor.js"(exports, module2) {
    "use strict";
    module2.exports = function(bitmap, value) {
      return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value
      };
    };
  }
});

// node_modules/core-js-pure/internals/indexed-object.js
var require_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/indexed-object.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var classof = require_classof_raw();
    var $Object = Object;
    var split = uncurryThis("".split);
    module2.exports = fails(function() {
      return !$Object("z").propertyIsEnumerable(0);
    }) ? function(it) {
      return classof(it) == "String" ? split(it, "") : $Object(it);
    } : $Object;
  }
});

// node_modules/core-js-pure/internals/is-null-or-undefined.js
var require_is_null_or_undefined = __commonJS({
  "node_modules/core-js-pure/internals/is-null-or-undefined.js"(exports, module2) {
    "use strict";
    module2.exports = function(it) {
      return it === null || it === void 0;
    };
  }
});

// node_modules/core-js-pure/internals/require-object-coercible.js
var require_require_object_coercible = __commonJS({
  "node_modules/core-js-pure/internals/require-object-coercible.js"(exports, module2) {
    "use strict";
    var isNullOrUndefined = require_is_null_or_undefined();
    var $TypeError = TypeError;
    module2.exports = function(it) {
      if (isNullOrUndefined(it))
        throw $TypeError("Can't call method on " + it);
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/to-indexed-object.js
var require_to_indexed_object = __commonJS({
  "node_modules/core-js-pure/internals/to-indexed-object.js"(exports, module2) {
    "use strict";
    var IndexedObject = require_indexed_object();
    var requireObjectCoercible = require_require_object_coercible();
    module2.exports = function(it) {
      return IndexedObject(requireObjectCoercible(it));
    };
  }
});

// node_modules/core-js-pure/internals/is-object.js
var require_is_object = __commonJS({
  "node_modules/core-js-pure/internals/is-object.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var $documentAll = require_document_all();
    var documentAll = $documentAll.all;
    module2.exports = $documentAll.IS_HTMLDDA ? function(it) {
      return typeof it == "object" ? it !== null : isCallable(it) || it === documentAll;
    } : function(it) {
      return typeof it == "object" ? it !== null : isCallable(it);
    };
  }
});

// node_modules/core-js-pure/internals/path.js
var require_path = __commonJS({
  "node_modules/core-js-pure/internals/path.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/core-js-pure/internals/get-built-in.js
var require_get_built_in = __commonJS({
  "node_modules/core-js-pure/internals/get-built-in.js"(exports, module2) {
    "use strict";
    var path3 = require_path();
    var global2 = require_global();
    var isCallable = require_is_callable();
    var aFunction = function(variable) {
      return isCallable(variable) ? variable : void 0;
    };
    module2.exports = function(namespace, method) {
      return arguments.length < 2 ? aFunction(path3[namespace]) || aFunction(global2[namespace]) : path3[namespace] && path3[namespace][method] || global2[namespace] && global2[namespace][method];
    };
  }
});

// node_modules/core-js-pure/internals/object-is-prototype-of.js
var require_object_is_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-is-prototype-of.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module2.exports = uncurryThis({}.isPrototypeOf);
  }
});

// node_modules/core-js-pure/internals/engine-user-agent.js
var require_engine_user_agent = __commonJS({
  "node_modules/core-js-pure/internals/engine-user-agent.js"(exports, module2) {
    "use strict";
    module2.exports = typeof navigator != "undefined" && String(navigator.userAgent) || "";
  }
});

// node_modules/core-js-pure/internals/engine-v8-version.js
var require_engine_v8_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-v8-version.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var userAgent = require_engine_user_agent();
    var process2 = global2.process;
    var Deno = global2.Deno;
    var versions = process2 && process2.versions || Deno && Deno.version;
    var v8 = versions && versions.v8;
    var match;
    var version;
    if (v8) {
      match = v8.split(".");
      version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
    }
    if (!version && userAgent) {
      match = userAgent.match(/Edge\/(\d+)/);
      if (!match || match[1] >= 74) {
        match = userAgent.match(/Chrome\/(\d+)/);
        if (match)
          version = +match[1];
      }
    }
    module2.exports = version;
  }
});

// node_modules/core-js-pure/internals/symbol-constructor-detection.js
var require_symbol_constructor_detection = __commonJS({
  "node_modules/core-js-pure/internals/symbol-constructor-detection.js"(exports, module2) {
    "use strict";
    var V8_VERSION = require_engine_v8_version();
    var fails = require_fails();
    var global2 = require_global();
    var $String = global2.String;
    module2.exports = !!Object.getOwnPropertySymbols && !fails(function() {
      var symbol = Symbol();
      return !$String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
      !Symbol.sham && V8_VERSION && V8_VERSION < 41;
    });
  }
});

// node_modules/core-js-pure/internals/use-symbol-as-uid.js
var require_use_symbol_as_uid = __commonJS({
  "node_modules/core-js-pure/internals/use-symbol-as-uid.js"(exports, module2) {
    "use strict";
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    module2.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
  }
});

// node_modules/core-js-pure/internals/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/core-js-pure/internals/is-symbol.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var isCallable = require_is_callable();
    var isPrototypeOf = require_object_is_prototype_of();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var $Object = Object;
    module2.exports = USE_SYMBOL_AS_UID ? function(it) {
      return typeof it == "symbol";
    } : function(it) {
      var $Symbol = getBuiltIn("Symbol");
      return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, $Object(it));
    };
  }
});

// node_modules/core-js-pure/internals/try-to-string.js
var require_try_to_string = __commonJS({
  "node_modules/core-js-pure/internals/try-to-string.js"(exports, module2) {
    "use strict";
    var $String = String;
    module2.exports = function(argument) {
      try {
        return $String(argument);
      } catch (error) {
        return "Object";
      }
    };
  }
});

// node_modules/core-js-pure/internals/a-callable.js
var require_a_callable = __commonJS({
  "node_modules/core-js-pure/internals/a-callable.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isCallable(argument))
        return argument;
      throw $TypeError(tryToString(argument) + " is not a function");
    };
  }
});

// node_modules/core-js-pure/internals/get-method.js
var require_get_method = __commonJS({
  "node_modules/core-js-pure/internals/get-method.js"(exports, module2) {
    "use strict";
    var aCallable = require_a_callable();
    var isNullOrUndefined = require_is_null_or_undefined();
    module2.exports = function(V, P) {
      var func = V[P];
      return isNullOrUndefined(func) ? void 0 : aCallable(func);
    };
  }
});

// node_modules/core-js-pure/internals/ordinary-to-primitive.js
var require_ordinary_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/ordinary-to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var $TypeError = TypeError;
    module2.exports = function(input, pref) {
      var fn, val;
      if (pref === "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
        return val;
      if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input)))
        return val;
      if (pref !== "string" && isCallable(fn = input.toString) && !isObject(val = call(fn, input)))
        return val;
      throw $TypeError("Can't convert object to primitive value");
    };
  }
});

// node_modules/core-js-pure/internals/is-pure.js
var require_is_pure = __commonJS({
  "node_modules/core-js-pure/internals/is-pure.js"(exports, module2) {
    "use strict";
    module2.exports = true;
  }
});

// node_modules/core-js-pure/internals/define-global-property.js
var require_define_global_property = __commonJS({
  "node_modules/core-js-pure/internals/define-global-property.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var defineProperty = Object.defineProperty;
    module2.exports = function(key, value) {
      try {
        defineProperty(global2, key, { value, configurable: true, writable: true });
      } catch (error) {
        global2[key] = value;
      }
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/shared-store.js
var require_shared_store = __commonJS({
  "node_modules/core-js-pure/internals/shared-store.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var defineGlobalProperty = require_define_global_property();
    var SHARED = "__core-js_shared__";
    var store = global2[SHARED] || defineGlobalProperty(SHARED, {});
    module2.exports = store;
  }
});

// node_modules/core-js-pure/internals/shared.js
var require_shared = __commonJS({
  "node_modules/core-js-pure/internals/shared.js"(exports, module2) {
    "use strict";
    var IS_PURE = require_is_pure();
    var store = require_shared_store();
    (module2.exports = function(key, value) {
      return store[key] || (store[key] = value !== void 0 ? value : {});
    })("versions", []).push({
      version: "3.32.0",
      mode: IS_PURE ? "pure" : "global",
      copyright: "\xA9 2014-2023 Denis Pushkarev (zloirock.ru)",
      license: "https://github.com/zloirock/core-js/blob/v3.32.0/LICENSE",
      source: "https://github.com/zloirock/core-js"
    });
  }
});

// node_modules/core-js-pure/internals/to-object.js
var require_to_object = __commonJS({
  "node_modules/core-js-pure/internals/to-object.js"(exports, module2) {
    "use strict";
    var requireObjectCoercible = require_require_object_coercible();
    var $Object = Object;
    module2.exports = function(argument) {
      return $Object(requireObjectCoercible(argument));
    };
  }
});

// node_modules/core-js-pure/internals/has-own-property.js
var require_has_own_property = __commonJS({
  "node_modules/core-js-pure/internals/has-own-property.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toObject = require_to_object();
    var hasOwnProperty = uncurryThis({}.hasOwnProperty);
    module2.exports = Object.hasOwn || function hasOwn(it, key) {
      return hasOwnProperty(toObject(it), key);
    };
  }
});

// node_modules/core-js-pure/internals/uid.js
var require_uid = __commonJS({
  "node_modules/core-js-pure/internals/uid.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var id = 0;
    var postfix = Math.random();
    var toString = uncurryThis(1 .toString);
    module2.exports = function(key) {
      return "Symbol(" + (key === void 0 ? "" : key) + ")_" + toString(++id + postfix, 36);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol.js
var require_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var shared = require_shared();
    var hasOwn = require_has_own_property();
    var uid = require_uid();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var USE_SYMBOL_AS_UID = require_use_symbol_as_uid();
    var Symbol2 = global2.Symbol;
    var WellKnownSymbolsStore = shared("wks");
    var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2["for"] || Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
    module2.exports = function(name) {
      if (!hasOwn(WellKnownSymbolsStore, name)) {
        WellKnownSymbolsStore[name] = NATIVE_SYMBOL && hasOwn(Symbol2, name) ? Symbol2[name] : createWellKnownSymbol("Symbol." + name);
      }
      return WellKnownSymbolsStore[name];
    };
  }
});

// node_modules/core-js-pure/internals/to-primitive.js
var require_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var isObject = require_is_object();
    var isSymbol = require_is_symbol();
    var getMethod = require_get_method();
    var ordinaryToPrimitive = require_ordinary_to_primitive();
    var wellKnownSymbol = require_well_known_symbol();
    var $TypeError = TypeError;
    var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
    module2.exports = function(input, pref) {
      if (!isObject(input) || isSymbol(input))
        return input;
      var exoticToPrim = getMethod(input, TO_PRIMITIVE);
      var result;
      if (exoticToPrim) {
        if (pref === void 0)
          pref = "default";
        result = call(exoticToPrim, input, pref);
        if (!isObject(result) || isSymbol(result))
          return result;
        throw $TypeError("Can't convert object to primitive value");
      }
      if (pref === void 0)
        pref = "number";
      return ordinaryToPrimitive(input, pref);
    };
  }
});

// node_modules/core-js-pure/internals/to-property-key.js
var require_to_property_key = __commonJS({
  "node_modules/core-js-pure/internals/to-property-key.js"(exports, module2) {
    "use strict";
    var toPrimitive = require_to_primitive();
    var isSymbol = require_is_symbol();
    module2.exports = function(argument) {
      var key = toPrimitive(argument, "string");
      return isSymbol(key) ? key : key + "";
    };
  }
});

// node_modules/core-js-pure/internals/document-create-element.js
var require_document_create_element = __commonJS({
  "node_modules/core-js-pure/internals/document-create-element.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var isObject = require_is_object();
    var document2 = global2.document;
    var EXISTS = isObject(document2) && isObject(document2.createElement);
    module2.exports = function(it) {
      return EXISTS ? document2.createElement(it) : {};
    };
  }
});

// node_modules/core-js-pure/internals/ie8-dom-define.js
var require_ie8_dom_define = __commonJS({
  "node_modules/core-js-pure/internals/ie8-dom-define.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    var createElement = require_document_create_element();
    module2.exports = !DESCRIPTORS && !fails(function() {
      return Object.defineProperty(createElement("div"), "a", {
        get: function() {
          return 7;
        }
      }).a != 7;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-descriptor.js
var require_object_get_own_property_descriptor = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-descriptor.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var call = require_function_call();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var createPropertyDescriptor = require_create_property_descriptor();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var hasOwn = require_has_own_property();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
      O = toIndexedObject(O);
      P = toPropertyKey(P);
      if (IE8_DOM_DEFINE)
        try {
          return $getOwnPropertyDescriptor(O, P);
        } catch (error) {
        }
      if (hasOwn(O, P))
        return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
    };
  }
});

// node_modules/core-js-pure/internals/is-forced.js
var require_is_forced = __commonJS({
  "node_modules/core-js-pure/internals/is-forced.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var replacement = /#|\.prototype\./;
    var isForced = function(feature, detection) {
      var value = data[normalize(feature)];
      return value == POLYFILL ? true : value == NATIVE ? false : isCallable(detection) ? fails(detection) : !!detection;
    };
    var normalize = isForced.normalize = function(string) {
      return String(string).replace(replacement, ".").toLowerCase();
    };
    var data = isForced.data = {};
    var NATIVE = isForced.NATIVE = "N";
    var POLYFILL = isForced.POLYFILL = "P";
    module2.exports = isForced;
  }
});

// node_modules/core-js-pure/internals/function-bind-context.js
var require_function_bind_context = __commonJS({
  "node_modules/core-js-pure/internals/function-bind-context.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this_clause();
    var aCallable = require_a_callable();
    var NATIVE_BIND = require_function_bind_native();
    var bind = uncurryThis(uncurryThis.bind);
    module2.exports = function(fn, that) {
      aCallable(fn);
      return that === void 0 ? fn : NATIVE_BIND ? bind(fn, that) : function() {
        return fn.apply(that, arguments);
      };
    };
  }
});

// node_modules/core-js-pure/internals/v8-prototype-define-bug.js
var require_v8_prototype_define_bug = __commonJS({
  "node_modules/core-js-pure/internals/v8-prototype-define-bug.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var fails = require_fails();
    module2.exports = DESCRIPTORS && fails(function() {
      return Object.defineProperty(function() {
      }, "prototype", {
        value: 42,
        writable: false
      }).prototype != 42;
    });
  }
});

// node_modules/core-js-pure/internals/an-object.js
var require_an_object = __commonJS({
  "node_modules/core-js-pure/internals/an-object.js"(exports, module2) {
    "use strict";
    var isObject = require_is_object();
    var $String = String;
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (isObject(argument))
        return argument;
      throw $TypeError($String(argument) + " is not an object");
    };
  }
});

// node_modules/core-js-pure/internals/object-define-property.js
var require_object_define_property = __commonJS({
  "node_modules/core-js-pure/internals/object-define-property.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var IE8_DOM_DEFINE = require_ie8_dom_define();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var anObject = require_an_object();
    var toPropertyKey = require_to_property_key();
    var $TypeError = TypeError;
    var $defineProperty = Object.defineProperty;
    var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var ENUMERABLE = "enumerable";
    var CONFIGURABLE = "configurable";
    var WRITABLE = "writable";
    exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (typeof O === "function" && P === "prototype" && "value" in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
        var current = $getOwnPropertyDescriptor(O, P);
        if (current && current[WRITABLE]) {
          O[P] = Attributes.value;
          Attributes = {
            configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
            enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
            writable: false
          };
        }
      }
      return $defineProperty(O, P, Attributes);
    } : $defineProperty : function defineProperty(O, P, Attributes) {
      anObject(O);
      P = toPropertyKey(P);
      anObject(Attributes);
      if (IE8_DOM_DEFINE)
        try {
          return $defineProperty(O, P, Attributes);
        } catch (error) {
        }
      if ("get" in Attributes || "set" in Attributes)
        throw $TypeError("Accessors not supported");
      if ("value" in Attributes)
        O[P] = Attributes.value;
      return O;
    };
  }
});

// node_modules/core-js-pure/internals/create-non-enumerable-property.js
var require_create_non_enumerable_property = __commonJS({
  "node_modules/core-js-pure/internals/create-non-enumerable-property.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module2.exports = DESCRIPTORS ? function(object, key, value) {
      return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
    } : function(object, key, value) {
      object[key] = value;
      return object;
    };
  }
});

// node_modules/core-js-pure/internals/export.js
var require_export = __commonJS({
  "node_modules/core-js-pure/internals/export.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var apply = require_function_apply();
    var uncurryThis = require_function_uncurry_this_clause();
    var isCallable = require_is_callable();
    var getOwnPropertyDescriptor = require_object_get_own_property_descriptor().f;
    var isForced = require_is_forced();
    var path3 = require_path();
    var bind = require_function_bind_context();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var wrapConstructor = function(NativeConstructor) {
      var Wrapper = function(a, b, c) {
        if (this instanceof Wrapper) {
          switch (arguments.length) {
            case 0:
              return new NativeConstructor();
            case 1:
              return new NativeConstructor(a);
            case 2:
              return new NativeConstructor(a, b);
          }
          return new NativeConstructor(a, b, c);
        }
        return apply(NativeConstructor, this, arguments);
      };
      Wrapper.prototype = NativeConstructor.prototype;
      return Wrapper;
    };
    module2.exports = function(options, source) {
      var TARGET = options.target;
      var GLOBAL = options.global;
      var STATIC = options.stat;
      var PROTO = options.proto;
      var nativeSource = GLOBAL ? global2 : STATIC ? global2[TARGET] : (global2[TARGET] || {}).prototype;
      var target = GLOBAL ? path3 : path3[TARGET] || createNonEnumerableProperty(path3, TARGET, {})[TARGET];
      var targetPrototype = target.prototype;
      var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
      var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;
      for (key in source) {
        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
        USE_NATIVE = !FORCED && nativeSource && hasOwn(nativeSource, key);
        targetProperty = target[key];
        if (USE_NATIVE)
          if (options.dontCallGetSet) {
            descriptor = getOwnPropertyDescriptor(nativeSource, key);
            nativeProperty = descriptor && descriptor.value;
          } else
            nativeProperty = nativeSource[key];
        sourceProperty = USE_NATIVE && nativeProperty ? nativeProperty : source[key];
        if (USE_NATIVE && typeof targetProperty == typeof sourceProperty)
          continue;
        if (options.bind && USE_NATIVE)
          resultProperty = bind(sourceProperty, global2);
        else if (options.wrap && USE_NATIVE)
          resultProperty = wrapConstructor(sourceProperty);
        else if (PROTO && isCallable(sourceProperty))
          resultProperty = uncurryThis(sourceProperty);
        else
          resultProperty = sourceProperty;
        if (options.sham || sourceProperty && sourceProperty.sham || targetProperty && targetProperty.sham) {
          createNonEnumerableProperty(resultProperty, "sham", true);
        }
        createNonEnumerableProperty(target, key, resultProperty);
        if (PROTO) {
          VIRTUAL_PROTOTYPE = TARGET + "Prototype";
          if (!hasOwn(path3, VIRTUAL_PROTOTYPE)) {
            createNonEnumerableProperty(path3, VIRTUAL_PROTOTYPE, {});
          }
          createNonEnumerableProperty(path3[VIRTUAL_PROTOTYPE], key, sourceProperty);
          if (options.real && targetPrototype && (FORCED || !targetPrototype[key])) {
            createNonEnumerableProperty(targetPrototype, key, sourceProperty);
          }
        }
      }
    };
  }
});

// node_modules/core-js-pure/modules/es.object.define-property.js
var require_es_object_define_property = __commonJS({
  "node_modules/core-js-pure/modules/es.object.define-property.js"() {
    "use strict";
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var defineProperty = require_object_define_property().f;
    $({ target: "Object", stat: true, forced: Object.defineProperty !== defineProperty, sham: !DESCRIPTORS }, {
      defineProperty
    });
  }
});

// node_modules/core-js-pure/es/object/define-property.js
var require_define_property = __commonJS({
  "node_modules/core-js-pure/es/object/define-property.js"(exports, module2) {
    "use strict";
    require_es_object_define_property();
    var path3 = require_path();
    var Object2 = path3.Object;
    var defineProperty = module2.exports = function defineProperty2(it, key, desc) {
      return Object2.defineProperty(it, key, desc);
    };
    if (Object2.defineProperty.sham)
      defineProperty.sham = true;
  }
});

// node_modules/core-js-pure/stable/object/define-property.js
var require_define_property2 = __commonJS({
  "node_modules/core-js-pure/stable/object/define-property.js"(exports, module2) {
    "use strict";
    var parent = require_define_property();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js
var require_define_property3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/define-property.js"(exports, module2) {
    module2.exports = require_define_property2();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/interopRequireDefault.js"(exports, module2) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/core-js-pure/internals/is-array.js
var require_is_array = __commonJS({
  "node_modules/core-js-pure/internals/is-array.js"(exports, module2) {
    "use strict";
    var classof = require_classof_raw();
    module2.exports = Array.isArray || function isArray(argument) {
      return classof(argument) == "Array";
    };
  }
});

// node_modules/core-js-pure/internals/to-string-tag-support.js
var require_to_string_tag_support = __commonJS({
  "node_modules/core-js-pure/internals/to-string-tag-support.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var test = {};
    test[TO_STRING_TAG] = "z";
    module2.exports = String(test) === "[object z]";
  }
});

// node_modules/core-js-pure/internals/classof.js
var require_classof = __commonJS({
  "node_modules/core-js-pure/internals/classof.js"(exports, module2) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var isCallable = require_is_callable();
    var classofRaw = require_classof_raw();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    var $Object = Object;
    var CORRECT_ARGUMENTS = classofRaw(function() {
      return arguments;
    }()) == "Arguments";
    var tryGet = function(it, key) {
      try {
        return it[key];
      } catch (error) {
      }
    };
    module2.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
      var O, tag, result;
      return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = $Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && isCallable(O.callee) ? "Arguments" : result;
    };
  }
});

// node_modules/core-js-pure/internals/inspect-source.js
var require_inspect_source = __commonJS({
  "node_modules/core-js-pure/internals/inspect-source.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var isCallable = require_is_callable();
    var store = require_shared_store();
    var functionToString = uncurryThis(Function.toString);
    if (!isCallable(store.inspectSource)) {
      store.inspectSource = function(it) {
        return functionToString(it);
      };
    }
    module2.exports = store.inspectSource;
  }
});

// node_modules/core-js-pure/internals/is-constructor.js
var require_is_constructor = __commonJS({
  "node_modules/core-js-pure/internals/is-constructor.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var classof = require_classof();
    var getBuiltIn = require_get_built_in();
    var inspectSource = require_inspect_source();
    var noop = function() {
    };
    var empty = [];
    var construct = getBuiltIn("Reflect", "construct");
    var constructorRegExp = /^\s*(?:class|function)\b/;
    var exec = uncurryThis(constructorRegExp.exec);
    var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);
    var isConstructorModern = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      try {
        construct(noop, empty, argument);
        return true;
      } catch (error) {
        return false;
      }
    };
    var isConstructorLegacy = function isConstructor(argument) {
      if (!isCallable(argument))
        return false;
      switch (classof(argument)) {
        case "AsyncFunction":
        case "GeneratorFunction":
        case "AsyncGeneratorFunction":
          return false;
      }
      try {
        return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
      } catch (error) {
        return true;
      }
    };
    isConstructorLegacy.sham = true;
    module2.exports = !construct || fails(function() {
      var called;
      return isConstructorModern(isConstructorModern.call) || !isConstructorModern(Object) || !isConstructorModern(function() {
        called = true;
      }) || called;
    }) ? isConstructorLegacy : isConstructorModern;
  }
});

// node_modules/core-js-pure/internals/math-trunc.js
var require_math_trunc = __commonJS({
  "node_modules/core-js-pure/internals/math-trunc.js"(exports, module2) {
    "use strict";
    var ceil = Math.ceil;
    var floor = Math.floor;
    module2.exports = Math.trunc || function trunc(x) {
      var n = +x;
      return (n > 0 ? floor : ceil)(n);
    };
  }
});

// node_modules/core-js-pure/internals/to-integer-or-infinity.js
var require_to_integer_or_infinity = __commonJS({
  "node_modules/core-js-pure/internals/to-integer-or-infinity.js"(exports, module2) {
    "use strict";
    var trunc = require_math_trunc();
    module2.exports = function(argument) {
      var number = +argument;
      return number !== number || number === 0 ? 0 : trunc(number);
    };
  }
});

// node_modules/core-js-pure/internals/to-absolute-index.js
var require_to_absolute_index = __commonJS({
  "node_modules/core-js-pure/internals/to-absolute-index.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var max = Math.max;
    var min = Math.min;
    module2.exports = function(index, length) {
      var integer = toIntegerOrInfinity(index);
      return integer < 0 ? max(integer + length, 0) : min(integer, length);
    };
  }
});

// node_modules/core-js-pure/internals/to-length.js
var require_to_length = __commonJS({
  "node_modules/core-js-pure/internals/to-length.js"(exports, module2) {
    "use strict";
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var min = Math.min;
    module2.exports = function(argument) {
      return argument > 0 ? min(toIntegerOrInfinity(argument), 9007199254740991) : 0;
    };
  }
});

// node_modules/core-js-pure/internals/length-of-array-like.js
var require_length_of_array_like = __commonJS({
  "node_modules/core-js-pure/internals/length-of-array-like.js"(exports, module2) {
    "use strict";
    var toLength = require_to_length();
    module2.exports = function(obj) {
      return toLength(obj.length);
    };
  }
});

// node_modules/core-js-pure/internals/create-property.js
var require_create_property = __commonJS({
  "node_modules/core-js-pure/internals/create-property.js"(exports, module2) {
    "use strict";
    var toPropertyKey = require_to_property_key();
    var definePropertyModule = require_object_define_property();
    var createPropertyDescriptor = require_create_property_descriptor();
    module2.exports = function(object, key, value) {
      var propertyKey = toPropertyKey(key);
      if (propertyKey in object)
        definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
      else
        object[propertyKey] = value;
    };
  }
});

// node_modules/core-js-pure/internals/array-method-has-species-support.js
var require_array_method_has_species_support = __commonJS({
  "node_modules/core-js-pure/internals/array-method-has-species-support.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var SPECIES = wellKnownSymbol("species");
    module2.exports = function(METHOD_NAME) {
      return V8_VERSION >= 51 || !fails(function() {
        var array = [];
        var constructor = array.constructor = {};
        constructor[SPECIES] = function() {
          return { foo: 1 };
        };
        return array[METHOD_NAME](Boolean).foo !== 1;
      });
    };
  }
});

// node_modules/core-js-pure/internals/array-slice.js
var require_array_slice = __commonJS({
  "node_modules/core-js-pure/internals/array-slice.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    module2.exports = uncurryThis([].slice);
  }
});

// node_modules/core-js-pure/modules/es.array.slice.js
var require_es_array_slice = __commonJS({
  "node_modules/core-js-pure/modules/es.array.slice.js"() {
    "use strict";
    var $ = require_export();
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var toIndexedObject = require_to_indexed_object();
    var createProperty = require_create_property();
    var wellKnownSymbol = require_well_known_symbol();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var nativeSlice = require_array_slice();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    var max = Math.max;
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      slice: function slice(start, end) {
        var O = toIndexedObject(this);
        var length = lengthOfArrayLike(O);
        var k = toAbsoluteIndex(start, length);
        var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
        var Constructor, result, n;
        if (isArray(O)) {
          Constructor = O.constructor;
          if (isConstructor(Constructor) && (Constructor === $Array || isArray(Constructor.prototype))) {
            Constructor = void 0;
          } else if (isObject(Constructor)) {
            Constructor = Constructor[SPECIES];
            if (Constructor === null)
              Constructor = void 0;
          }
          if (Constructor === $Array || Constructor === void 0) {
            return nativeSlice(O, k, fin);
          }
        }
        result = new (Constructor === void 0 ? $Array : Constructor)(max(fin - k, 0));
        for (n = 0; k < fin; k++, n++)
          if (k in O)
            createProperty(result, n, O[k]);
        result.length = n;
        return result;
      }
    });
  }
});

// node_modules/core-js-pure/internals/entry-virtual.js
var require_entry_virtual = __commonJS({
  "node_modules/core-js-pure/internals/entry-virtual.js"(exports, module2) {
    "use strict";
    var path3 = require_path();
    module2.exports = function(CONSTRUCTOR) {
      return path3[CONSTRUCTOR + "Prototype"];
    };
  }
});

// node_modules/core-js-pure/es/array/virtual/slice.js
var require_slice = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/slice.js"(exports, module2) {
    "use strict";
    require_es_array_slice();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").slice;
  }
});

// node_modules/core-js-pure/es/instance/slice.js
var require_slice2 = __commonJS({
  "node_modules/core-js-pure/es/instance/slice.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_slice();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.slice;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.slice ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/slice.js
var require_slice3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/slice.js"(exports, module2) {
    "use strict";
    var parent = require_slice2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js
var require_slice4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/slice.js"(exports, module2) {
    module2.exports = require_slice3();
  }
});

// node_modules/core-js-pure/internals/to-string.js
var require_to_string = __commonJS({
  "node_modules/core-js-pure/internals/to-string.js"(exports, module2) {
    "use strict";
    var classof = require_classof();
    var $String = String;
    module2.exports = function(argument) {
      if (classof(argument) === "Symbol")
        throw TypeError("Cannot convert a Symbol value to a string");
      return $String(argument);
    };
  }
});

// node_modules/core-js-pure/internals/string-multibyte.js
var require_string_multibyte = __commonJS({
  "node_modules/core-js-pure/internals/string-multibyte.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var toIntegerOrInfinity = require_to_integer_or_infinity();
    var toString = require_to_string();
    var requireObjectCoercible = require_require_object_coercible();
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var stringSlice = uncurryThis("".slice);
    var createMethod = function(CONVERT_TO_STRING) {
      return function($this, pos) {
        var S = toString(requireObjectCoercible($this));
        var position = toIntegerOrInfinity(pos);
        var size = S.length;
        var first, second;
        if (position < 0 || position >= size)
          return CONVERT_TO_STRING ? "" : void 0;
        first = charCodeAt(S, position);
        return first < 55296 || first > 56319 || position + 1 === size || (second = charCodeAt(S, position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? charAt(S, position) : first : CONVERT_TO_STRING ? stringSlice(S, position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
      };
    };
    module2.exports = {
      // `String.prototype.codePointAt` method
      // https://tc39.es/ecma262/#sec-string.prototype.codepointat
      codeAt: createMethod(false),
      // `String.prototype.at` method
      // https://github.com/mathiasbynens/String.prototype.at
      charAt: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/internals/weak-map-basic-detection.js
var require_weak_map_basic_detection = __commonJS({
  "node_modules/core-js-pure/internals/weak-map-basic-detection.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var isCallable = require_is_callable();
    var WeakMap = global2.WeakMap;
    module2.exports = isCallable(WeakMap) && /native code/.test(String(WeakMap));
  }
});

// node_modules/core-js-pure/internals/shared-key.js
var require_shared_key = __commonJS({
  "node_modules/core-js-pure/internals/shared-key.js"(exports, module2) {
    "use strict";
    var shared = require_shared();
    var uid = require_uid();
    var keys = shared("keys");
    module2.exports = function(key) {
      return keys[key] || (keys[key] = uid(key));
    };
  }
});

// node_modules/core-js-pure/internals/hidden-keys.js
var require_hidden_keys = __commonJS({
  "node_modules/core-js-pure/internals/hidden-keys.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/core-js-pure/internals/internal-state.js
var require_internal_state = __commonJS({
  "node_modules/core-js-pure/internals/internal-state.js"(exports, module2) {
    "use strict";
    var NATIVE_WEAK_MAP = require_weak_map_basic_detection();
    var global2 = require_global();
    var isObject = require_is_object();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var shared = require_shared_store();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var OBJECT_ALREADY_INITIALIZED = "Object already initialized";
    var TypeError2 = global2.TypeError;
    var WeakMap = global2.WeakMap;
    var set;
    var get;
    var has;
    var enforce = function(it) {
      return has(it) ? get(it) : set(it, {});
    };
    var getterFor = function(TYPE) {
      return function(it) {
        var state;
        if (!isObject(it) || (state = get(it)).type !== TYPE) {
          throw TypeError2("Incompatible receiver, " + TYPE + " required");
        }
        return state;
      };
    };
    if (NATIVE_WEAK_MAP || shared.state) {
      store = shared.state || (shared.state = new WeakMap());
      store.get = store.get;
      store.has = store.has;
      store.set = store.set;
      set = function(it, metadata) {
        if (store.has(it))
          throw TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        store.set(it, metadata);
        return metadata;
      };
      get = function(it) {
        return store.get(it) || {};
      };
      has = function(it) {
        return store.has(it);
      };
    } else {
      STATE = sharedKey("state");
      hiddenKeys[STATE] = true;
      set = function(it, metadata) {
        if (hasOwn(it, STATE))
          throw TypeError2(OBJECT_ALREADY_INITIALIZED);
        metadata.facade = it;
        createNonEnumerableProperty(it, STATE, metadata);
        return metadata;
      };
      get = function(it) {
        return hasOwn(it, STATE) ? it[STATE] : {};
      };
      has = function(it) {
        return hasOwn(it, STATE);
      };
    }
    var store;
    var STATE;
    module2.exports = {
      set,
      get,
      has,
      enforce,
      getterFor
    };
  }
});

// node_modules/core-js-pure/internals/function-name.js
var require_function_name = __commonJS({
  "node_modules/core-js-pure/internals/function-name.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var hasOwn = require_has_own_property();
    var FunctionPrototype = Function.prototype;
    var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;
    var EXISTS = hasOwn(FunctionPrototype, "name");
    var PROPER = EXISTS && function something() {
    }.name === "something";
    var CONFIGURABLE = EXISTS && (!DESCRIPTORS || DESCRIPTORS && getDescriptor(FunctionPrototype, "name").configurable);
    module2.exports = {
      EXISTS,
      PROPER,
      CONFIGURABLE
    };
  }
});

// node_modules/core-js-pure/internals/array-includes.js
var require_array_includes = __commonJS({
  "node_modules/core-js-pure/internals/array-includes.js"(exports, module2) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createMethod = function(IS_INCLUDES) {
      return function($this, el, fromIndex) {
        var O = toIndexedObject($this);
        var length = lengthOfArrayLike(O);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        if (IS_INCLUDES && el != el)
          while (length > index) {
            value = O[index++];
            if (value != value)
              return true;
          }
        else
          for (; length > index; index++) {
            if ((IS_INCLUDES || index in O) && O[index] === el)
              return IS_INCLUDES || index || 0;
          }
        return !IS_INCLUDES && -1;
      };
    };
    module2.exports = {
      // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes
      includes: createMethod(true),
      // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof
      indexOf: createMethod(false)
    };
  }
});

// node_modules/core-js-pure/internals/object-keys-internal.js
var require_object_keys_internal = __commonJS({
  "node_modules/core-js-pure/internals/object-keys-internal.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var hasOwn = require_has_own_property();
    var toIndexedObject = require_to_indexed_object();
    var indexOf = require_array_includes().indexOf;
    var hiddenKeys = require_hidden_keys();
    var push = uncurryThis([].push);
    module2.exports = function(object, names) {
      var O = toIndexedObject(object);
      var i = 0;
      var result = [];
      var key;
      for (key in O)
        !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
      while (names.length > i)
        if (hasOwn(O, key = names[i++])) {
          ~indexOf(result, key) || push(result, key);
        }
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/enum-bug-keys.js
var require_enum_bug_keys = __commonJS({
  "node_modules/core-js-pure/internals/enum-bug-keys.js"(exports, module2) {
    "use strict";
    module2.exports = [
      "constructor",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "toLocaleString",
      "toString",
      "valueOf"
    ];
  }
});

// node_modules/core-js-pure/internals/object-keys.js
var require_object_keys = __commonJS({
  "node_modules/core-js-pure/internals/object-keys.js"(exports, module2) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    module2.exports = Object.keys || function keys(O) {
      return internalObjectKeys(O, enumBugKeys);
    };
  }
});

// node_modules/core-js-pure/internals/object-define-properties.js
var require_object_define_properties = __commonJS({
  "node_modules/core-js-pure/internals/object-define-properties.js"(exports) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var V8_PROTOTYPE_DEFINE_BUG = require_v8_prototype_define_bug();
    var definePropertyModule = require_object_define_property();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var objectKeys = require_object_keys();
    exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
      anObject(O);
      var props = toIndexedObject(Properties);
      var keys = objectKeys(Properties);
      var length = keys.length;
      var index = 0;
      var key;
      while (length > index)
        definePropertyModule.f(O, key = keys[index++], props[key]);
      return O;
    };
  }
});

// node_modules/core-js-pure/internals/html.js
var require_html = __commonJS({
  "node_modules/core-js-pure/internals/html.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    module2.exports = getBuiltIn("document", "documentElement");
  }
});

// node_modules/core-js-pure/internals/object-create.js
var require_object_create = __commonJS({
  "node_modules/core-js-pure/internals/object-create.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    var definePropertiesModule = require_object_define_properties();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = require_hidden_keys();
    var html = require_html();
    var documentCreateElement = require_document_create_element();
    var sharedKey = require_shared_key();
    var GT = ">";
    var LT = "<";
    var PROTOTYPE = "prototype";
    var SCRIPT = "script";
    var IE_PROTO = sharedKey("IE_PROTO");
    var EmptyConstructor = function() {
    };
    var scriptTag = function(content) {
      return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
    };
    var NullProtoObjectViaActiveX = function(activeXDocument2) {
      activeXDocument2.write(scriptTag(""));
      activeXDocument2.close();
      var temp = activeXDocument2.parentWindow.Object;
      activeXDocument2 = null;
      return temp;
    };
    var NullProtoObjectViaIFrame = function() {
      var iframe = documentCreateElement("iframe");
      var JS = "java" + SCRIPT + ":";
      var iframeDocument;
      iframe.style.display = "none";
      html.appendChild(iframe);
      iframe.src = String(JS);
      iframeDocument = iframe.contentWindow.document;
      iframeDocument.open();
      iframeDocument.write(scriptTag("document.F=Object"));
      iframeDocument.close();
      return iframeDocument.F;
    };
    var activeXDocument;
    var NullProtoObject = function() {
      try {
        activeXDocument = new ActiveXObject("htmlfile");
      } catch (error) {
      }
      NullProtoObject = typeof document != "undefined" ? document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() : NullProtoObjectViaActiveX(activeXDocument);
      var length = enumBugKeys.length;
      while (length--)
        delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
      return NullProtoObject();
    };
    hiddenKeys[IE_PROTO] = true;
    module2.exports = Object.create || function create(O, Properties) {
      var result;
      if (O !== null) {
        EmptyConstructor[PROTOTYPE] = anObject(O);
        result = new EmptyConstructor();
        EmptyConstructor[PROTOTYPE] = null;
        result[IE_PROTO] = O;
      } else
        result = NullProtoObject();
      return Properties === void 0 ? result : definePropertiesModule.f(result, Properties);
    };
  }
});

// node_modules/core-js-pure/internals/correct-prototype-getter.js
var require_correct_prototype_getter = __commonJS({
  "node_modules/core-js-pure/internals/correct-prototype-getter.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = !fails(function() {
      function F() {
      }
      F.prototype.constructor = null;
      return Object.getPrototypeOf(new F()) !== F.prototype;
    });
  }
});

// node_modules/core-js-pure/internals/object-get-prototype-of.js
var require_object_get_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-get-prototype-of.js"(exports, module2) {
    "use strict";
    var hasOwn = require_has_own_property();
    var isCallable = require_is_callable();
    var toObject = require_to_object();
    var sharedKey = require_shared_key();
    var CORRECT_PROTOTYPE_GETTER = require_correct_prototype_getter();
    var IE_PROTO = sharedKey("IE_PROTO");
    var $Object = Object;
    var ObjectPrototype = $Object.prototype;
    module2.exports = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function(O) {
      var object = toObject(O);
      if (hasOwn(object, IE_PROTO))
        return object[IE_PROTO];
      var constructor = object.constructor;
      if (isCallable(constructor) && object instanceof constructor) {
        return constructor.prototype;
      }
      return object instanceof $Object ? ObjectPrototype : null;
    };
  }
});

// node_modules/core-js-pure/internals/define-built-in.js
var require_define_built_in = __commonJS({
  "node_modules/core-js-pure/internals/define-built-in.js"(exports, module2) {
    "use strict";
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    module2.exports = function(target, key, value, options) {
      if (options && options.enumerable)
        target[key] = value;
      else
        createNonEnumerableProperty(target, key, value);
      return target;
    };
  }
});

// node_modules/core-js-pure/internals/iterators-core.js
var require_iterators_core = __commonJS({
  "node_modules/core-js-pure/internals/iterators-core.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    var isCallable = require_is_callable();
    var isObject = require_is_object();
    var create = require_object_create();
    var getPrototypeOf = require_object_get_prototype_of();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var IS_PURE = require_is_pure();
    var ITERATOR = wellKnownSymbol("iterator");
    var BUGGY_SAFARI_ITERATORS = false;
    var IteratorPrototype;
    var PrototypeOfArrayIteratorPrototype;
    var arrayIterator;
    if ([].keys) {
      arrayIterator = [].keys();
      if (!("next" in arrayIterator))
        BUGGY_SAFARI_ITERATORS = true;
      else {
        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
        if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
          IteratorPrototype = PrototypeOfArrayIteratorPrototype;
      }
    }
    var NEW_ITERATOR_PROTOTYPE = !isObject(IteratorPrototype) || fails(function() {
      var test = {};
      return IteratorPrototype[ITERATOR].call(test) !== test;
    });
    if (NEW_ITERATOR_PROTOTYPE)
      IteratorPrototype = {};
    else if (IS_PURE)
      IteratorPrototype = create(IteratorPrototype);
    if (!isCallable(IteratorPrototype[ITERATOR])) {
      defineBuiltIn(IteratorPrototype, ITERATOR, function() {
        return this;
      });
    }
    module2.exports = {
      IteratorPrototype,
      BUGGY_SAFARI_ITERATORS
    };
  }
});

// node_modules/core-js-pure/internals/object-to-string.js
var require_object_to_string = __commonJS({
  "node_modules/core-js-pure/internals/object-to-string.js"(exports, module2) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var classof = require_classof();
    module2.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
      return "[object " + classof(this) + "]";
    };
  }
});

// node_modules/core-js-pure/internals/set-to-string-tag.js
var require_set_to_string_tag = __commonJS({
  "node_modules/core-js-pure/internals/set-to-string-tag.js"(exports, module2) {
    "use strict";
    var TO_STRING_TAG_SUPPORT = require_to_string_tag_support();
    var defineProperty = require_object_define_property().f;
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var hasOwn = require_has_own_property();
    var toString = require_object_to_string();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    module2.exports = function(it, TAG, STATIC, SET_METHOD) {
      if (it) {
        var target = STATIC ? it : it.prototype;
        if (!hasOwn(target, TO_STRING_TAG)) {
          defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
        }
        if (SET_METHOD && !TO_STRING_TAG_SUPPORT) {
          createNonEnumerableProperty(target, "toString", toString);
        }
      }
    };
  }
});

// node_modules/core-js-pure/internals/iterators.js
var require_iterators = __commonJS({
  "node_modules/core-js-pure/internals/iterators.js"(exports, module2) {
    "use strict";
    module2.exports = {};
  }
});

// node_modules/core-js-pure/internals/iterator-create-constructor.js
var require_iterator_create_constructor = __commonJS({
  "node_modules/core-js-pure/internals/iterator-create-constructor.js"(exports, module2) {
    "use strict";
    var IteratorPrototype = require_iterators_core().IteratorPrototype;
    var create = require_object_create();
    var createPropertyDescriptor = require_create_property_descriptor();
    var setToStringTag = require_set_to_string_tag();
    var Iterators = require_iterators();
    var returnThis = function() {
      return this;
    };
    module2.exports = function(IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
      var TO_STRING_TAG = NAME + " Iterator";
      IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
      setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
      Iterators[TO_STRING_TAG] = returnThis;
      return IteratorConstructor;
    };
  }
});

// node_modules/core-js-pure/internals/function-uncurry-this-accessor.js
var require_function_uncurry_this_accessor = __commonJS({
  "node_modules/core-js-pure/internals/function-uncurry-this-accessor.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    module2.exports = function(object, key, method) {
      try {
        return uncurryThis(aCallable(Object.getOwnPropertyDescriptor(object, key)[method]));
      } catch (error) {
      }
    };
  }
});

// node_modules/core-js-pure/internals/a-possible-prototype.js
var require_a_possible_prototype = __commonJS({
  "node_modules/core-js-pure/internals/a-possible-prototype.js"(exports, module2) {
    "use strict";
    var isCallable = require_is_callable();
    var $String = String;
    var $TypeError = TypeError;
    module2.exports = function(argument) {
      if (typeof argument == "object" || isCallable(argument))
        return argument;
      throw $TypeError("Can't set " + $String(argument) + " as a prototype");
    };
  }
});

// node_modules/core-js-pure/internals/object-set-prototype-of.js
var require_object_set_prototype_of = __commonJS({
  "node_modules/core-js-pure/internals/object-set-prototype-of.js"(exports, module2) {
    "use strict";
    var uncurryThisAccessor = require_function_uncurry_this_accessor();
    var anObject = require_an_object();
    var aPossiblePrototype = require_a_possible_prototype();
    module2.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
      var CORRECT_SETTER = false;
      var test = {};
      var setter;
      try {
        setter = uncurryThisAccessor(Object.prototype, "__proto__", "set");
        setter(test, []);
        CORRECT_SETTER = test instanceof Array;
      } catch (error) {
      }
      return function setPrototypeOf(O, proto) {
        anObject(O);
        aPossiblePrototype(proto);
        if (CORRECT_SETTER)
          setter(O, proto);
        else
          O.__proto__ = proto;
        return O;
      };
    }() : void 0);
  }
});

// node_modules/core-js-pure/internals/iterator-define.js
var require_iterator_define = __commonJS({
  "node_modules/core-js-pure/internals/iterator-define.js"(exports, module2) {
    "use strict";
    var $ = require_export();
    var call = require_function_call();
    var IS_PURE = require_is_pure();
    var FunctionName = require_function_name();
    var isCallable = require_is_callable();
    var createIteratorConstructor = require_iterator_create_constructor();
    var getPrototypeOf = require_object_get_prototype_of();
    var setPrototypeOf = require_object_set_prototype_of();
    var setToStringTag = require_set_to_string_tag();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var defineBuiltIn = require_define_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var IteratorsCore = require_iterators_core();
    var PROPER_FUNCTION_NAME = FunctionName.PROPER;
    var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
    var IteratorPrototype = IteratorsCore.IteratorPrototype;
    var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
    var ITERATOR = wellKnownSymbol("iterator");
    var KEYS = "keys";
    var VALUES = "values";
    var ENTRIES = "entries";
    var returnThis = function() {
      return this;
    };
    module2.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
      createIteratorConstructor(IteratorConstructor, NAME, next);
      var getIterationMethod = function(KIND) {
        if (KIND === DEFAULT && defaultIterator)
          return defaultIterator;
        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
          return IterablePrototype[KIND];
        switch (KIND) {
          case KEYS:
            return function keys() {
              return new IteratorConstructor(this, KIND);
            };
          case VALUES:
            return function values() {
              return new IteratorConstructor(this, KIND);
            };
          case ENTRIES:
            return function entries() {
              return new IteratorConstructor(this, KIND);
            };
        }
        return function() {
          return new IteratorConstructor(this);
        };
      };
      var TO_STRING_TAG = NAME + " Iterator";
      var INCORRECT_VALUES_NAME = false;
      var IterablePrototype = Iterable.prototype;
      var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
      var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
      var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
      var CurrentIteratorPrototype, methods, KEY;
      if (anyNativeIterator) {
        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
        if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
          if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
            if (setPrototypeOf) {
              setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
            } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
              defineBuiltIn(CurrentIteratorPrototype, ITERATOR, returnThis);
            }
          }
          setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
          if (IS_PURE)
            Iterators[TO_STRING_TAG] = returnThis;
        }
      }
      if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
        if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
          createNonEnumerableProperty(IterablePrototype, "name", VALUES);
        } else {
          INCORRECT_VALUES_NAME = true;
          defaultIterator = function values() {
            return call(nativeIterator, this);
          };
        }
      }
      if (DEFAULT) {
        methods = {
          values: getIterationMethod(VALUES),
          keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
          entries: getIterationMethod(ENTRIES)
        };
        if (FORCED)
          for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              defineBuiltIn(IterablePrototype, KEY, methods[KEY]);
            }
          }
        else
          $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
      }
      if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
        defineBuiltIn(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
      }
      Iterators[NAME] = defaultIterator;
      return methods;
    };
  }
});

// node_modules/core-js-pure/internals/create-iter-result-object.js
var require_create_iter_result_object = __commonJS({
  "node_modules/core-js-pure/internals/create-iter-result-object.js"(exports, module2) {
    "use strict";
    module2.exports = function(value, done) {
      return { value, done };
    };
  }
});

// node_modules/core-js-pure/modules/es.string.iterator.js
var require_es_string_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.string.iterator.js"() {
    "use strict";
    var charAt = require_string_multibyte().charAt;
    var toString = require_to_string();
    var InternalStateModule = require_internal_state();
    var defineIterator = require_iterator_define();
    var createIterResultObject = require_create_iter_result_object();
    var STRING_ITERATOR = "String Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
    defineIterator(String, "String", function(iterated) {
      setInternalState(this, {
        type: STRING_ITERATOR,
        string: toString(iterated),
        index: 0
      });
    }, function next() {
      var state = getInternalState(this);
      var string = state.string;
      var index = state.index;
      var point;
      if (index >= string.length)
        return createIterResultObject(void 0, true);
      point = charAt(string, index);
      state.index += point.length;
      return createIterResultObject(point, false);
    });
  }
});

// node_modules/core-js-pure/internals/iterator-close.js
var require_iterator_close = __commonJS({
  "node_modules/core-js-pure/internals/iterator-close.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var anObject = require_an_object();
    var getMethod = require_get_method();
    module2.exports = function(iterator, kind, value) {
      var innerResult, innerError;
      anObject(iterator);
      try {
        innerResult = getMethod(iterator, "return");
        if (!innerResult) {
          if (kind === "throw")
            throw value;
          return value;
        }
        innerResult = call(innerResult, iterator);
      } catch (error) {
        innerError = true;
        innerResult = error;
      }
      if (kind === "throw")
        throw value;
      if (innerError)
        throw innerResult;
      anObject(innerResult);
      return value;
    };
  }
});

// node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js
var require_call_with_safe_iteration_closing = __commonJS({
  "node_modules/core-js-pure/internals/call-with-safe-iteration-closing.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    var iteratorClose = require_iterator_close();
    module2.exports = function(iterator, fn, value, ENTRIES) {
      try {
        return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
      } catch (error) {
        iteratorClose(iterator, "throw", error);
      }
    };
  }
});

// node_modules/core-js-pure/internals/is-array-iterator-method.js
var require_is_array_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/is-array-iterator-method.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var Iterators = require_iterators();
    var ITERATOR = wellKnownSymbol("iterator");
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator-method.js
var require_get_iterator_method = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator-method.js"(exports, module2) {
    "use strict";
    var classof = require_classof();
    var getMethod = require_get_method();
    var isNullOrUndefined = require_is_null_or_undefined();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    module2.exports = function(it) {
      if (!isNullOrUndefined(it))
        return getMethod(it, ITERATOR) || getMethod(it, "@@iterator") || Iterators[classof(it)];
    };
  }
});

// node_modules/core-js-pure/internals/get-iterator.js
var require_get_iterator = __commonJS({
  "node_modules/core-js-pure/internals/get-iterator.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var aCallable = require_a_callable();
    var anObject = require_an_object();
    var tryToString = require_try_to_string();
    var getIteratorMethod = require_get_iterator_method();
    var $TypeError = TypeError;
    module2.exports = function(argument, usingIterator) {
      var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
      if (aCallable(iteratorMethod))
        return anObject(call(iteratorMethod, argument));
      throw $TypeError(tryToString(argument) + " is not iterable");
    };
  }
});

// node_modules/core-js-pure/internals/array-from.js
var require_array_from = __commonJS({
  "node_modules/core-js-pure/internals/array-from.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind_context();
    var call = require_function_call();
    var toObject = require_to_object();
    var callWithSafeIterationClosing = require_call_with_safe_iteration_closing();
    var isArrayIteratorMethod = require_is_array_iterator_method();
    var isConstructor = require_is_constructor();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var getIterator = require_get_iterator();
    var getIteratorMethod = require_get_iterator_method();
    var $Array = Array;
    module2.exports = function from(arrayLike) {
      var O = toObject(arrayLike);
      var IS_CONSTRUCTOR = isConstructor(this);
      var argumentsLength = arguments.length;
      var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
      var mapping = mapfn !== void 0;
      if (mapping)
        mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : void 0);
      var iteratorMethod = getIteratorMethod(O);
      var index = 0;
      var length, result, step, iterator, next, value;
      if (iteratorMethod && !(this === $Array && isArrayIteratorMethod(iteratorMethod))) {
        iterator = getIterator(O, iteratorMethod);
        next = iterator.next;
        result = IS_CONSTRUCTOR ? new this() : [];
        for (; !(step = call(next, iterator)).done; index++) {
          value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
          createProperty(result, index, value);
        }
      } else {
        length = lengthOfArrayLike(O);
        result = IS_CONSTRUCTOR ? new this(length) : $Array(length);
        for (; length > index; index++) {
          value = mapping ? mapfn(O[index], index) : O[index];
          createProperty(result, index, value);
        }
      }
      result.length = index;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/check-correctness-of-iteration.js
var require_check_correctness_of_iteration = __commonJS({
  "node_modules/core-js-pure/internals/check-correctness-of-iteration.js"(exports, module2) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var ITERATOR = wellKnownSymbol("iterator");
    var SAFE_CLOSING = false;
    try {
      called = 0;
      iteratorWithReturn = {
        next: function() {
          return { done: !!called++ };
        },
        "return": function() {
          SAFE_CLOSING = true;
        }
      };
      iteratorWithReturn[ITERATOR] = function() {
        return this;
      };
      Array.from(iteratorWithReturn, function() {
        throw 2;
      });
    } catch (error) {
    }
    var called;
    var iteratorWithReturn;
    module2.exports = function(exec, SKIP_CLOSING) {
      if (!SKIP_CLOSING && !SAFE_CLOSING)
        return false;
      var ITERATION_SUPPORT = false;
      try {
        var object = {};
        object[ITERATOR] = function() {
          return {
            next: function() {
              return { done: ITERATION_SUPPORT = true };
            }
          };
        };
        exec(object);
      } catch (error) {
      }
      return ITERATION_SUPPORT;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.from.js
var require_es_array_from = __commonJS({
  "node_modules/core-js-pure/modules/es.array.from.js"() {
    "use strict";
    var $ = require_export();
    var from = require_array_from();
    var checkCorrectnessOfIteration = require_check_correctness_of_iteration();
    var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
      Array.from(iterable);
    });
    $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
      from
    });
  }
});

// node_modules/core-js-pure/es/array/from.js
var require_from = __commonJS({
  "node_modules/core-js-pure/es/array/from.js"(exports, module2) {
    "use strict";
    require_es_string_iterator();
    require_es_array_from();
    var path3 = require_path();
    module2.exports = path3.Array.from;
  }
});

// node_modules/core-js-pure/stable/array/from.js
var require_from2 = __commonJS({
  "node_modules/core-js-pure/stable/array/from.js"(exports, module2) {
    "use strict";
    var parent = require_from();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js
var require_from3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/from.js"(exports, module2) {
    module2.exports = require_from2();
  }
});

// node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js
var require_does_not_exceed_safe_integer = __commonJS({
  "node_modules/core-js-pure/internals/does-not-exceed-safe-integer.js"(exports, module2) {
    "use strict";
    var $TypeError = TypeError;
    var MAX_SAFE_INTEGER = 9007199254740991;
    module2.exports = function(it) {
      if (it > MAX_SAFE_INTEGER)
        throw $TypeError("Maximum allowed index exceeded");
      return it;
    };
  }
});

// node_modules/core-js-pure/internals/array-species-constructor.js
var require_array_species_constructor = __commonJS({
  "node_modules/core-js-pure/internals/array-species-constructor.js"(exports, module2) {
    "use strict";
    var isArray = require_is_array();
    var isConstructor = require_is_constructor();
    var isObject = require_is_object();
    var wellKnownSymbol = require_well_known_symbol();
    var SPECIES = wellKnownSymbol("species");
    var $Array = Array;
    module2.exports = function(originalArray) {
      var C;
      if (isArray(originalArray)) {
        C = originalArray.constructor;
        if (isConstructor(C) && (C === $Array || isArray(C.prototype)))
          C = void 0;
        else if (isObject(C)) {
          C = C[SPECIES];
          if (C === null)
            C = void 0;
        }
      }
      return C === void 0 ? $Array : C;
    };
  }
});

// node_modules/core-js-pure/internals/array-species-create.js
var require_array_species_create = __commonJS({
  "node_modules/core-js-pure/internals/array-species-create.js"(exports, module2) {
    "use strict";
    var arraySpeciesConstructor = require_array_species_constructor();
    module2.exports = function(originalArray, length) {
      return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
    };
  }
});

// node_modules/core-js-pure/modules/es.array.concat.js
var require_es_array_concat = __commonJS({
  "node_modules/core-js-pure/modules/es.array.concat.js"() {
    "use strict";
    var $ = require_export();
    var fails = require_fails();
    var isArray = require_is_array();
    var isObject = require_is_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var createProperty = require_create_property();
    var arraySpeciesCreate = require_array_species_create();
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var wellKnownSymbol = require_well_known_symbol();
    var V8_VERSION = require_engine_v8_version();
    var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
    var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
      var array = [];
      array[IS_CONCAT_SPREADABLE] = false;
      return array.concat()[0] !== array;
    });
    var isConcatSpreadable = function(O) {
      if (!isObject(O))
        return false;
      var spreadable = O[IS_CONCAT_SPREADABLE];
      return spreadable !== void 0 ? !!spreadable : isArray(O);
    };
    var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !arrayMethodHasSpeciesSupport("concat");
    $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      concat: function concat(arg) {
        var O = toObject(this);
        var A = arraySpeciesCreate(O, 0);
        var n = 0;
        var i, k, length, len, E;
        for (i = -1, length = arguments.length; i < length; i++) {
          E = i === -1 ? O : arguments[i];
          if (isConcatSpreadable(E)) {
            len = lengthOfArrayLike(E);
            doesNotExceedSafeInteger(n + len);
            for (k = 0; k < len; k++, n++)
              if (k in E)
                createProperty(A, n, E[k]);
          } else {
            doesNotExceedSafeInteger(n + 1);
            createProperty(A, n++, E);
          }
        }
        A.length = n;
        return A;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.object.to-string.js
var require_es_object_to_string = __commonJS({
  "node_modules/core-js-pure/modules/es.object.to-string.js"() {
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names.js
var require_object_get_own_property_names = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names.js"(exports) {
    "use strict";
    var internalObjectKeys = require_object_keys_internal();
    var enumBugKeys = require_enum_bug_keys();
    var hiddenKeys = enumBugKeys.concat("length", "prototype");
    exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
      return internalObjectKeys(O, hiddenKeys);
    };
  }
});

// node_modules/core-js-pure/internals/array-slice-simple.js
var require_array_slice_simple = __commonJS({
  "node_modules/core-js-pure/internals/array-slice-simple.js"(exports, module2) {
    "use strict";
    var toAbsoluteIndex = require_to_absolute_index();
    var lengthOfArrayLike = require_length_of_array_like();
    var createProperty = require_create_property();
    var $Array = Array;
    var max = Math.max;
    module2.exports = function(O, start, end) {
      var length = lengthOfArrayLike(O);
      var k = toAbsoluteIndex(start, length);
      var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
      var result = $Array(max(fin - k, 0));
      for (var n = 0; k < fin; k++, n++)
        createProperty(result, n, O[k]);
      result.length = n;
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-names-external.js
var require_object_get_own_property_names_external = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-names-external.js"(exports, module2) {
    "use strict";
    var classof = require_classof_raw();
    var toIndexedObject = require_to_indexed_object();
    var $getOwnPropertyNames = require_object_get_own_property_names().f;
    var arraySlice = require_array_slice_simple();
    var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    var getWindowNames = function(it) {
      try {
        return $getOwnPropertyNames(it);
      } catch (error) {
        return arraySlice(windowNames);
      }
    };
    module2.exports.f = function getOwnPropertyNames(it) {
      return windowNames && classof(it) == "Window" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
    };
  }
});

// node_modules/core-js-pure/internals/object-get-own-property-symbols.js
var require_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/internals/object-get-own-property-symbols.js"(exports) {
    "use strict";
    exports.f = Object.getOwnPropertySymbols;
  }
});

// node_modules/core-js-pure/internals/define-built-in-accessor.js
var require_define_built_in_accessor = __commonJS({
  "node_modules/core-js-pure/internals/define-built-in-accessor.js"(exports, module2) {
    "use strict";
    var defineProperty = require_object_define_property();
    module2.exports = function(target, name, descriptor) {
      return defineProperty.f(target, name, descriptor);
    };
  }
});

// node_modules/core-js-pure/internals/well-known-symbol-wrapped.js
var require_well_known_symbol_wrapped = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol-wrapped.js"(exports) {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    exports.f = wellKnownSymbol;
  }
});

// node_modules/core-js-pure/internals/well-known-symbol-define.js
var require_well_known_symbol_define = __commonJS({
  "node_modules/core-js-pure/internals/well-known-symbol-define.js"(exports, module2) {
    "use strict";
    var path3 = require_path();
    var hasOwn = require_has_own_property();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineProperty = require_object_define_property().f;
    module2.exports = function(NAME) {
      var Symbol2 = path3.Symbol || (path3.Symbol = {});
      if (!hasOwn(Symbol2, NAME))
        defineProperty(Symbol2, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
    };
  }
});

// node_modules/core-js-pure/internals/symbol-define-to-primitive.js
var require_symbol_define_to_primitive = __commonJS({
  "node_modules/core-js-pure/internals/symbol-define-to-primitive.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var getBuiltIn = require_get_built_in();
    var wellKnownSymbol = require_well_known_symbol();
    var defineBuiltIn = require_define_built_in();
    module2.exports = function() {
      var Symbol2 = getBuiltIn("Symbol");
      var SymbolPrototype = Symbol2 && Symbol2.prototype;
      var valueOf = SymbolPrototype && SymbolPrototype.valueOf;
      var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
      if (SymbolPrototype && !SymbolPrototype[TO_PRIMITIVE]) {
        defineBuiltIn(SymbolPrototype, TO_PRIMITIVE, function(hint) {
          return call(valueOf, this);
        }, { arity: 1 });
      }
    };
  }
});

// node_modules/core-js-pure/internals/array-iteration.js
var require_array_iteration = __commonJS({
  "node_modules/core-js-pure/internals/array-iteration.js"(exports, module2) {
    "use strict";
    var bind = require_function_bind_context();
    var uncurryThis = require_function_uncurry_this();
    var IndexedObject = require_indexed_object();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var arraySpeciesCreate = require_array_species_create();
    var push = uncurryThis([].push);
    var createMethod = function(TYPE) {
      var IS_MAP = TYPE == 1;
      var IS_FILTER = TYPE == 2;
      var IS_SOME = TYPE == 3;
      var IS_EVERY = TYPE == 4;
      var IS_FIND_INDEX = TYPE == 6;
      var IS_FILTER_REJECT = TYPE == 7;
      var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
      return function($this, callbackfn, that, specificCreate) {
        var O = toObject($this);
        var self2 = IndexedObject(O);
        var boundFunction = bind(callbackfn, that);
        var length = lengthOfArrayLike(self2);
        var index = 0;
        var create = specificCreate || arraySpeciesCreate;
        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : void 0;
        var value, result;
        for (; length > index; index++)
          if (NO_HOLES || index in self2) {
            value = self2[index];
            result = boundFunction(value, index, O);
            if (TYPE) {
              if (IS_MAP)
                target[index] = result;
              else if (result)
                switch (TYPE) {
                  case 3:
                    return true;
                  case 5:
                    return value;
                  case 6:
                    return index;
                  case 2:
                    push(target, value);
                }
              else
                switch (TYPE) {
                  case 4:
                    return false;
                  case 7:
                    push(target, value);
                }
            }
          }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
      };
    };
    module2.exports = {
      // `Array.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-array.prototype.foreach
      forEach: createMethod(0),
      // `Array.prototype.map` method
      // https://tc39.es/ecma262/#sec-array.prototype.map
      map: createMethod(1),
      // `Array.prototype.filter` method
      // https://tc39.es/ecma262/#sec-array.prototype.filter
      filter: createMethod(2),
      // `Array.prototype.some` method
      // https://tc39.es/ecma262/#sec-array.prototype.some
      some: createMethod(3),
      // `Array.prototype.every` method
      // https://tc39.es/ecma262/#sec-array.prototype.every
      every: createMethod(4),
      // `Array.prototype.find` method
      // https://tc39.es/ecma262/#sec-array.prototype.find
      find: createMethod(5),
      // `Array.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-array.prototype.findIndex
      findIndex: createMethod(6),
      // `Array.prototype.filterReject` method
      // https://github.com/tc39/proposal-array-filtering
      filterReject: createMethod(7)
    };
  }
});

// node_modules/core-js-pure/modules/es.symbol.constructor.js
var require_es_symbol_constructor = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.constructor.js"() {
    "use strict";
    var $ = require_export();
    var global2 = require_global();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var fails = require_fails();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var anObject = require_an_object();
    var toIndexedObject = require_to_indexed_object();
    var toPropertyKey = require_to_property_key();
    var $toString = require_to_string();
    var createPropertyDescriptor = require_create_property_descriptor();
    var nativeObjectCreate = require_object_create();
    var objectKeys = require_object_keys();
    var getOwnPropertyNamesModule = require_object_get_own_property_names();
    var getOwnPropertyNamesExternal = require_object_get_own_property_names_external();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var getOwnPropertyDescriptorModule = require_object_get_own_property_descriptor();
    var definePropertyModule = require_object_define_property();
    var definePropertiesModule = require_object_define_properties();
    var propertyIsEnumerableModule = require_object_property_is_enumerable();
    var defineBuiltIn = require_define_built_in();
    var defineBuiltInAccessor = require_define_built_in_accessor();
    var shared = require_shared();
    var sharedKey = require_shared_key();
    var hiddenKeys = require_hidden_keys();
    var uid = require_uid();
    var wellKnownSymbol = require_well_known_symbol();
    var wrappedWellKnownSymbolModule = require_well_known_symbol_wrapped();
    var defineWellKnownSymbol = require_well_known_symbol_define();
    var defineSymbolToPrimitive = require_symbol_define_to_primitive();
    var setToStringTag = require_set_to_string_tag();
    var InternalStateModule = require_internal_state();
    var $forEach = require_array_iteration().forEach;
    var HIDDEN = sharedKey("hidden");
    var SYMBOL = "Symbol";
    var PROTOTYPE = "prototype";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(SYMBOL);
    var ObjectPrototype = Object[PROTOTYPE];
    var $Symbol = global2.Symbol;
    var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
    var TypeError2 = global2.TypeError;
    var QObject = global2.QObject;
    var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
    var nativeDefineProperty = definePropertyModule.f;
    var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
    var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
    var push = uncurryThis([].push);
    var AllSymbols = shared("symbols");
    var ObjectPrototypeSymbols = shared("op-symbols");
    var WellKnownSymbolsStore = shared("wks");
    var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
    var setSymbolDescriptor = DESCRIPTORS && fails(function() {
      return nativeObjectCreate(nativeDefineProperty({}, "a", {
        get: function() {
          return nativeDefineProperty(this, "a", { value: 7 }).a;
        }
      })).a != 7;
    }) ? function(O, P, Attributes) {
      var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
      if (ObjectPrototypeDescriptor)
        delete ObjectPrototype[P];
      nativeDefineProperty(O, P, Attributes);
      if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
        nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
      }
    } : nativeDefineProperty;
    var wrap = function(tag, description) {
      var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
      setInternalState(symbol, {
        type: SYMBOL,
        tag,
        description
      });
      if (!DESCRIPTORS)
        symbol.description = description;
      return symbol;
    };
    var $defineProperty = function defineProperty(O, P, Attributes) {
      if (O === ObjectPrototype)
        $defineProperty(ObjectPrototypeSymbols, P, Attributes);
      anObject(O);
      var key = toPropertyKey(P);
      anObject(Attributes);
      if (hasOwn(AllSymbols, key)) {
        if (!Attributes.enumerable) {
          if (!hasOwn(O, HIDDEN))
            nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
          O[HIDDEN][key] = true;
        } else {
          if (hasOwn(O, HIDDEN) && O[HIDDEN][key])
            O[HIDDEN][key] = false;
          Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
        }
        return setSymbolDescriptor(O, key, Attributes);
      }
      return nativeDefineProperty(O, key, Attributes);
    };
    var $defineProperties = function defineProperties(O, Properties) {
      anObject(O);
      var properties = toIndexedObject(Properties);
      var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
      $forEach(keys, function(key) {
        if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key))
          $defineProperty(O, key, properties[key]);
      });
      return O;
    };
    var $create = function create(O, Properties) {
      return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
    };
    var $propertyIsEnumerable = function propertyIsEnumerable(V) {
      var P = toPropertyKey(V);
      var enumerable = call(nativePropertyIsEnumerable, this, P);
      if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P))
        return false;
      return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
    };
    var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
      var it = toIndexedObject(O);
      var key = toPropertyKey(P);
      if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key))
        return;
      var descriptor = nativeGetOwnPropertyDescriptor(it, key);
      if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
        descriptor.enumerable = true;
      }
      return descriptor;
    };
    var $getOwnPropertyNames = function getOwnPropertyNames(O) {
      var names = nativeGetOwnPropertyNames(toIndexedObject(O));
      var result = [];
      $forEach(names, function(key) {
        if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key))
          push(result, key);
      });
      return result;
    };
    var $getOwnPropertySymbols = function(O) {
      var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
      var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
      var result = [];
      $forEach(names, function(key) {
        if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
          push(result, AllSymbols[key]);
        }
      });
      return result;
    };
    if (!NATIVE_SYMBOL) {
      $Symbol = function Symbol2() {
        if (isPrototypeOf(SymbolPrototype, this))
          throw TypeError2("Symbol is not a constructor");
        var description = !arguments.length || arguments[0] === void 0 ? void 0 : $toString(arguments[0]);
        var tag = uid(description);
        var setter = function(value) {
          if (this === ObjectPrototype)
            call(setter, ObjectPrototypeSymbols, value);
          if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag))
            this[HIDDEN][tag] = false;
          setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
        };
        if (DESCRIPTORS && USE_SETTER)
          setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
        return wrap(tag, description);
      };
      SymbolPrototype = $Symbol[PROTOTYPE];
      defineBuiltIn(SymbolPrototype, "toString", function toString() {
        return getInternalState(this).tag;
      });
      defineBuiltIn($Symbol, "withoutSetter", function(description) {
        return wrap(uid(description), description);
      });
      propertyIsEnumerableModule.f = $propertyIsEnumerable;
      definePropertyModule.f = $defineProperty;
      definePropertiesModule.f = $defineProperties;
      getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
      getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
      getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
      wrappedWellKnownSymbolModule.f = function(name) {
        return wrap(wellKnownSymbol(name), name);
      };
      if (DESCRIPTORS) {
        defineBuiltInAccessor(SymbolPrototype, "description", {
          configurable: true,
          get: function description() {
            return getInternalState(this).description;
          }
        });
        if (!IS_PURE) {
          defineBuiltIn(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
        }
      }
    }
    $({ global: true, constructor: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
      Symbol: $Symbol
    });
    $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
      defineWellKnownSymbol(name);
    });
    $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
      useSetter: function() {
        USE_SETTER = true;
      },
      useSimple: function() {
        USE_SETTER = false;
      }
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
      // `Object.create` method
      // https://tc39.es/ecma262/#sec-object.create
      create: $create,
      // `Object.defineProperty` method
      // https://tc39.es/ecma262/#sec-object.defineproperty
      defineProperty: $defineProperty,
      // `Object.defineProperties` method
      // https://tc39.es/ecma262/#sec-object.defineproperties
      defineProperties: $defineProperties,
      // `Object.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
      getOwnPropertyDescriptor: $getOwnPropertyDescriptor
    });
    $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
      // `Object.getOwnPropertyNames` method
      // https://tc39.es/ecma262/#sec-object.getownpropertynames
      getOwnPropertyNames: $getOwnPropertyNames
    });
    defineSymbolToPrimitive();
    setToStringTag($Symbol, SYMBOL);
    hiddenKeys[HIDDEN] = true;
  }
});

// node_modules/core-js-pure/internals/symbol-registry-detection.js
var require_symbol_registry_detection = __commonJS({
  "node_modules/core-js-pure/internals/symbol-registry-detection.js"(exports, module2) {
    "use strict";
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    module2.exports = NATIVE_SYMBOL && !!Symbol["for"] && !!Symbol.keyFor;
  }
});

// node_modules/core-js-pure/modules/es.symbol.for.js
var require_es_symbol_for = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.for.js"() {
    "use strict";
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var hasOwn = require_has_own_property();
    var toString = require_to_string();
    var shared = require_shared();
    var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
    var StringToSymbolRegistry = shared("string-to-symbol-registry");
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
      "for": function(key) {
        var string = toString(key);
        if (hasOwn(StringToSymbolRegistry, string))
          return StringToSymbolRegistry[string];
        var symbol = getBuiltIn("Symbol")(string);
        StringToSymbolRegistry[string] = symbol;
        SymbolToStringRegistry[symbol] = string;
        return symbol;
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.symbol.key-for.js
var require_es_symbol_key_for = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.key-for.js"() {
    "use strict";
    var $ = require_export();
    var hasOwn = require_has_own_property();
    var isSymbol = require_is_symbol();
    var tryToString = require_try_to_string();
    var shared = require_shared();
    var NATIVE_SYMBOL_REGISTRY = require_symbol_registry_detection();
    var SymbolToStringRegistry = shared("symbol-to-string-registry");
    $({ target: "Symbol", stat: true, forced: !NATIVE_SYMBOL_REGISTRY }, {
      keyFor: function keyFor(sym) {
        if (!isSymbol(sym))
          throw TypeError(tryToString(sym) + " is not a symbol");
        if (hasOwn(SymbolToStringRegistry, sym))
          return SymbolToStringRegistry[sym];
      }
    });
  }
});

// node_modules/core-js-pure/internals/get-json-replacer-function.js
var require_get_json_replacer_function = __commonJS({
  "node_modules/core-js-pure/internals/get-json-replacer-function.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var isArray = require_is_array();
    var isCallable = require_is_callable();
    var classof = require_classof_raw();
    var toString = require_to_string();
    var push = uncurryThis([].push);
    module2.exports = function(replacer) {
      if (isCallable(replacer))
        return replacer;
      if (!isArray(replacer))
        return;
      var rawLength = replacer.length;
      var keys = [];
      for (var i = 0; i < rawLength; i++) {
        var element = replacer[i];
        if (typeof element == "string")
          push(keys, element);
        else if (typeof element == "number" || classof(element) == "Number" || classof(element) == "String")
          push(keys, toString(element));
      }
      var keysLength = keys.length;
      var root = true;
      return function(key, value) {
        if (root) {
          root = false;
          return value;
        }
        if (isArray(this))
          return value;
        for (var j = 0; j < keysLength; j++)
          if (keys[j] === key)
            return value;
      };
    };
  }
});

// node_modules/core-js-pure/modules/es.json.stringify.js
var require_es_json_stringify = __commonJS({
  "node_modules/core-js-pure/modules/es.json.stringify.js"() {
    "use strict";
    var $ = require_export();
    var getBuiltIn = require_get_built_in();
    var apply = require_function_apply();
    var call = require_function_call();
    var uncurryThis = require_function_uncurry_this();
    var fails = require_fails();
    var isCallable = require_is_callable();
    var isSymbol = require_is_symbol();
    var arraySlice = require_array_slice();
    var getReplacerFunction = require_get_json_replacer_function();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var $String = String;
    var $stringify = getBuiltIn("JSON", "stringify");
    var exec = uncurryThis(/./.exec);
    var charAt = uncurryThis("".charAt);
    var charCodeAt = uncurryThis("".charCodeAt);
    var replace = uncurryThis("".replace);
    var numberToString = uncurryThis(1 .toString);
    var tester = /[\uD800-\uDFFF]/g;
    var low = /^[\uD800-\uDBFF]$/;
    var hi = /^[\uDC00-\uDFFF]$/;
    var WRONG_SYMBOLS_CONVERSION = !NATIVE_SYMBOL || fails(function() {
      var symbol = getBuiltIn("Symbol")();
      return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
    });
    var ILL_FORMED_UNICODE = fails(function() {
      return $stringify("\uDF06\uD834") !== '"\\udf06\\ud834"' || $stringify("\uDEAD") !== '"\\udead"';
    });
    var stringifyWithSymbolsFix = function(it, replacer) {
      var args = arraySlice(arguments);
      var $replacer = getReplacerFunction(replacer);
      if (!isCallable($replacer) && (it === void 0 || isSymbol(it)))
        return;
      args[1] = function(key, value) {
        if (isCallable($replacer))
          value = call($replacer, this, $String(key), value);
        if (!isSymbol(value))
          return value;
      };
      return apply($stringify, null, args);
    };
    var fixIllFormed = function(match, offset, string) {
      var prev = charAt(string, offset - 1);
      var next = charAt(string, offset + 1);
      if (exec(low, match) && !exec(hi, next) || exec(hi, match) && !exec(low, prev)) {
        return "\\u" + numberToString(charCodeAt(match, 0), 16);
      }
      return match;
    };
    if ($stringify) {
      $({ target: "JSON", stat: true, arity: 3, forced: WRONG_SYMBOLS_CONVERSION || ILL_FORMED_UNICODE }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        stringify: function stringify(it, replacer, space) {
          var args = arraySlice(arguments);
          var result = apply(WRONG_SYMBOLS_CONVERSION ? stringifyWithSymbolsFix : $stringify, null, args);
          return ILL_FORMED_UNICODE && typeof result == "string" ? replace(result, tester, fixIllFormed) : result;
        }
      });
    }
  }
});

// node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js
var require_es_object_get_own_property_symbols = __commonJS({
  "node_modules/core-js-pure/modules/es.object.get-own-property-symbols.js"() {
    "use strict";
    var $ = require_export();
    var NATIVE_SYMBOL = require_symbol_constructor_detection();
    var fails = require_fails();
    var getOwnPropertySymbolsModule = require_object_get_own_property_symbols();
    var toObject = require_to_object();
    var FORCED = !NATIVE_SYMBOL || fails(function() {
      getOwnPropertySymbolsModule.f(1);
    });
    $({ target: "Object", stat: true, forced: FORCED }, {
      getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        var $getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return $getOwnPropertySymbols ? $getOwnPropertySymbols(toObject(it)) : [];
      }
    });
  }
});

// node_modules/core-js-pure/modules/es.symbol.js
var require_es_symbol = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.js"() {
    "use strict";
    require_es_symbol_constructor();
    require_es_symbol_for();
    require_es_symbol_key_for();
    require_es_json_stringify();
    require_es_object_get_own_property_symbols();
  }
});

// node_modules/core-js-pure/modules/es.symbol.async-iterator.js
var require_es_symbol_async_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.async-iterator.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("asyncIterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.description.js
var require_es_symbol_description = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.description.js"() {
  }
});

// node_modules/core-js-pure/modules/es.symbol.has-instance.js
var require_es_symbol_has_instance = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.has-instance.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("hasInstance");
  }
});

// node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js
var require_es_symbol_is_concat_spreadable = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.is-concat-spreadable.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("isConcatSpreadable");
  }
});

// node_modules/core-js-pure/modules/es.symbol.iterator.js
var require_es_symbol_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.iterator.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("iterator");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match.js
var require_es_symbol_match = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("match");
  }
});

// node_modules/core-js-pure/modules/es.symbol.match-all.js
var require_es_symbol_match_all = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.match-all.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("matchAll");
  }
});

// node_modules/core-js-pure/modules/es.symbol.replace.js
var require_es_symbol_replace = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.replace.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("replace");
  }
});

// node_modules/core-js-pure/modules/es.symbol.search.js
var require_es_symbol_search = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.search.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("search");
  }
});

// node_modules/core-js-pure/modules/es.symbol.species.js
var require_es_symbol_species = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.species.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("species");
  }
});

// node_modules/core-js-pure/modules/es.symbol.split.js
var require_es_symbol_split = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.split.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("split");
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-primitive.js
var require_es_symbol_to_primitive = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-primitive.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    var defineSymbolToPrimitive = require_symbol_define_to_primitive();
    defineWellKnownSymbol("toPrimitive");
    defineSymbolToPrimitive();
  }
});

// node_modules/core-js-pure/modules/es.symbol.to-string-tag.js
var require_es_symbol_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.to-string-tag.js"() {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var defineWellKnownSymbol = require_well_known_symbol_define();
    var setToStringTag = require_set_to_string_tag();
    defineWellKnownSymbol("toStringTag");
    setToStringTag(getBuiltIn("Symbol"), "Symbol");
  }
});

// node_modules/core-js-pure/modules/es.symbol.unscopables.js
var require_es_symbol_unscopables = __commonJS({
  "node_modules/core-js-pure/modules/es.symbol.unscopables.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("unscopables");
  }
});

// node_modules/core-js-pure/modules/es.json.to-string-tag.js
var require_es_json_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.json.to-string-tag.js"() {
    "use strict";
    var global2 = require_global();
    var setToStringTag = require_set_to_string_tag();
    setToStringTag(global2.JSON, "JSON", true);
  }
});

// node_modules/core-js-pure/modules/es.math.to-string-tag.js
var require_es_math_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.math.to-string-tag.js"() {
  }
});

// node_modules/core-js-pure/modules/es.reflect.to-string-tag.js
var require_es_reflect_to_string_tag = __commonJS({
  "node_modules/core-js-pure/modules/es.reflect.to-string-tag.js"() {
  }
});

// node_modules/core-js-pure/es/symbol/index.js
var require_symbol = __commonJS({
  "node_modules/core-js-pure/es/symbol/index.js"(exports, module2) {
    "use strict";
    require_es_array_concat();
    require_es_object_to_string();
    require_es_symbol();
    require_es_symbol_async_iterator();
    require_es_symbol_description();
    require_es_symbol_has_instance();
    require_es_symbol_is_concat_spreadable();
    require_es_symbol_iterator();
    require_es_symbol_match();
    require_es_symbol_match_all();
    require_es_symbol_replace();
    require_es_symbol_search();
    require_es_symbol_species();
    require_es_symbol_split();
    require_es_symbol_to_primitive();
    require_es_symbol_to_string_tag();
    require_es_symbol_unscopables();
    require_es_json_to_string_tag();
    require_es_math_to_string_tag();
    require_es_reflect_to_string_tag();
    var path3 = require_path();
    module2.exports = path3.Symbol;
  }
});

// node_modules/core-js-pure/internals/add-to-unscopables.js
var require_add_to_unscopables = __commonJS({
  "node_modules/core-js-pure/internals/add-to-unscopables.js"(exports, module2) {
    "use strict";
    module2.exports = function() {
    };
  }
});

// node_modules/core-js-pure/modules/es.array.iterator.js
var require_es_array_iterator = __commonJS({
  "node_modules/core-js-pure/modules/es.array.iterator.js"(exports, module2) {
    "use strict";
    var toIndexedObject = require_to_indexed_object();
    var addToUnscopables = require_add_to_unscopables();
    var Iterators = require_iterators();
    var InternalStateModule = require_internal_state();
    var defineProperty = require_object_define_property().f;
    var defineIterator = require_iterator_define();
    var createIterResultObject = require_create_iter_result_object();
    var IS_PURE = require_is_pure();
    var DESCRIPTORS = require_descriptors();
    var ARRAY_ITERATOR = "Array Iterator";
    var setInternalState = InternalStateModule.set;
    var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
    module2.exports = defineIterator(Array, "Array", function(iterated, kind) {
      setInternalState(this, {
        type: ARRAY_ITERATOR,
        target: toIndexedObject(iterated),
        // target
        index: 0,
        // next index
        kind
        // kind
      });
    }, function() {
      var state = getInternalState(this);
      var target = state.target;
      var kind = state.kind;
      var index = state.index++;
      if (!target || index >= target.length) {
        state.target = void 0;
        return createIterResultObject(void 0, true);
      }
      if (kind == "keys")
        return createIterResultObject(index, false);
      if (kind == "values")
        return createIterResultObject(target[index], false);
      return createIterResultObject([index, target[index]], false);
    }, "values");
    var values = Iterators.Arguments = Iterators.Array;
    addToUnscopables("keys");
    addToUnscopables("values");
    addToUnscopables("entries");
    if (!IS_PURE && DESCRIPTORS && values.name !== "values")
      try {
        defineProperty(values, "name", { value: "values" });
      } catch (error) {
      }
  }
});

// node_modules/core-js-pure/internals/dom-iterables.js
var require_dom_iterables = __commonJS({
  "node_modules/core-js-pure/internals/dom-iterables.js"(exports, module2) {
    "use strict";
    module2.exports = {
      CSSRuleList: 0,
      CSSStyleDeclaration: 0,
      CSSValueList: 0,
      ClientRectList: 0,
      DOMRectList: 0,
      DOMStringList: 0,
      DOMTokenList: 1,
      DataTransferItemList: 0,
      FileList: 0,
      HTMLAllCollection: 0,
      HTMLCollection: 0,
      HTMLFormElement: 0,
      HTMLSelectElement: 0,
      MediaList: 0,
      MimeTypeArray: 0,
      NamedNodeMap: 0,
      NodeList: 1,
      PaintRequestList: 0,
      Plugin: 0,
      PluginArray: 0,
      SVGLengthList: 0,
      SVGNumberList: 0,
      SVGPathSegList: 0,
      SVGPointList: 0,
      SVGStringList: 0,
      SVGTransformList: 0,
      SourceBufferList: 0,
      StyleSheetList: 0,
      TextTrackCueList: 0,
      TextTrackList: 0,
      TouchList: 0
    };
  }
});

// node_modules/core-js-pure/modules/web.dom-collections.iterator.js
var require_web_dom_collections_iterator = __commonJS({
  "node_modules/core-js-pure/modules/web.dom-collections.iterator.js"() {
    "use strict";
    require_es_array_iterator();
    var DOMIterables = require_dom_iterables();
    var global2 = require_global();
    var classof = require_classof();
    var createNonEnumerableProperty = require_create_non_enumerable_property();
    var Iterators = require_iterators();
    var wellKnownSymbol = require_well_known_symbol();
    var TO_STRING_TAG = wellKnownSymbol("toStringTag");
    for (COLLECTION_NAME in DOMIterables) {
      Collection = global2[COLLECTION_NAME];
      CollectionPrototype = Collection && Collection.prototype;
      if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG) {
        createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
      }
      Iterators[COLLECTION_NAME] = Iterators.Array;
    }
    var Collection;
    var CollectionPrototype;
    var COLLECTION_NAME;
  }
});

// node_modules/core-js-pure/stable/symbol/index.js
var require_symbol2 = __commonJS({
  "node_modules/core-js-pure/stable/symbol/index.js"(exports, module2) {
    "use strict";
    var parent = require_symbol();
    require_web_dom_collections_iterator();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js
var require_symbol3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/symbol.js"(exports, module2) {
    module2.exports = require_symbol2();
  }
});

// node_modules/core-js-pure/es/get-iterator-method.js
var require_get_iterator_method2 = __commonJS({
  "node_modules/core-js-pure/es/get-iterator-method.js"(exports, module2) {
    "use strict";
    require_es_array_iterator();
    require_es_string_iterator();
    var getIteratorMethod = require_get_iterator_method();
    module2.exports = getIteratorMethod;
  }
});

// node_modules/core-js-pure/stable/get-iterator-method.js
var require_get_iterator_method3 = __commonJS({
  "node_modules/core-js-pure/stable/get-iterator-method.js"(exports, module2) {
    "use strict";
    var parent = require_get_iterator_method2();
    require_web_dom_collections_iterator();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/actual/get-iterator-method.js
var require_get_iterator_method4 = __commonJS({
  "node_modules/core-js-pure/actual/get-iterator-method.js"(exports, module2) {
    "use strict";
    var parent = require_get_iterator_method3();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/full/get-iterator-method.js
var require_get_iterator_method5 = __commonJS({
  "node_modules/core-js-pure/full/get-iterator-method.js"(exports, module2) {
    "use strict";
    var parent = require_get_iterator_method4();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/get-iterator-method.js
var require_get_iterator_method6 = __commonJS({
  "node_modules/core-js-pure/features/get-iterator-method.js"(exports, module2) {
    "use strict";
    module2.exports = require_get_iterator_method5();
  }
});

// node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js
var require_get_iterator_method7 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js/get-iterator-method.js"(exports, module2) {
    module2.exports = require_get_iterator_method6();
  }
});

// node_modules/core-js-pure/modules/es.array.is-array.js
var require_es_array_is_array = __commonJS({
  "node_modules/core-js-pure/modules/es.array.is-array.js"() {
    "use strict";
    var $ = require_export();
    var isArray = require_is_array();
    $({ target: "Array", stat: true }, {
      isArray
    });
  }
});

// node_modules/core-js-pure/es/array/is-array.js
var require_is_array2 = __commonJS({
  "node_modules/core-js-pure/es/array/is-array.js"(exports, module2) {
    "use strict";
    require_es_array_is_array();
    var path3 = require_path();
    module2.exports = path3.Array.isArray;
  }
});

// node_modules/core-js-pure/stable/array/is-array.js
var require_is_array3 = __commonJS({
  "node_modules/core-js-pure/stable/array/is-array.js"(exports, module2) {
    "use strict";
    var parent = require_is_array2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js
var require_is_array4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/array/is-array.js"(exports, module2) {
    module2.exports = require_is_array3();
  }
});

// node_modules/core-js-pure/actual/array/is-array.js
var require_is_array5 = __commonJS({
  "node_modules/core-js-pure/actual/array/is-array.js"(exports, module2) {
    "use strict";
    var parent = require_is_array3();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/full/array/is-array.js
var require_is_array6 = __commonJS({
  "node_modules/core-js-pure/full/array/is-array.js"(exports, module2) {
    "use strict";
    var parent = require_is_array5();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/is-array.js
var require_is_array7 = __commonJS({
  "node_modules/core-js-pure/features/array/is-array.js"(exports, module2) {
    "use strict";
    module2.exports = require_is_array6();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js
var require_arrayWithHoles = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayWithHoles.js"(exports, module2) {
    var _Array$isArray = require_is_array7();
    function _arrayWithHoles(arr) {
      if (_Array$isArray(arr))
        return arr;
    }
    module2.exports = _arrayWithHoles, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/core-js-pure/modules/esnext.function.metadata.js
var require_esnext_function_metadata = __commonJS({
  "node_modules/core-js-pure/modules/esnext.function.metadata.js"() {
    "use strict";
    var wellKnownSymbol = require_well_known_symbol();
    var defineProperty = require_object_define_property().f;
    var METADATA = wellKnownSymbol("metadata");
    var FunctionPrototype = Function.prototype;
    if (FunctionPrototype[METADATA] === void 0) {
      defineProperty(FunctionPrototype, METADATA, {
        value: null
      });
    }
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js
var require_esnext_symbol_async_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.async-dispose.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("asyncDispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.dispose.js
var require_esnext_symbol_dispose = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.dispose.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("dispose");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata.js
var require_esnext_symbol_metadata = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("metadata");
  }
});

// node_modules/core-js-pure/actual/symbol/index.js
var require_symbol4 = __commonJS({
  "node_modules/core-js-pure/actual/symbol/index.js"(exports, module2) {
    "use strict";
    var parent = require_symbol2();
    require_esnext_function_metadata();
    require_esnext_symbol_async_dispose();
    require_esnext_symbol_dispose();
    require_esnext_symbol_metadata();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/internals/symbol-is-registered.js
var require_symbol_is_registered = __commonJS({
  "node_modules/core-js-pure/internals/symbol-is-registered.js"(exports, module2) {
    "use strict";
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var Symbol2 = getBuiltIn("Symbol");
    var keyFor = Symbol2.keyFor;
    var thisSymbolValue = uncurryThis(Symbol2.prototype.valueOf);
    module2.exports = Symbol2.isRegisteredSymbol || function isRegisteredSymbol(value) {
      try {
        return keyFor(thisSymbolValue(value)) !== void 0;
      } catch (error) {
        return false;
      }
    };
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.is-registered-symbol.js
var require_esnext_symbol_is_registered_symbol = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.is-registered-symbol.js"() {
    "use strict";
    var $ = require_export();
    var isRegisteredSymbol = require_symbol_is_registered();
    $({ target: "Symbol", stat: true }, {
      isRegisteredSymbol
    });
  }
});

// node_modules/core-js-pure/internals/symbol-is-well-known.js
var require_symbol_is_well_known = __commonJS({
  "node_modules/core-js-pure/internals/symbol-is-well-known.js"(exports, module2) {
    "use strict";
    var shared = require_shared();
    var getBuiltIn = require_get_built_in();
    var uncurryThis = require_function_uncurry_this();
    var isSymbol = require_is_symbol();
    var wellKnownSymbol = require_well_known_symbol();
    var Symbol2 = getBuiltIn("Symbol");
    var $isWellKnownSymbol = Symbol2.isWellKnownSymbol;
    var getOwnPropertyNames = getBuiltIn("Object", "getOwnPropertyNames");
    var thisSymbolValue = uncurryThis(Symbol2.prototype.valueOf);
    var WellKnownSymbolsStore = shared("wks");
    for (i = 0, symbolKeys = getOwnPropertyNames(Symbol2), symbolKeysLength = symbolKeys.length; i < symbolKeysLength; i++) {
      try {
        symbolKey = symbolKeys[i];
        if (isSymbol(Symbol2[symbolKey]))
          wellKnownSymbol(symbolKey);
      } catch (error) {
      }
    }
    var symbolKey;
    var i;
    var symbolKeys;
    var symbolKeysLength;
    module2.exports = function isWellKnownSymbol(value) {
      if ($isWellKnownSymbol && $isWellKnownSymbol(value))
        return true;
      try {
        var symbol = thisSymbolValue(value);
        for (var j = 0, keys = getOwnPropertyNames(WellKnownSymbolsStore), keysLength = keys.length; j < keysLength; j++) {
          if (WellKnownSymbolsStore[keys[j]] == symbol)
            return true;
        }
      } catch (error) {
      }
      return false;
    };
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.is-well-known-symbol.js
var require_esnext_symbol_is_well_known_symbol = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.is-well-known-symbol.js"() {
    "use strict";
    var $ = require_export();
    var isWellKnownSymbol = require_symbol_is_well_known();
    $({ target: "Symbol", stat: true, forced: true }, {
      isWellKnownSymbol
    });
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.matcher.js
var require_esnext_symbol_matcher = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.matcher.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("matcher");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.observable.js
var require_esnext_symbol_observable = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.observable.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("observable");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.is-registered.js
var require_esnext_symbol_is_registered = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.is-registered.js"() {
    "use strict";
    var $ = require_export();
    var isRegisteredSymbol = require_symbol_is_registered();
    $({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, {
      isRegistered: isRegisteredSymbol
    });
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.is-well-known.js
var require_esnext_symbol_is_well_known = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.is-well-known.js"() {
    "use strict";
    var $ = require_export();
    var isWellKnownSymbol = require_symbol_is_well_known();
    $({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, {
      isWellKnown: isWellKnownSymbol
    });
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js
var require_esnext_symbol_metadata_key = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.metadata-key.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("metadataKey");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js
var require_esnext_symbol_pattern_match = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.pattern-match.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("patternMatch");
  }
});

// node_modules/core-js-pure/modules/esnext.symbol.replace-all.js
var require_esnext_symbol_replace_all = __commonJS({
  "node_modules/core-js-pure/modules/esnext.symbol.replace-all.js"() {
    "use strict";
    var defineWellKnownSymbol = require_well_known_symbol_define();
    defineWellKnownSymbol("replaceAll");
  }
});

// node_modules/core-js-pure/full/symbol/index.js
var require_symbol5 = __commonJS({
  "node_modules/core-js-pure/full/symbol/index.js"(exports, module2) {
    "use strict";
    var parent = require_symbol4();
    require_esnext_symbol_is_registered_symbol();
    require_esnext_symbol_is_well_known_symbol();
    require_esnext_symbol_matcher();
    require_esnext_symbol_observable();
    require_esnext_symbol_is_registered();
    require_esnext_symbol_is_well_known();
    require_esnext_symbol_metadata_key();
    require_esnext_symbol_pattern_match();
    require_esnext_symbol_replace_all();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/symbol/index.js
var require_symbol6 = __commonJS({
  "node_modules/core-js-pure/features/symbol/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_symbol5();
  }
});

// node_modules/core-js-pure/internals/array-set-length.js
var require_array_set_length = __commonJS({
  "node_modules/core-js-pure/internals/array-set-length.js"(exports, module2) {
    "use strict";
    var DESCRIPTORS = require_descriptors();
    var isArray = require_is_array();
    var $TypeError = TypeError;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var SILENT_ON_NON_WRITABLE_LENGTH_SET = DESCRIPTORS && !function() {
      if (this !== void 0)
        return true;
      try {
        Object.defineProperty([], "length", { writable: false }).length = 1;
      } catch (error) {
        return error instanceof TypeError;
      }
    }();
    module2.exports = SILENT_ON_NON_WRITABLE_LENGTH_SET ? function(O, length) {
      if (isArray(O) && !getOwnPropertyDescriptor(O, "length").writable) {
        throw $TypeError("Cannot set read only .length");
      }
      return O.length = length;
    } : function(O, length) {
      return O.length = length;
    };
  }
});

// node_modules/core-js-pure/modules/es.array.push.js
var require_es_array_push = __commonJS({
  "node_modules/core-js-pure/modules/es.array.push.js"() {
    "use strict";
    var $ = require_export();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var setArrayLength = require_array_set_length();
    var doesNotExceedSafeInteger = require_does_not_exceed_safe_integer();
    var fails = require_fails();
    var INCORRECT_TO_LENGTH = fails(function() {
      return [].push.call({ length: 4294967296 }, 1) !== 4294967297;
    });
    var properErrorOnNonWritableLength = function() {
      try {
        Object.defineProperty([], "length", { writable: false }).push();
      } catch (error) {
        return error instanceof TypeError;
      }
    };
    var FORCED = INCORRECT_TO_LENGTH || !properErrorOnNonWritableLength();
    $({ target: "Array", proto: true, arity: 1, forced: FORCED }, {
      // eslint-disable-next-line no-unused-vars -- required for `.length`
      push: function push(item) {
        var O = toObject(this);
        var len = lengthOfArrayLike(O);
        var argCount = arguments.length;
        doesNotExceedSafeInteger(len + argCount);
        for (var i = 0; i < argCount; i++) {
          O[len] = arguments[i];
          len++;
        }
        setArrayLength(O, len);
        return len;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/push.js
var require_push = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/push.js"(exports, module2) {
    "use strict";
    require_es_array_push();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").push;
  }
});

// node_modules/core-js-pure/es/instance/push.js
var require_push2 = __commonJS({
  "node_modules/core-js-pure/es/instance/push.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_push();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.push;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.push ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/push.js
var require_push3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/push.js"(exports, module2) {
    "use strict";
    var parent = require_push2();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/actual/instance/push.js
var require_push4 = __commonJS({
  "node_modules/core-js-pure/actual/instance/push.js"(exports, module2) {
    "use strict";
    var parent = require_push3();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/full/instance/push.js
var require_push5 = __commonJS({
  "node_modules/core-js-pure/full/instance/push.js"(exports, module2) {
    "use strict";
    var parent = require_push4();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/push.js
var require_push6 = __commonJS({
  "node_modules/core-js-pure/features/instance/push.js"(exports, module2) {
    "use strict";
    module2.exports = require_push5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js
var require_iterableToArrayLimit = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/iterableToArrayLimit.js"(exports, module2) {
    var _Symbol = require_symbol6();
    var _getIteratorMethod = require_get_iterator_method6();
    var _pushInstanceProperty = require_push6();
    function _iterableToArrayLimit(arr, i) {
      var _i = null == arr ? null : "undefined" != typeof _Symbol && _getIteratorMethod(arr) || arr["@@iterator"];
      if (null != _i) {
        var _s, _e, _x, _r, _arr = [], _n = true, _d = false;
        try {
          if (_x = (_i = _i.call(arr)).next, 0 === i) {
            if (Object(_i) !== _i)
              return;
            _n = false;
          } else
            for (; !(_n = (_s = _x.call(_i)).done) && (_pushInstanceProperty(_arr).call(_arr, _s.value), _arr.length !== i); _n = true)
              ;
        } catch (err) {
          _d = true, _e = err;
        } finally {
          try {
            if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r))
              return;
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
    }
    module2.exports = _iterableToArrayLimit, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/core-js-pure/actual/instance/slice.js
var require_slice5 = __commonJS({
  "node_modules/core-js-pure/actual/instance/slice.js"(exports, module2) {
    "use strict";
    var parent = require_slice3();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/full/instance/slice.js
var require_slice6 = __commonJS({
  "node_modules/core-js-pure/full/instance/slice.js"(exports, module2) {
    "use strict";
    var parent = require_slice5();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/instance/slice.js
var require_slice7 = __commonJS({
  "node_modules/core-js-pure/features/instance/slice.js"(exports, module2) {
    "use strict";
    module2.exports = require_slice6();
  }
});

// node_modules/core-js-pure/actual/array/from.js
var require_from4 = __commonJS({
  "node_modules/core-js-pure/actual/array/from.js"(exports, module2) {
    "use strict";
    var parent = require_from2();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/full/array/from.js
var require_from5 = __commonJS({
  "node_modules/core-js-pure/full/array/from.js"(exports, module2) {
    "use strict";
    var parent = require_from4();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/features/array/from.js
var require_from6 = __commonJS({
  "node_modules/core-js-pure/features/array/from.js"(exports, module2) {
    "use strict";
    module2.exports = require_from5();
  }
});

// node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/arrayLikeToArray.js"(exports, module2) {
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++)
        arr2[i] = arr[i];
      return arr2;
    }
    module2.exports = _arrayLikeToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/unsupportedIterableToArray.js"(exports, module2) {
    var _sliceInstanceProperty = require_slice7();
    var _Array$from = require_from6();
    var arrayLikeToArray = require_arrayLikeToArray();
    function _unsupportedIterableToArray(o, minLen) {
      var _context;
      if (!o)
        return;
      if (typeof o === "string")
        return arrayLikeToArray(o, minLen);
      var n = _sliceInstanceProperty(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return _Array$from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return arrayLikeToArray(o, minLen);
    }
    module2.exports = _unsupportedIterableToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js
var require_nonIterableRest = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/nonIterableRest.js"(exports, module2) {
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    module2.exports = _nonIterableRest, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js
var require_slicedToArray = __commonJS({
  "node_modules/@babel/runtime-corejs3/helpers/slicedToArray.js"(exports, module2) {
    var arrayWithHoles = require_arrayWithHoles();
    var iterableToArrayLimit = require_iterableToArrayLimit();
    var unsupportedIterableToArray = require_unsupportedIterableToArray();
    var nonIterableRest = require_nonIterableRest();
    function _slicedToArray(arr, i) {
      return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
    }
    module2.exports = _slicedToArray, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/core-js-pure/modules/es.regexp.flags.js
var require_es_regexp_flags = __commonJS({
  "node_modules/core-js-pure/modules/es.regexp.flags.js"() {
  }
});

// node_modules/core-js-pure/internals/regexp-flags.js
var require_regexp_flags = __commonJS({
  "node_modules/core-js-pure/internals/regexp-flags.js"(exports, module2) {
    "use strict";
    var anObject = require_an_object();
    module2.exports = function() {
      var that = anObject(this);
      var result = "";
      if (that.hasIndices)
        result += "d";
      if (that.global)
        result += "g";
      if (that.ignoreCase)
        result += "i";
      if (that.multiline)
        result += "m";
      if (that.dotAll)
        result += "s";
      if (that.unicode)
        result += "u";
      if (that.unicodeSets)
        result += "v";
      if (that.sticky)
        result += "y";
      return result;
    };
  }
});

// node_modules/core-js-pure/internals/regexp-get-flags.js
var require_regexp_get_flags = __commonJS({
  "node_modules/core-js-pure/internals/regexp-get-flags.js"(exports, module2) {
    "use strict";
    var call = require_function_call();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var regExpFlags = require_regexp_flags();
    var RegExpPrototype = RegExp.prototype;
    module2.exports = function(R) {
      var flags = R.flags;
      return flags === void 0 && !("flags" in RegExpPrototype) && !hasOwn(R, "flags") && isPrototypeOf(RegExpPrototype, R) ? call(regExpFlags, R) : flags;
    };
  }
});

// node_modules/core-js-pure/es/regexp/flags.js
var require_flags = __commonJS({
  "node_modules/core-js-pure/es/regexp/flags.js"(exports, module2) {
    "use strict";
    require_es_regexp_flags();
    var getRegExpFlags = require_regexp_get_flags();
    module2.exports = getRegExpFlags;
  }
});

// node_modules/core-js-pure/es/instance/flags.js
var require_flags2 = __commonJS({
  "node_modules/core-js-pure/es/instance/flags.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var flags = require_flags();
    var RegExpPrototype = RegExp.prototype;
    module2.exports = function(it) {
      return it === RegExpPrototype || isPrototypeOf(RegExpPrototype, it) ? flags(it) : it.flags;
    };
  }
});

// node_modules/core-js-pure/stable/instance/flags.js
var require_flags3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/flags.js"(exports, module2) {
    "use strict";
    var parent = require_flags2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/flags.js
var require_flags4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/flags.js"(exports, module2) {
    module2.exports = require_flags3();
  }
});

// node_modules/core-js-pure/internals/delete-property-or-throw.js
var require_delete_property_or_throw = __commonJS({
  "node_modules/core-js-pure/internals/delete-property-or-throw.js"(exports, module2) {
    "use strict";
    var tryToString = require_try_to_string();
    var $TypeError = TypeError;
    module2.exports = function(O, P) {
      if (!delete O[P])
        throw $TypeError("Cannot delete property " + tryToString(P) + " of " + tryToString(O));
    };
  }
});

// node_modules/core-js-pure/internals/array-sort.js
var require_array_sort = __commonJS({
  "node_modules/core-js-pure/internals/array-sort.js"(exports, module2) {
    "use strict";
    var arraySlice = require_array_slice_simple();
    var floor = Math.floor;
    var mergeSort = function(array, comparefn) {
      var length = array.length;
      var middle = floor(length / 2);
      return length < 8 ? insertionSort(array, comparefn) : merge(
        array,
        mergeSort(arraySlice(array, 0, middle), comparefn),
        mergeSort(arraySlice(array, middle), comparefn),
        comparefn
      );
    };
    var insertionSort = function(array, comparefn) {
      var length = array.length;
      var i = 1;
      var element, j;
      while (i < length) {
        j = i;
        element = array[i];
        while (j && comparefn(array[j - 1], element) > 0) {
          array[j] = array[--j];
        }
        if (j !== i++)
          array[j] = element;
      }
      return array;
    };
    var merge = function(array, left, right, comparefn) {
      var llength = left.length;
      var rlength = right.length;
      var lindex = 0;
      var rindex = 0;
      while (lindex < llength || rindex < rlength) {
        array[lindex + rindex] = lindex < llength && rindex < rlength ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++] : lindex < llength ? left[lindex++] : right[rindex++];
      }
      return array;
    };
    module2.exports = mergeSort;
  }
});

// node_modules/core-js-pure/internals/array-method-is-strict.js
var require_array_method_is_strict = __commonJS({
  "node_modules/core-js-pure/internals/array-method-is-strict.js"(exports, module2) {
    "use strict";
    var fails = require_fails();
    module2.exports = function(METHOD_NAME, argument) {
      var method = [][METHOD_NAME];
      return !!method && fails(function() {
        method.call(null, argument || function() {
          return 1;
        }, 1);
      });
    };
  }
});

// node_modules/core-js-pure/internals/engine-ff-version.js
var require_engine_ff_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-ff-version.js"(exports, module2) {
    "use strict";
    var userAgent = require_engine_user_agent();
    var firefox = userAgent.match(/firefox\/(\d+)/i);
    module2.exports = !!firefox && +firefox[1];
  }
});

// node_modules/core-js-pure/internals/engine-is-ie-or-edge.js
var require_engine_is_ie_or_edge = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-ie-or-edge.js"(exports, module2) {
    "use strict";
    var UA = require_engine_user_agent();
    module2.exports = /MSIE|Trident/.test(UA);
  }
});

// node_modules/core-js-pure/internals/engine-webkit-version.js
var require_engine_webkit_version = __commonJS({
  "node_modules/core-js-pure/internals/engine-webkit-version.js"(exports, module2) {
    "use strict";
    var userAgent = require_engine_user_agent();
    var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
    module2.exports = !!webkit && +webkit[1];
  }
});

// node_modules/core-js-pure/modules/es.array.sort.js
var require_es_array_sort = __commonJS({
  "node_modules/core-js-pure/modules/es.array.sort.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this();
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var deletePropertyOrThrow = require_delete_property_or_throw();
    var toString = require_to_string();
    var fails = require_fails();
    var internalSort = require_array_sort();
    var arrayMethodIsStrict = require_array_method_is_strict();
    var FF = require_engine_ff_version();
    var IE_OR_EDGE = require_engine_is_ie_or_edge();
    var V8 = require_engine_v8_version();
    var WEBKIT = require_engine_webkit_version();
    var test = [];
    var nativeSort = uncurryThis(test.sort);
    var push = uncurryThis(test.push);
    var FAILS_ON_UNDEFINED = fails(function() {
      test.sort(void 0);
    });
    var FAILS_ON_NULL = fails(function() {
      test.sort(null);
    });
    var STRICT_METHOD = arrayMethodIsStrict("sort");
    var STABLE_SORT = !fails(function() {
      if (V8)
        return V8 < 70;
      if (FF && FF > 3)
        return;
      if (IE_OR_EDGE)
        return true;
      if (WEBKIT)
        return WEBKIT < 603;
      var result = "";
      var code, chr, value, index;
      for (code = 65; code < 76; code++) {
        chr = String.fromCharCode(code);
        switch (code) {
          case 66:
          case 69:
          case 70:
          case 72:
            value = 3;
            break;
          case 68:
          case 71:
            value = 4;
            break;
          default:
            value = 2;
        }
        for (index = 0; index < 47; index++) {
          test.push({ k: chr + index, v: value });
        }
      }
      test.sort(function(a, b) {
        return b.v - a.v;
      });
      for (index = 0; index < test.length; index++) {
        chr = test[index].k.charAt(0);
        if (result.charAt(result.length - 1) !== chr)
          result += chr;
      }
      return result !== "DGBEFHACIJK";
    });
    var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;
    var getSortCompare = function(comparefn) {
      return function(x, y) {
        if (y === void 0)
          return -1;
        if (x === void 0)
          return 1;
        if (comparefn !== void 0)
          return +comparefn(x, y) || 0;
        return toString(x) > toString(y) ? 1 : -1;
      };
    };
    $({ target: "Array", proto: true, forced: FORCED }, {
      sort: function sort(comparefn) {
        if (comparefn !== void 0)
          aCallable(comparefn);
        var array = toObject(this);
        if (STABLE_SORT)
          return comparefn === void 0 ? nativeSort(array) : nativeSort(array, comparefn);
        var items = [];
        var arrayLength = lengthOfArrayLike(array);
        var itemsLength, index;
        for (index = 0; index < arrayLength; index++) {
          if (index in array)
            push(items, array[index]);
        }
        internalSort(items, getSortCompare(comparefn));
        itemsLength = lengthOfArrayLike(items);
        index = 0;
        while (index < itemsLength)
          array[index] = items[index++];
        while (index < arrayLength)
          deletePropertyOrThrow(array, index++);
        return array;
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/sort.js
var require_sort = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/sort.js"(exports, module2) {
    "use strict";
    require_es_array_sort();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").sort;
  }
});

// node_modules/core-js-pure/es/instance/sort.js
var require_sort2 = __commonJS({
  "node_modules/core-js-pure/es/instance/sort.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_sort();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.sort;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.sort ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/sort.js
var require_sort3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/sort.js"(exports, module2) {
    "use strict";
    var parent = require_sort2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js
var require_sort4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/sort.js"(exports, module2) {
    module2.exports = require_sort3();
  }
});

// node_modules/core-js-pure/internals/whitespaces.js
var require_whitespaces = __commonJS({
  "node_modules/core-js-pure/internals/whitespaces.js"(exports, module2) {
    "use strict";
    module2.exports = "	\n\v\f\r \xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
  }
});

// node_modules/core-js-pure/internals/string-trim.js
var require_string_trim = __commonJS({
  "node_modules/core-js-pure/internals/string-trim.js"(exports, module2) {
    "use strict";
    var uncurryThis = require_function_uncurry_this();
    var requireObjectCoercible = require_require_object_coercible();
    var toString = require_to_string();
    var whitespaces = require_whitespaces();
    var replace = uncurryThis("".replace);
    var ltrim = RegExp("^[" + whitespaces + "]+");
    var rtrim = RegExp("(^|[^" + whitespaces + "])[" + whitespaces + "]+$");
    var createMethod = function(TYPE) {
      return function($this) {
        var string = toString(requireObjectCoercible($this));
        if (TYPE & 1)
          string = replace(string, ltrim, "");
        if (TYPE & 2)
          string = replace(string, rtrim, "$1");
        return string;
      };
    };
    module2.exports = {
      // `String.prototype.{ trimLeft, trimStart }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimstart
      start: createMethod(1),
      // `String.prototype.{ trimRight, trimEnd }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimend
      end: createMethod(2),
      // `String.prototype.trim` method
      // https://tc39.es/ecma262/#sec-string.prototype.trim
      trim: createMethod(3)
    };
  }
});

// node_modules/core-js-pure/internals/number-parse-int.js
var require_number_parse_int = __commonJS({
  "node_modules/core-js-pure/internals/number-parse-int.js"(exports, module2) {
    "use strict";
    var global2 = require_global();
    var fails = require_fails();
    var uncurryThis = require_function_uncurry_this();
    var toString = require_to_string();
    var trim = require_string_trim().trim;
    var whitespaces = require_whitespaces();
    var $parseInt = global2.parseInt;
    var Symbol2 = global2.Symbol;
    var ITERATOR = Symbol2 && Symbol2.iterator;
    var hex = /^[+-]?0x/i;
    var exec = uncurryThis(hex.exec);
    var FORCED = $parseInt(whitespaces + "08") !== 8 || $parseInt(whitespaces + "0x16") !== 22 || ITERATOR && !fails(function() {
      $parseInt(Object(ITERATOR));
    });
    module2.exports = FORCED ? function parseInt2(string, radix) {
      var S = trim(toString(string));
      return $parseInt(S, radix >>> 0 || (exec(hex, S) ? 16 : 10));
    } : $parseInt;
  }
});

// node_modules/core-js-pure/modules/es.parse-int.js
var require_es_parse_int = __commonJS({
  "node_modules/core-js-pure/modules/es.parse-int.js"() {
    "use strict";
    var $ = require_export();
    var $parseInt = require_number_parse_int();
    $({ global: true, forced: parseInt != $parseInt }, {
      parseInt: $parseInt
    });
  }
});

// node_modules/core-js-pure/es/parse-int.js
var require_parse_int = __commonJS({
  "node_modules/core-js-pure/es/parse-int.js"(exports, module2) {
    "use strict";
    require_es_parse_int();
    var path3 = require_path();
    module2.exports = path3.parseInt;
  }
});

// node_modules/core-js-pure/stable/parse-int.js
var require_parse_int2 = __commonJS({
  "node_modules/core-js-pure/stable/parse-int.js"(exports, module2) {
    "use strict";
    var parent = require_parse_int();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js
var require_parse_int3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/parse-int.js"(exports, module2) {
    module2.exports = require_parse_int2();
  }
});

// node_modules/core-js-pure/modules/es.array.index-of.js
var require_es_array_index_of = __commonJS({
  "node_modules/core-js-pure/modules/es.array.index-of.js"() {
    "use strict";
    var $ = require_export();
    var uncurryThis = require_function_uncurry_this_clause();
    var $indexOf = require_array_includes().indexOf;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var nativeIndexOf = uncurryThis([].indexOf);
    var NEGATIVE_ZERO = !!nativeIndexOf && 1 / nativeIndexOf([1], 1, -0) < 0;
    var FORCED = NEGATIVE_ZERO || !arrayMethodIsStrict("indexOf");
    $({ target: "Array", proto: true, forced: FORCED }, {
      indexOf: function indexOf(searchElement) {
        var fromIndex = arguments.length > 1 ? arguments[1] : void 0;
        return NEGATIVE_ZERO ? nativeIndexOf(this, searchElement, fromIndex) || 0 : $indexOf(this, searchElement, fromIndex);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/index-of.js
var require_index_of = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/index-of.js"(exports, module2) {
    "use strict";
    require_es_array_index_of();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").indexOf;
  }
});

// node_modules/core-js-pure/es/instance/index-of.js
var require_index_of2 = __commonJS({
  "node_modules/core-js-pure/es/instance/index-of.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_index_of();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.indexOf;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.indexOf ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/index-of.js
var require_index_of3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/index-of.js"(exports, module2) {
    "use strict";
    var parent = require_index_of2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js
var require_index_of4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/index-of.js"(exports, module2) {
    module2.exports = require_index_of3();
  }
});

// node_modules/core-js-pure/internals/array-for-each.js
var require_array_for_each = __commonJS({
  "node_modules/core-js-pure/internals/array-for-each.js"(exports, module2) {
    "use strict";
    var $forEach = require_array_iteration().forEach;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var STRICT_METHOD = arrayMethodIsStrict("forEach");
    module2.exports = !STRICT_METHOD ? function forEach(callbackfn) {
      return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
    } : [].forEach;
  }
});

// node_modules/core-js-pure/modules/es.array.for-each.js
var require_es_array_for_each = __commonJS({
  "node_modules/core-js-pure/modules/es.array.for-each.js"() {
    "use strict";
    var $ = require_export();
    var forEach = require_array_for_each();
    $({ target: "Array", proto: true, forced: [].forEach != forEach }, {
      forEach
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/for-each.js
var require_for_each = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/for-each.js"(exports, module2) {
    "use strict";
    require_es_array_for_each();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").forEach;
  }
});

// node_modules/core-js-pure/stable/array/virtual/for-each.js
var require_for_each2 = __commonJS({
  "node_modules/core-js-pure/stable/array/virtual/for-each.js"(exports, module2) {
    "use strict";
    var parent = require_for_each();
    module2.exports = parent;
  }
});

// node_modules/core-js-pure/stable/instance/for-each.js
var require_for_each3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/for-each.js"(exports, module2) {
    "use strict";
    require_web_dom_collections_iterator();
    var classof = require_classof();
    var hasOwn = require_has_own_property();
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_for_each2();
    var ArrayPrototype = Array.prototype;
    var DOMIterables = {
      DOMTokenList: true,
      NodeList: true
    };
    module2.exports = function(it) {
      var own = it.forEach;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.forEach || hasOwn(DOMIterables, classof(it)) ? method : own;
    };
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js
var require_for_each4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/for-each.js"(exports, module2) {
    module2.exports = require_for_each3();
  }
});

// node_modules/core-js-pure/modules/es.object.create.js
var require_es_object_create = __commonJS({
  "node_modules/core-js-pure/modules/es.object.create.js"() {
    "use strict";
    var $ = require_export();
    var DESCRIPTORS = require_descriptors();
    var create = require_object_create();
    $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
      create
    });
  }
});

// node_modules/core-js-pure/es/object/create.js
var require_create = __commonJS({
  "node_modules/core-js-pure/es/object/create.js"(exports, module2) {
    "use strict";
    require_es_object_create();
    var path3 = require_path();
    var Object2 = path3.Object;
    module2.exports = function create(P, D) {
      return Object2.create(P, D);
    };
  }
});

// node_modules/core-js-pure/stable/object/create.js
var require_create2 = __commonJS({
  "node_modules/core-js-pure/stable/object/create.js"(exports, module2) {
    "use strict";
    var parent = require_create();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js
var require_create3 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/object/create.js"(exports, module2) {
    module2.exports = require_create2();
  }
});

// node_modules/core-js-pure/es/array/virtual/concat.js
var require_concat = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/concat.js"(exports, module2) {
    "use strict";
    require_es_array_concat();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").concat;
  }
});

// node_modules/core-js-pure/es/instance/concat.js
var require_concat2 = __commonJS({
  "node_modules/core-js-pure/es/instance/concat.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_concat();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.concat;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.concat ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/concat.js
var require_concat3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/concat.js"(exports, module2) {
    "use strict";
    var parent = require_concat2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js
var require_concat4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/concat.js"(exports, module2) {
    module2.exports = require_concat3();
  }
});

// node_modules/xregexp/lib/xregexp.js
var require_xregexp = __commonJS({
  "node_modules/xregexp/lib/xregexp.js"(exports, module2) {
    "use strict";
    var _sliceInstanceProperty2 = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol3();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray = require_is_array4();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _flags = _interopRequireDefault(require_flags4());
    var _sort = _interopRequireDefault(require_sort4());
    var _slice = _interopRequireDefault(require_slice4());
    var _parseInt2 = _interopRequireDefault(require_parse_int3());
    var _indexOf = _interopRequireDefault(require_index_of4());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _create = _interopRequireDefault(require_create3());
    var _concat = _interopRequireDefault(require_concat4());
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
      if (!it) {
        if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      var _context9;
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = _sliceInstanceProperty2(_context9 = Object.prototype.toString.call(o)).call(_context9, 8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return _Array$from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var REGEX_DATA = "xregexp";
    var features = {
      astral: false,
      namespacing: true
    };
    var fixed = {};
    var regexCache = {};
    var patternCache = {};
    var tokens = [];
    var defaultScope = "default";
    var classScope = "class";
    var nativeTokens = {
      // Any native multicharacter token in default scope, or any single character
      "default": /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
      // Any native multicharacter token in character class scope, or any single character
      "class": /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
    };
    var replacementToken = /\$(?:\{([^\}]+)\}|<([^>]+)>|(\d\d?|[\s\S]?))/g;
    var correctExecNpcg = /()??/.exec("")[1] === void 0;
    var hasFlagsProp = (0, _flags["default"])(/x/) !== void 0;
    function hasNativeFlag(flag) {
      var isSupported = true;
      try {
        new RegExp("", flag);
        if (flag === "y") {
          var gy = function() {
            return "gy";
          }();
          var incompleteY = ".a".replace(new RegExp("a", gy), ".") === "..";
          if (incompleteY) {
            isSupported = false;
          }
        }
      } catch (exception) {
        isSupported = false;
      }
      return isSupported;
    }
    var hasNativeD = hasNativeFlag("d");
    var hasNativeS = hasNativeFlag("s");
    var hasNativeU = hasNativeFlag("u");
    var hasNativeY = hasNativeFlag("y");
    var registeredFlags = {
      d: hasNativeD,
      g: true,
      i: true,
      m: true,
      s: hasNativeS,
      u: hasNativeU,
      y: hasNativeY
    };
    var nonnativeFlags = hasNativeS ? /[^dgimsuy]+/g : /[^dgimuy]+/g;
    function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
      var _context;
      regex[REGEX_DATA] = {
        captureNames
      };
      if (isInternalOnly) {
        return regex;
      }
      if (regex.__proto__) {
        regex.__proto__ = XRegExp2.prototype;
      } else {
        for (var p in XRegExp2.prototype) {
          regex[p] = XRegExp2.prototype[p];
        }
      }
      regex[REGEX_DATA].source = xSource;
      regex[REGEX_DATA].flags = xFlags ? (0, _sort["default"])(_context = xFlags.split("")).call(_context).join("") : xFlags;
      return regex;
    }
    function clipDuplicates(str) {
      return str.replace(/([\s\S])(?=[\s\S]*\1)/g, "");
    }
    function copyRegex(regex, options) {
      var _context2;
      if (!XRegExp2.isRegExp(regex)) {
        throw new TypeError("Type RegExp expected");
      }
      var xData = regex[REGEX_DATA] || {};
      var flags = getNativeFlags(regex);
      var flagsToAdd = "";
      var flagsToRemove = "";
      var xregexpSource = null;
      var xregexpFlags = null;
      options = options || {};
      if (options.removeG) {
        flagsToRemove += "g";
      }
      if (options.removeY) {
        flagsToRemove += "y";
      }
      if (flagsToRemove) {
        flags = flags.replace(new RegExp("[".concat(flagsToRemove, "]+"), "g"), "");
      }
      if (options.addG) {
        flagsToAdd += "g";
      }
      if (options.addY) {
        flagsToAdd += "y";
      }
      if (flagsToAdd) {
        flags = clipDuplicates(flags + flagsToAdd);
      }
      if (!options.isInternalOnly) {
        if (xData.source !== void 0) {
          xregexpSource = xData.source;
        }
        if ((0, _flags["default"])(xData) != null) {
          xregexpFlags = flagsToAdd ? clipDuplicates((0, _flags["default"])(xData) + flagsToAdd) : (0, _flags["default"])(xData);
        }
      }
      regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? (0, _slice["default"])(_context2 = xData.captureNames).call(_context2, 0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
      return regex;
    }
    function dec(hex2) {
      return (0, _parseInt2["default"])(hex2, 16);
    }
    function getContextualTokenSeparator(match, scope, flags) {
      var matchEndPos = match.index + match[0].length;
      var precedingChar = match.input[match.index - 1];
      var followingChar = match.input[matchEndPos];
      if (
        // No need to separate tokens if at the beginning or end of a group, before or after a
        // group, or before or after a `|`
        /^[()|]$/.test(precedingChar) || /^[()|]$/.test(followingChar) || // No need to separate tokens if at the beginning or end of the pattern
        match.index === 0 || matchEndPos === match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookaround.
        // Looks only at the last 4 chars (at most) for perf when constructing long regexes.
        /\(\?(?:[:=!]|<[=!])$/.test(match.input.substring(match.index - 4, match.index)) || // Avoid separating tokens when the following token is a quantifier
        isQuantifierNext(match.input, matchEndPos, flags)
      ) {
        return "";
      }
      return "(?:)";
    }
    function getNativeFlags(regex) {
      return hasFlagsProp ? (0, _flags["default"])(regex) : (
        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
        // with an empty string) allows this to continue working predictably when
        // `XRegExp.proptotype.toString` is overridden
        /\/([a-z]*)$/i.exec(RegExp.prototype.toString.call(regex))[1]
      );
    }
    function hasNamedCapture(regex) {
      return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
    }
    function hex(dec2) {
      return (0, _parseInt2["default"])(dec2, 10).toString(16);
    }
    function isQuantifierNext(pattern, pos, flags) {
      var inlineCommentPattern = "\\(\\?#[^)]*\\)";
      var lineCommentPattern = "#[^#\\n]*";
      var quantifierPattern = "[?*+]|{\\d+(?:,\\d*)?}";
      var regex = (0, _indexOf["default"])(flags).call(flags, "x") !== -1 ? (
        // Ignore any leading whitespace, line comments, and inline comments
        /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/
      ) : (
        // Ignore any leading inline comments
        /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/
      );
      return regex.test((0, _slice["default"])(pattern).call(pattern, pos));
    }
    function isType(value, type) {
      return Object.prototype.toString.call(value) === "[object ".concat(type, "]");
    }
    function nullThrows(value) {
      if (value == null) {
        throw new TypeError("Cannot convert null or undefined to object");
      }
      return value;
    }
    function pad4(str) {
      while (str.length < 4) {
        str = "0".concat(str);
      }
      return str;
    }
    function prepareFlags(pattern, flags) {
      if (clipDuplicates(flags) !== flags) {
        throw new SyntaxError("Invalid duplicate regex flag ".concat(flags));
      }
      pattern = pattern.replace(/^\(\?([\w$]+)\)/, function($0, $1) {
        if (/[dgy]/.test($1)) {
          throw new SyntaxError("Cannot use flags dgy in mode modifier ".concat($0));
        }
        flags = clipDuplicates(flags + $1);
        return "";
      });
      var _iterator = _createForOfIteratorHelper(flags), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var flag = _step.value;
          if (!registeredFlags[flag]) {
            throw new SyntaxError("Unknown regex flag ".concat(flag));
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return {
        pattern,
        flags
      };
    }
    function prepareOptions(value) {
      var options = {};
      if (isType(value, "String")) {
        (0, _forEach["default"])(XRegExp2).call(XRegExp2, value, /[^\s,]+/, function(match) {
          options[match] = true;
        });
        return options;
      }
      return value;
    }
    function registerFlag(flag) {
      if (!/^[\w$]$/.test(flag)) {
        throw new Error("Flag must be a single character A-Za-z0-9_$");
      }
      registeredFlags[flag] = true;
    }
    function runTokens(pattern, flags, pos, scope, context) {
      var i = tokens.length;
      var leadChar = pattern[pos];
      var result = null;
      var match;
      var t;
      while (i--) {
        t = tokens[i];
        if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== "all" || t.flag && !((0, _indexOf["default"])(flags).call(flags, t.flag) !== -1)) {
          continue;
        }
        match = XRegExp2.exec(pattern, t.regex, pos, "sticky");
        if (match) {
          result = {
            matchLength: match[0].length,
            output: t.handler.call(context, match, scope, flags),
            reparse: t.reparse
          };
          break;
        }
      }
      return result;
    }
    function setAstral(on) {
      features.astral = on;
    }
    function setNamespacing(on) {
      features.namespacing = on;
    }
    function XRegExp2(pattern, flags) {
      if (XRegExp2.isRegExp(pattern)) {
        if (flags !== void 0) {
          throw new TypeError("Cannot supply flags when copying a RegExp");
        }
        return copyRegex(pattern);
      }
      pattern = pattern === void 0 ? "" : String(pattern);
      flags = flags === void 0 ? "" : String(flags);
      if (XRegExp2.isInstalled("astral") && !((0, _indexOf["default"])(flags).call(flags, "A") !== -1)) {
        flags += "A";
      }
      if (!patternCache[pattern]) {
        patternCache[pattern] = {};
      }
      if (!patternCache[pattern][flags]) {
        var context = {
          hasNamedCapture: false,
          captureNames: []
        };
        var scope = defaultScope;
        var output = "";
        var pos = 0;
        var result;
        var applied = prepareFlags(pattern, flags);
        var appliedPattern = applied.pattern;
        var appliedFlags = (0, _flags["default"])(applied);
        while (pos < appliedPattern.length) {
          do {
            result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
            if (result && result.reparse) {
              appliedPattern = (0, _slice["default"])(appliedPattern).call(appliedPattern, 0, pos) + result.output + (0, _slice["default"])(appliedPattern).call(appliedPattern, pos + result.matchLength);
            }
          } while (result && result.reparse);
          if (result) {
            output += result.output;
            pos += result.matchLength || 1;
          } else {
            var _XRegExp$exec = XRegExp2.exec(appliedPattern, nativeTokens[scope], pos, "sticky"), _XRegExp$exec2 = (0, _slicedToArray2["default"])(_XRegExp$exec, 1), token = _XRegExp$exec2[0];
            output += token;
            pos += token.length;
            if (token === "[" && scope === defaultScope) {
              scope = classScope;
            } else if (token === "]" && scope === classScope) {
              scope = defaultScope;
            }
          }
        }
        patternCache[pattern][flags] = {
          // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
          // groups are sometimes inserted during regex transpilation in order to keep tokens
          // separated. However, more than one empty group in a row is never needed.
          pattern: output.replace(/(?:\(\?:\))+/g, "(?:)"),
          // Strip all but native flags
          flags: appliedFlags.replace(nonnativeFlags, ""),
          // `context.captureNames` has an item for each capturing group, even if unnamed
          captures: context.hasNamedCapture ? context.captureNames : null
        };
      }
      var generated = patternCache[pattern][flags];
      return augment(new RegExp(generated.pattern, (0, _flags["default"])(generated)), generated.captures, pattern, flags);
    }
    XRegExp2.prototype = /(?:)/;
    XRegExp2.version = "5.1.1";
    XRegExp2._clipDuplicates = clipDuplicates;
    XRegExp2._hasNativeFlag = hasNativeFlag;
    XRegExp2._dec = dec;
    XRegExp2._hex = hex;
    XRegExp2._pad4 = pad4;
    XRegExp2.addToken = function(regex, handler, options) {
      options = options || {};
      var _options = options, optionalFlags = _options.optionalFlags;
      if (options.flag) {
        registerFlag(options.flag);
      }
      if (optionalFlags) {
        optionalFlags = optionalFlags.split("");
        var _iterator2 = _createForOfIteratorHelper(optionalFlags), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var flag = _step2.value;
            registerFlag(flag);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      tokens.push({
        regex: copyRegex(regex, {
          addG: true,
          addY: hasNativeY,
          isInternalOnly: true
        }),
        handler,
        scope: options.scope || defaultScope,
        flag: options.flag,
        reparse: options.reparse,
        leadChar: options.leadChar
      });
      XRegExp2.cache.flush("patterns");
    };
    XRegExp2.cache = function(pattern, flags) {
      if (!regexCache[pattern]) {
        regexCache[pattern] = {};
      }
      return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp2(pattern, flags));
    };
    XRegExp2.cache.flush = function(cacheName) {
      if (cacheName === "patterns") {
        patternCache = {};
      } else {
        regexCache = {};
      }
    };
    XRegExp2.escape = function(str) {
      return String(nullThrows(str)).replace(/[\\\[\]{}()*+?.^$|]/g, "\\$&").replace(/[\s#\-,]/g, function(match) {
        return "\\u".concat(pad4(hex(match.charCodeAt(0))));
      });
    };
    XRegExp2.exec = function(str, regex, pos, sticky) {
      var cacheKey = "g";
      var addY = false;
      var fakeY = false;
      var match;
      addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
      if (addY) {
        cacheKey += "y";
      } else if (sticky) {
        fakeY = true;
        cacheKey += "FakeY";
      }
      regex[REGEX_DATA] = regex[REGEX_DATA] || {};
      var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
        addG: true,
        addY,
        source: fakeY ? "".concat(regex.source, "|()") : void 0,
        removeY: sticky === false,
        isInternalOnly: true
      }));
      pos = pos || 0;
      r2.lastIndex = pos;
      match = fixed.exec.call(r2, str);
      if (fakeY && match && match.pop() === "") {
        match = null;
      }
      if (regex.global) {
        regex.lastIndex = match ? r2.lastIndex : 0;
      }
      return match;
    };
    XRegExp2.forEach = function(str, regex, callback) {
      var pos = 0;
      var i = -1;
      var match;
      while (match = XRegExp2.exec(str, regex, pos)) {
        callback(match, ++i, str, regex);
        pos = match.index + (match[0].length || 1);
      }
    };
    XRegExp2.globalize = function(regex) {
      return copyRegex(regex, {
        addG: true
      });
    };
    XRegExp2.install = function(options) {
      options = prepareOptions(options);
      if (!features.astral && options.astral) {
        setAstral(true);
      }
      if (!features.namespacing && options.namespacing) {
        setNamespacing(true);
      }
    };
    XRegExp2.isInstalled = function(feature) {
      return !!features[feature];
    };
    XRegExp2.isRegExp = function(value) {
      return Object.prototype.toString.call(value) === "[object RegExp]";
    };
    XRegExp2.match = function(str, regex, scope) {
      var global2 = regex.global && scope !== "one" || scope === "all";
      var cacheKey = (global2 ? "g" : "") + (regex.sticky ? "y" : "") || "noGY";
      regex[REGEX_DATA] = regex[REGEX_DATA] || {};
      var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
        addG: !!global2,
        removeG: scope === "one",
        isInternalOnly: true
      }));
      var result = String(nullThrows(str)).match(r2);
      if (regex.global) {
        regex.lastIndex = scope === "one" && result ? (
          // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
          result.index + result[0].length
        ) : 0;
      }
      return global2 ? result || [] : result && result[0];
    };
    XRegExp2.matchChain = function(str, chain) {
      return function recurseChain(values, level) {
        var item = chain[level].regex ? chain[level] : {
          regex: chain[level]
        };
        var matches = [];
        function addMatch(match) {
          if (item.backref) {
            var ERR_UNDEFINED_GROUP = "Backreference to undefined group: ".concat(item.backref);
            var isNamedBackref = isNaN(item.backref);
            if (isNamedBackref && XRegExp2.isInstalled("namespacing")) {
              if (!(match.groups && item.backref in match.groups)) {
                throw new ReferenceError(ERR_UNDEFINED_GROUP);
              }
            } else if (!match.hasOwnProperty(item.backref)) {
              throw new ReferenceError(ERR_UNDEFINED_GROUP);
            }
            var backrefValue = isNamedBackref && XRegExp2.isInstalled("namespacing") ? match.groups[item.backref] : match[item.backref];
            matches.push(backrefValue || "");
          } else {
            matches.push(match[0]);
          }
        }
        var _iterator3 = _createForOfIteratorHelper(values), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var value = _step3.value;
            (0, _forEach["default"])(XRegExp2).call(XRegExp2, value, item.regex, addMatch);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
      }([str], 0);
    };
    XRegExp2.replace = function(str, search, replacement, scope) {
      var isRegex = XRegExp2.isRegExp(search);
      var global2 = search.global && scope !== "one" || scope === "all";
      var cacheKey = (global2 ? "g" : "") + (search.sticky ? "y" : "") || "noGY";
      var s2 = search;
      if (isRegex) {
        search[REGEX_DATA] = search[REGEX_DATA] || {};
        s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
          addG: !!global2,
          removeG: scope === "one",
          isInternalOnly: true
        }));
      } else if (global2) {
        s2 = new RegExp(XRegExp2.escape(String(search)), "g");
      }
      var result = fixed.replace.call(nullThrows(str), s2, replacement);
      if (isRegex && search.global) {
        search.lastIndex = 0;
      }
      return result;
    };
    XRegExp2.replaceEach = function(str, replacements) {
      var _iterator4 = _createForOfIteratorHelper(replacements), _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
          var r = _step4.value;
          str = XRegExp2.replace(str, r[0], r[1], r[2]);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      return str;
    };
    XRegExp2.split = function(str, separator, limit) {
      return fixed.split.call(nullThrows(str), separator, limit);
    };
    XRegExp2.test = function(str, regex, pos, sticky) {
      return !!XRegExp2.exec(str, regex, pos, sticky);
    };
    XRegExp2.uninstall = function(options) {
      options = prepareOptions(options);
      if (features.astral && options.astral) {
        setAstral(false);
      }
      if (features.namespacing && options.namespacing) {
        setNamespacing(false);
      }
    };
    XRegExp2.union = function(patterns, flags, options) {
      options = options || {};
      var conjunction = options.conjunction || "or";
      var numCaptures = 0;
      var numPriorCaptures;
      var captureNames;
      function rewrite(match, paren, backref) {
        var name = captureNames[numCaptures - numPriorCaptures];
        if (paren) {
          ++numCaptures;
          if (name) {
            return "(?<".concat(name, ">");
          }
        } else if (backref) {
          return "\\".concat(+backref + numPriorCaptures);
        }
        return match;
      }
      if (!(isType(patterns, "Array") && patterns.length)) {
        throw new TypeError("Must provide a nonempty array of patterns to merge");
      }
      var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
      var output = [];
      var _iterator5 = _createForOfIteratorHelper(patterns), _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
          var pattern = _step5.value;
          if (XRegExp2.isRegExp(pattern)) {
            numPriorCaptures = numCaptures;
            captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
            output.push(XRegExp2(pattern.source).source.replace(parts, rewrite));
          } else {
            output.push(XRegExp2.escape(pattern));
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      var separator = conjunction === "none" ? "" : "|";
      return XRegExp2(output.join(separator), flags);
    };
    fixed.exec = function(str) {
      var origLastIndex = this.lastIndex;
      var match = RegExp.prototype.exec.apply(this, arguments);
      if (match) {
        if (!correctExecNpcg && match.length > 1 && (0, _indexOf["default"])(match).call(match, "") !== -1) {
          var _context3;
          var r2 = copyRegex(this, {
            removeG: true,
            isInternalOnly: true
          });
          (0, _slice["default"])(_context3 = String(str)).call(_context3, match.index).replace(r2, function() {
            var len = arguments.length;
            for (var i2 = 1; i2 < len - 2; ++i2) {
              if ((i2 < 0 || arguments.length <= i2 ? void 0 : arguments[i2]) === void 0) {
                match[i2] = void 0;
              }
            }
          });
        }
        if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
          var groupsObject = match;
          if (XRegExp2.isInstalled("namespacing")) {
            match.groups = (0, _create["default"])(null);
            groupsObject = match.groups;
          }
          for (var i = 1; i < match.length; ++i) {
            var name = this[REGEX_DATA].captureNames[i - 1];
            if (name) {
              groupsObject[name] = match[i];
            }
          }
        } else if (!match.groups && XRegExp2.isInstalled("namespacing")) {
          match.groups = void 0;
        }
        if (this.global && !match[0].length && this.lastIndex > match.index) {
          this.lastIndex = match.index;
        }
      }
      if (!this.global) {
        this.lastIndex = origLastIndex;
      }
      return match;
    };
    fixed.test = function(str) {
      return !!fixed.exec.call(this, str);
    };
    fixed.match = function(regex) {
      if (!XRegExp2.isRegExp(regex)) {
        regex = new RegExp(regex);
      } else if (regex.global) {
        var result = String.prototype.match.apply(this, arguments);
        regex.lastIndex = 0;
        return result;
      }
      return fixed.exec.call(regex, nullThrows(this));
    };
    fixed.replace = function(search, replacement) {
      var isRegex = XRegExp2.isRegExp(search);
      var origLastIndex;
      var captureNames;
      var result;
      if (isRegex) {
        if (search[REGEX_DATA]) {
          captureNames = search[REGEX_DATA].captureNames;
        }
        origLastIndex = search.lastIndex;
      } else {
        search += "";
      }
      if (isType(replacement, "Function")) {
        result = String(this).replace(search, function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (captureNames) {
            var groupsObject;
            if (XRegExp2.isInstalled("namespacing")) {
              groupsObject = (0, _create["default"])(null);
              args.push(groupsObject);
            } else {
              args[0] = new String(args[0]);
              groupsObject = args[0];
            }
            for (var i = 0; i < captureNames.length; ++i) {
              if (captureNames[i]) {
                groupsObject[captureNames[i]] = args[i + 1];
              }
            }
          }
          return replacement.apply(void 0, args);
        });
      } else {
        result = String(nullThrows(this)).replace(search, function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return String(replacement).replace(replacementToken, replacer);
          function replacer($0, bracketed, angled, dollarToken) {
            bracketed = bracketed || angled;
            var numNonCaptureArgs = isType(args[args.length - 1], "Object") ? 4 : 3;
            var numCaptures = args.length - numNonCaptureArgs;
            if (bracketed) {
              if (/^\d+$/.test(bracketed)) {
                var _n = +bracketed;
                if (_n <= numCaptures) {
                  return args[_n] || "";
                }
              }
              var n = captureNames ? (0, _indexOf["default"])(captureNames).call(captureNames, bracketed) : -1;
              if (n < 0) {
                throw new SyntaxError("Backreference to undefined group ".concat($0));
              }
              return args[n + 1] || "";
            }
            if (dollarToken === "" || dollarToken === " ") {
              throw new SyntaxError("Invalid token ".concat($0));
            }
            if (dollarToken === "&" || +dollarToken === 0) {
              return args[0];
            }
            if (dollarToken === "$") {
              return "$";
            }
            if (dollarToken === "`") {
              var _context4;
              return (0, _slice["default"])(_context4 = args[args.length - 1]).call(_context4, 0, args[args.length - 2]);
            }
            if (dollarToken === "'") {
              var _context5;
              return (0, _slice["default"])(_context5 = args[args.length - 1]).call(_context5, args[args.length - 2] + args[0].length);
            }
            dollarToken = +dollarToken;
            if (!isNaN(dollarToken)) {
              if (dollarToken > numCaptures) {
                throw new SyntaxError("Backreference to undefined group ".concat($0));
              }
              return args[dollarToken] || "";
            }
            throw new SyntaxError("Invalid token ".concat($0));
          }
        });
      }
      if (isRegex) {
        if (search.global) {
          search.lastIndex = 0;
        } else {
          search.lastIndex = origLastIndex;
        }
      }
      return result;
    };
    fixed.split = function(separator, limit) {
      if (!XRegExp2.isRegExp(separator)) {
        return String.prototype.split.apply(this, arguments);
      }
      var str = String(this);
      var output = [];
      var origLastIndex = separator.lastIndex;
      var lastLastIndex = 0;
      var lastLength;
      limit = (limit === void 0 ? -1 : limit) >>> 0;
      (0, _forEach["default"])(XRegExp2).call(XRegExp2, str, separator, function(match) {
        if (match.index + match[0].length > lastLastIndex) {
          output.push((0, _slice["default"])(str).call(str, lastLastIndex, match.index));
          if (match.length > 1 && match.index < str.length) {
            Array.prototype.push.apply(output, (0, _slice["default"])(match).call(match, 1));
          }
          lastLength = match[0].length;
          lastLastIndex = match.index + lastLength;
        }
      });
      if (lastLastIndex === str.length) {
        if (!separator.test("") || lastLength) {
          output.push("");
        }
      } else {
        output.push((0, _slice["default"])(str).call(str, lastLastIndex));
      }
      separator.lastIndex = origLastIndex;
      return output.length > limit ? (0, _slice["default"])(output).call(output, 0, limit) : output;
    };
    XRegExp2.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function(match, scope) {
      if (match[1] === "B" && scope === defaultScope) {
        return match[0];
      }
      throw new SyntaxError("Invalid escape ".concat(match[0]));
    }, {
      scope: "all",
      leadChar: "\\"
    });
    XRegExp2.addToken(/\\u{([\dA-Fa-f]+)}/, function(match, scope, flags) {
      var code = dec(match[1]);
      if (code > 1114111) {
        throw new SyntaxError("Invalid Unicode code point ".concat(match[0]));
      }
      if (code <= 65535) {
        return "\\u".concat(pad4(hex(code)));
      }
      if (hasNativeU && (0, _indexOf["default"])(flags).call(flags, "u") !== -1) {
        return match[0];
      }
      throw new SyntaxError("Cannot use Unicode code point above \\u{FFFF} without flag u");
    }, {
      scope: "all",
      leadChar: "\\"
    });
    XRegExp2.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, {
      leadChar: "("
    });
    XRegExp2.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, {
      flag: "x"
    });
    if (!hasNativeS) {
      XRegExp2.addToken(/\./, function() {
        return "[\\s\\S]";
      }, {
        flag: "s",
        leadChar: "."
      });
    }
    XRegExp2.addToken(/\\k<([^>]+)>/, function(match) {
      var _context6, _context7;
      var index = isNaN(match[1]) ? (0, _indexOf["default"])(_context6 = this.captureNames).call(_context6, match[1]) + 1 : +match[1];
      var endIndex = match.index + match[0].length;
      if (!index || index > this.captureNames.length) {
        throw new SyntaxError("Backreference to undefined group ".concat(match[0]));
      }
      return (0, _concat["default"])(_context7 = "\\".concat(index)).call(_context7, endIndex === match.input.length || isNaN(match.input[endIndex]) ? "" : "(?:)");
    }, {
      leadChar: "\\"
    });
    XRegExp2.addToken(/\\(\d+)/, function(match, scope) {
      if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== "0") {
        throw new SyntaxError("Cannot use octal escape or backreference to undefined group ".concat(match[0]));
      }
      return match[0];
    }, {
      scope: "all",
      leadChar: "\\"
    });
    XRegExp2.addToken(/\(\?P?<((?:[\$A-Z_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\$0-9A-Z_a-z\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u07FD\u0800-\u082D\u0840-\u085B\u0860-\u086A\u0870-\u0887\u0889-\u088E\u0898-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1715\u171F-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B4C\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CD0-\u1CD2\u1CD4-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA827\uA82C\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDD30-\uDD39\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF50\uDF70-\uDF85\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC46\uDC66-\uDC75\uDC7F-\uDCBA\uDCC2\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD44-\uDD47\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDC9-\uDDCC\uDDCE-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3B-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC5E-\uDC61\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF39\uDF40-\uDF46]|\uD806[\uDC00-\uDC3A\uDCA0-\uDCE9\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD43\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE1\uDDE3\uDDE4\uDE00-\uDE3E\uDE47\uDE50-\uDE99\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFE4\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAE\uDEC0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4B\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]|\uDB40[\uDD00-\uDDEF])*)>/, function(match) {
      var _context8;
      if (!XRegExp2.isInstalled("namespacing") && (match[1] === "length" || match[1] === "__proto__")) {
        throw new SyntaxError("Cannot use reserved word as capture name ".concat(match[0]));
      }
      if ((0, _indexOf["default"])(_context8 = this.captureNames).call(_context8, match[1]) !== -1) {
        throw new SyntaxError("Cannot use same name for multiple groups ".concat(match[0]));
      }
      this.captureNames.push(match[1]);
      this.hasNamedCapture = true;
      return "(";
    }, {
      leadChar: "("
    });
    XRegExp2.addToken(/\((?!\?)/, function(match, scope, flags) {
      if ((0, _indexOf["default"])(flags).call(flags, "n") !== -1) {
        return "(?:";
      }
      this.captureNames.push(null);
      return "(";
    }, {
      optionalFlags: "n",
      leadChar: "("
    });
    var _default = XRegExp2;
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/core-js-pure/internals/array-reduce.js
var require_array_reduce = __commonJS({
  "node_modules/core-js-pure/internals/array-reduce.js"(exports, module2) {
    "use strict";
    var aCallable = require_a_callable();
    var toObject = require_to_object();
    var IndexedObject = require_indexed_object();
    var lengthOfArrayLike = require_length_of_array_like();
    var $TypeError = TypeError;
    var createMethod = function(IS_RIGHT) {
      return function(that, callbackfn, argumentsLength, memo) {
        aCallable(callbackfn);
        var O = toObject(that);
        var self2 = IndexedObject(O);
        var length = lengthOfArrayLike(O);
        var index = IS_RIGHT ? length - 1 : 0;
        var i = IS_RIGHT ? -1 : 1;
        if (argumentsLength < 2)
          while (true) {
            if (index in self2) {
              memo = self2[index];
              index += i;
              break;
            }
            index += i;
            if (IS_RIGHT ? index < 0 : length <= index) {
              throw $TypeError("Reduce of empty array with no initial value");
            }
          }
        for (; IS_RIGHT ? index >= 0 : length > index; index += i)
          if (index in self2) {
            memo = callbackfn(memo, self2[index], index, O);
          }
        return memo;
      };
    };
    module2.exports = {
      // `Array.prototype.reduce` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduce
      left: createMethod(false),
      // `Array.prototype.reduceRight` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduceright
      right: createMethod(true)
    };
  }
});

// node_modules/core-js-pure/internals/engine-is-node.js
var require_engine_is_node = __commonJS({
  "node_modules/core-js-pure/internals/engine-is-node.js"(exports, module2) {
    "use strict";
    var classof = require_classof_raw();
    module2.exports = typeof process != "undefined" && classof(process) == "process";
  }
});

// node_modules/core-js-pure/modules/es.array.reduce.js
var require_es_array_reduce = __commonJS({
  "node_modules/core-js-pure/modules/es.array.reduce.js"() {
    "use strict";
    var $ = require_export();
    var $reduce = require_array_reduce().left;
    var arrayMethodIsStrict = require_array_method_is_strict();
    var CHROME_VERSION = require_engine_v8_version();
    var IS_NODE = require_engine_is_node();
    var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;
    var FORCED = CHROME_BUG || !arrayMethodIsStrict("reduce");
    $({ target: "Array", proto: true, forced: FORCED }, {
      reduce: function reduce(callbackfn) {
        var length = arguments.length;
        return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/reduce.js
var require_reduce = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/reduce.js"(exports, module2) {
    "use strict";
    require_es_array_reduce();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").reduce;
  }
});

// node_modules/core-js-pure/es/instance/reduce.js
var require_reduce2 = __commonJS({
  "node_modules/core-js-pure/es/instance/reduce.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_reduce();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.reduce;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.reduce ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/reduce.js
var require_reduce3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/reduce.js"(exports, module2) {
    "use strict";
    var parent = require_reduce2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js
var require_reduce4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/reduce.js"(exports, module2) {
    module2.exports = require_reduce3();
  }
});

// node_modules/core-js-pure/modules/es.array.map.js
var require_es_array_map = __commonJS({
  "node_modules/core-js-pure/modules/es.array.map.js"() {
    "use strict";
    var $ = require_export();
    var $map = require_array_iteration().map;
    var arrayMethodHasSpeciesSupport = require_array_method_has_species_support();
    var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
    $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT }, {
      map: function map(callbackfn) {
        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
      }
    });
  }
});

// node_modules/core-js-pure/es/array/virtual/map.js
var require_map = __commonJS({
  "node_modules/core-js-pure/es/array/virtual/map.js"(exports, module2) {
    "use strict";
    require_es_array_map();
    var entryVirtual = require_entry_virtual();
    module2.exports = entryVirtual("Array").map;
  }
});

// node_modules/core-js-pure/es/instance/map.js
var require_map2 = __commonJS({
  "node_modules/core-js-pure/es/instance/map.js"(exports, module2) {
    "use strict";
    var isPrototypeOf = require_object_is_prototype_of();
    var method = require_map();
    var ArrayPrototype = Array.prototype;
    module2.exports = function(it) {
      var own = it.map;
      return it === ArrayPrototype || isPrototypeOf(ArrayPrototype, it) && own === ArrayPrototype.map ? method : own;
    };
  }
});

// node_modules/core-js-pure/stable/instance/map.js
var require_map3 = __commonJS({
  "node_modules/core-js-pure/stable/instance/map.js"(exports, module2) {
    "use strict";
    var parent = require_map2();
    module2.exports = parent;
  }
});

// node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js
var require_map4 = __commonJS({
  "node_modules/@babel/runtime-corejs3/core-js-stable/instance/map.js"(exports, module2) {
    module2.exports = require_map3();
  }
});

// node_modules/xregexp/lib/addons/build.js
var require_build = __commonJS({
  "node_modules/xregexp/lib/addons/build.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _reduce = _interopRequireDefault(require_reduce4());
    var _map = _interopRequireDefault(require_map4());
    var _indexOf = _interopRequireDefault(require_index_of4());
    var _concat = _interopRequireDefault(require_concat4());
    var _default = function _default2(XRegExp2) {
      var REGEX_DATA = "xregexp";
      var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
      var parts = XRegExp2.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], "g", {
        conjunction: "or"
      });
      function deanchor(pattern) {
        var leadingAnchor = /^(?:\(\?:\))*\^/;
        var trailingAnchor = /\$(?:\(\?:\))*$/;
        if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped
        trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ""))) {
          return pattern.replace(leadingAnchor, "").replace(trailingAnchor, "");
        }
        return pattern;
      }
      function asXRegExp(value, addFlagX) {
        var flags = addFlagX ? "x" : "";
        return XRegExp2.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? (
          // Don't recompile, to preserve capture names
          value
        ) : (
          // Recompile as XRegExp
          XRegExp2(value.source, flags)
        ) : (
          // Compile string as XRegExp
          XRegExp2(value, flags)
        );
      }
      function interpolate(substitution) {
        return substitution instanceof RegExp ? substitution : XRegExp2.escape(substitution);
      }
      function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
        subpatterns["subpattern".concat(subpatternIndex)] = interpolated;
        return subpatterns;
      }
      function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
        var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
        return raw + (hasSubpattern ? "{{subpattern".concat(subpatternIndex, "}}") : "");
      }
      XRegExp2.tag = function(flags) {
        return function(literals) {
          var _context, _context2;
          for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            substitutions[_key - 1] = arguments[_key];
          }
          var subpatterns = (0, _reduce["default"])(_context = (0, _map["default"])(substitutions).call(substitutions, interpolate)).call(_context, reduceToSubpatternsObject, {});
          var pattern = (0, _map["default"])(_context2 = literals.raw).call(_context2, embedSubpatternAfter).join("");
          return XRegExp2.build(pattern, subpatterns, flags);
        };
      };
      XRegExp2.build = function(pattern, subs, flags) {
        flags = flags || "";
        var addFlagX = (0, _indexOf["default"])(flags).call(flags, "x") !== -1;
        var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
        if (inlineFlags) {
          flags = XRegExp2._clipDuplicates(flags + inlineFlags[1]);
        }
        var data = {};
        for (var p in subs) {
          if (subs.hasOwnProperty(p)) {
            var sub = asXRegExp(subs[p], addFlagX);
            data[p] = {
              // Deanchoring allows embedding independently useful anchored regexes. If you
              // really need to keep your anchors, double them (i.e., `^^...$$`).
              pattern: deanchor(sub.source),
              names: sub[REGEX_DATA].captureNames || []
            };
          }
        }
        var patternAsRegex = asXRegExp(pattern, addFlagX);
        var numCaps = 0;
        var numPriorCaps;
        var numOuterCaps = 0;
        var outerCapsMap = [0];
        var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
        var output = patternAsRegex.source.replace(parts, function($0, $1, $2, $3, $4) {
          var subName = $1 || $2;
          var capName;
          var intro;
          var localCapIndex;
          if (subName) {
            var _context3;
            if (!data.hasOwnProperty(subName)) {
              throw new ReferenceError("Undefined property ".concat($0));
            }
            if ($1) {
              capName = outerCapNames[numOuterCaps];
              outerCapsMap[++numOuterCaps] = ++numCaps;
              intro = "(?<".concat(capName || subName, ">");
            } else {
              intro = "(?:";
            }
            numPriorCaps = numCaps;
            var rewrittenSubpattern = data[subName].pattern.replace(subParts, function(match, paren, backref) {
              if (paren) {
                capName = data[subName].names[numCaps - numPriorCaps];
                ++numCaps;
                if (capName) {
                  return "(?<".concat(capName, ">");
                }
              } else if (backref) {
                localCapIndex = +backref - 1;
                return data[subName].names[localCapIndex] ? (
                  // Need to preserve the backreference name in case using flag `n`
                  "\\k<".concat(data[subName].names[localCapIndex], ">")
                ) : "\\".concat(+backref + numPriorCaps);
              }
              return match;
            });
            return (0, _concat["default"])(_context3 = "".concat(intro)).call(_context3, rewrittenSubpattern, ")");
          }
          if ($3) {
            capName = outerCapNames[numOuterCaps];
            outerCapsMap[++numOuterCaps] = ++numCaps;
            if (capName) {
              return "(?<".concat(capName, ">");
            }
          } else if ($4) {
            localCapIndex = +$4 - 1;
            return outerCapNames[localCapIndex] ? (
              // Need to preserve the backreference name in case using flag `n`
              "\\k<".concat(outerCapNames[localCapIndex], ">")
            ) : "\\".concat(outerCapsMap[+$4]);
          }
          return $0;
        });
        return XRegExp2(output, flags);
      };
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/lib/addons/matchrecursive.js
var require_matchrecursive = __commonJS({
  "node_modules/xregexp/lib/addons/matchrecursive.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _indexOf = _interopRequireDefault(require_index_of4());
    var _concat = _interopRequireDefault(require_concat4());
    var _slice = _interopRequireDefault(require_slice4());
    var _default = function _default2(XRegExp2) {
      function row(name, value, start, end) {
        return {
          name,
          value,
          start,
          end
        };
      }
      XRegExp2.matchRecursive = function(str, left, right, flags, options) {
        flags = flags || "";
        options = options || {};
        var global2 = (0, _indexOf["default"])(flags).call(flags, "g") !== -1;
        var sticky = (0, _indexOf["default"])(flags).call(flags, "y") !== -1;
        var basicFlags = flags.replace(/y/g, "");
        left = XRegExp2(left, basicFlags);
        right = XRegExp2(right, basicFlags);
        var esc;
        var _options = options, escapeChar = _options.escapeChar;
        if (escapeChar) {
          var _context, _context2;
          if (escapeChar.length > 1) {
            throw new Error("Cannot use more than one escape character");
          }
          escapeChar = XRegExp2.escape(escapeChar);
          esc = new RegExp(
            (0, _concat["default"])(_context = (0, _concat["default"])(_context2 = "(?:".concat(escapeChar, "[\\S\\s]|(?:(?!")).call(
              _context2,
              // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
              // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
              // transformation resulting from those flags was already applied to `left` and
              // `right` when they were passed through the XRegExp constructor above.
              XRegExp2.union([left, right], "", {
                conjunction: "or"
              }).source,
              ")[^"
            )).call(_context, escapeChar, "])+)+"),
            // Flags `dgy` not needed here
            flags.replace(XRegExp2._hasNativeFlag("s") ? /[^imsu]/g : /[^imu]/g, "")
          );
        }
        var openTokens = 0;
        var delimStart = 0;
        var delimEnd = 0;
        var lastOuterEnd = 0;
        var outerStart;
        var innerStart;
        var leftMatch;
        var rightMatch;
        var vN = options.valueNames;
        var output = [];
        while (true) {
          if (escapeChar) {
            delimEnd += (XRegExp2.exec(str, esc, delimEnd, "sticky") || [""])[0].length;
          }
          leftMatch = XRegExp2.exec(str, left, delimEnd);
          rightMatch = XRegExp2.exec(str, right, delimEnd);
          if (leftMatch && rightMatch) {
            if (leftMatch.index <= rightMatch.index) {
              rightMatch = null;
            } else {
              leftMatch = null;
            }
          }
          if (leftMatch || rightMatch) {
            delimStart = (leftMatch || rightMatch).index;
            delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
          } else if (!openTokens) {
            break;
          }
          if (sticky && !openTokens && delimStart > lastOuterEnd) {
            break;
          }
          if (leftMatch) {
            if (!openTokens) {
              outerStart = delimStart;
              innerStart = delimEnd;
            }
            openTokens += 1;
          } else if (rightMatch && openTokens) {
            openTokens -= 1;
            if (!openTokens) {
              if (vN) {
                if (vN[0] && outerStart > lastOuterEnd) {
                  output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd, outerStart), lastOuterEnd, outerStart));
                }
                if (vN[1]) {
                  output.push(row(vN[1], (0, _slice["default"])(str).call(str, outerStart, innerStart), outerStart, innerStart));
                }
                if (vN[2]) {
                  output.push(row(vN[2], (0, _slice["default"])(str).call(str, innerStart, delimStart), innerStart, delimStart));
                }
                if (vN[3]) {
                  output.push(row(vN[3], (0, _slice["default"])(str).call(str, delimStart, delimEnd), delimStart, delimEnd));
                }
              } else {
                output.push((0, _slice["default"])(str).call(str, innerStart, delimStart));
              }
              lastOuterEnd = delimEnd;
              if (!global2) {
                break;
              }
            }
          } else {
            var unbalanced = options.unbalanced || "error";
            if (unbalanced === "skip" || unbalanced === "skip-lazy") {
              if (rightMatch) {
                rightMatch = null;
              } else {
                if (unbalanced === "skip") {
                  var outerStartDelimLength = XRegExp2.exec(str, left, outerStart, "sticky")[0].length;
                  delimEnd = outerStart + (outerStartDelimLength || 1);
                } else {
                  delimEnd = outerStart + 1;
                }
                openTokens = 0;
              }
            } else if (unbalanced === "error") {
              var _context3;
              var delimSide = rightMatch ? "right" : "left";
              var errorPos = rightMatch ? delimStart : outerStart;
              throw new Error((0, _concat["default"])(_context3 = "Unbalanced ".concat(delimSide, " delimiter found in string at position ")).call(_context3, errorPos));
            } else {
              throw new Error("Unsupported value for unbalanced: ".concat(unbalanced));
            }
          }
          if (delimStart === delimEnd) {
            delimEnd += 1;
          }
        }
        if (global2 && output.length > 0 && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
          output.push(row(vN[0], (0, _slice["default"])(str).call(str, lastOuterEnd), lastOuterEnd, str.length));
        }
        return output;
      };
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/lib/addons/unicode-base.js
var require_unicode_base = __commonJS({
  "node_modules/xregexp/lib/addons/unicode-base.js"(exports, module2) {
    "use strict";
    var _sliceInstanceProperty = require_slice4();
    var _Array$from = require_from3();
    var _Symbol = require_symbol3();
    var _getIteratorMethod = require_get_iterator_method7();
    var _Array$isArray = require_is_array4();
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _slicedToArray2 = _interopRequireDefault(require_slicedToArray());
    var _forEach = _interopRequireDefault(require_for_each4());
    var _concat = _interopRequireDefault(require_concat4());
    var _indexOf = _interopRequireDefault(require_index_of4());
    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"];
      if (!it) {
        if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it)
            o = it;
          var i = 0;
          var F = function F2() {
          };
          return { s: F, n: function n() {
            if (i >= o.length)
              return { done: true };
            return { done: false, value: o[i++] };
          }, e: function e(_e) {
            throw _e;
          }, f: F };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var normalCompletion = true, didErr = false, err;
      return { s: function s() {
        it = it.call(o);
      }, n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      }, e: function e(_e2) {
        didErr = true;
        err = _e2;
      }, f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      } };
    }
    function _unsupportedIterableToArray(o, minLen) {
      var _context4;
      if (!o)
        return;
      if (typeof o === "string")
        return _arrayLikeToArray(o, minLen);
      var n = _sliceInstanceProperty(_context4 = Object.prototype.toString.call(o)).call(_context4, 8, -1);
      if (n === "Object" && o.constructor)
        n = o.constructor.name;
      if (n === "Map" || n === "Set")
        return _Array$from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
        return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length)
        len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
    var _default = function _default2(XRegExp2) {
      var unicode = {};
      var unicodeTypes = {};
      var dec = XRegExp2._dec;
      var hex = XRegExp2._hex;
      var pad4 = XRegExp2._pad4;
      function normalize(name) {
        return name.replace(/[- _]+/g, "").toLowerCase();
      }
      function charCode(chr) {
        var esc = /^\\[xu](.+)/.exec(chr);
        return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === "\\" ? 1 : 0);
      }
      function invertBmp(range) {
        var output = "";
        var lastEnd = -1;
        (0, _forEach["default"])(XRegExp2).call(XRegExp2, range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function(m) {
          var start = charCode(m[1]);
          if (start > lastEnd + 1) {
            output += "\\u".concat(pad4(hex(lastEnd + 1)));
            if (start > lastEnd + 2) {
              output += "-\\u".concat(pad4(hex(start - 1)));
            }
          }
          lastEnd = charCode(m[2] || m[1]);
        });
        if (lastEnd < 65535) {
          output += "\\u".concat(pad4(hex(lastEnd + 1)));
          if (lastEnd < 65534) {
            output += "-\\uFFFF";
          }
        }
        return output;
      }
      function cacheInvertedBmp(slug) {
        var prop = "b!";
        return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
      }
      function buildAstral(slug, isNegated) {
        var item = unicode[slug];
        var combined = "";
        if (item.bmp && !item.isBmpLast) {
          var _context;
          combined = (0, _concat["default"])(_context = "[".concat(item.bmp, "]")).call(_context, item.astral ? "|" : "");
        }
        if (item.astral) {
          combined += item.astral;
        }
        if (item.isBmpLast && item.bmp) {
          var _context2;
          combined += (0, _concat["default"])(_context2 = "".concat(item.astral ? "|" : "", "[")).call(_context2, item.bmp, "]");
        }
        return isNegated ? "(?:(?!".concat(combined, ")(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))") : "(?:".concat(combined, ")");
      }
      function cacheAstral(slug, isNegated) {
        var prop = isNegated ? "a!" : "a=";
        return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
      }
      XRegExp2.addToken(
        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
        /\\([pP])(?:{(\^?)(?:(\w+)=)?([^}]*)}|([A-Za-z]))/,
        function(match, scope, flags) {
          var ERR_DOUBLE_NEG = "Invalid double negation ";
          var ERR_UNKNOWN_NAME = "Unknown Unicode token ";
          var ERR_UNKNOWN_REF = "Unicode token missing data ";
          var ERR_ASTRAL_ONLY = "Astral mode required for Unicode token ";
          var ERR_ASTRAL_IN_CLASS = "Astral mode does not support Unicode tokens within character classes";
          var _match = (0, _slicedToArray2["default"])(match, 6), fullToken = _match[0], pPrefix = _match[1], caretNegation = _match[2], typePrefix = _match[3], tokenName = _match[4], tokenSingleCharName = _match[5];
          var isNegated = pPrefix === "P" || !!caretNegation;
          var isAstralMode = (0, _indexOf["default"])(flags).call(flags, "A") !== -1;
          var slug = normalize(tokenSingleCharName || tokenName);
          var item = unicode[slug];
          if (pPrefix === "P" && caretNegation) {
            throw new SyntaxError(ERR_DOUBLE_NEG + fullToken);
          }
          if (!unicode.hasOwnProperty(slug)) {
            throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
          }
          if (typePrefix) {
            if (!(unicodeTypes[typePrefix] && unicodeTypes[typePrefix][slug])) {
              throw new SyntaxError(ERR_UNKNOWN_NAME + fullToken);
            }
          }
          if (item.inverseOf) {
            slug = normalize(item.inverseOf);
            if (!unicode.hasOwnProperty(slug)) {
              var _context3;
              throw new ReferenceError((0, _concat["default"])(_context3 = "".concat(ERR_UNKNOWN_REF + fullToken, " -> ")).call(_context3, item.inverseOf));
            }
            item = unicode[slug];
            isNegated = !isNegated;
          }
          if (!(item.bmp || isAstralMode)) {
            throw new SyntaxError(ERR_ASTRAL_ONLY + fullToken);
          }
          if (isAstralMode) {
            if (scope === "class") {
              throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
            }
            return cacheAstral(slug, isNegated);
          }
          return scope === "class" ? isNegated ? cacheInvertedBmp(slug) : item.bmp : "".concat((isNegated ? "[^" : "[") + item.bmp, "]");
        },
        {
          scope: "all",
          optionalFlags: "A",
          leadChar: "\\"
        }
      );
      XRegExp2.addUnicodeData = function(data, typePrefix) {
        var ERR_NO_NAME = "Unicode token requires name";
        var ERR_NO_DATA = "Unicode token has no character data ";
        if (typePrefix) {
          unicodeTypes[typePrefix] = {};
        }
        var _iterator = _createForOfIteratorHelper(data), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var item = _step.value;
            if (!item.name) {
              throw new Error(ERR_NO_NAME);
            }
            if (!(item.inverseOf || item.bmp || item.astral)) {
              throw new Error(ERR_NO_DATA + item.name);
            }
            var normalizedName = normalize(item.name);
            unicode[normalizedName] = item;
            if (typePrefix) {
              unicodeTypes[typePrefix][normalizedName] = true;
            }
            if (item.alias) {
              var normalizedAlias = normalize(item.alias);
              unicode[normalizedAlias] = item;
              if (typePrefix) {
                unicodeTypes[typePrefix][normalizedAlias] = true;
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        XRegExp2.cache.flush("patterns");
      };
      XRegExp2._getUnicodeProperty = function(name) {
        var slug = normalize(name);
        return unicode[slug];
      };
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/tools/output/categories.js
var require_categories = __commonJS({
  "node_modules/xregexp/tools/output/categories.js"(exports, module2) {
    module2.exports = [
      {
        "name": "C",
        "alias": "Other",
        "isBmpLast": true,
        "bmp": "\0-\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u0605\u061C\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F-\u0897\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCBD\uDCC3-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]"
      },
      {
        "name": "Cc",
        "alias": "Control",
        "bmp": "\0-\x7F-\x9F"
      },
      {
        "name": "Cf",
        "alias": "Format",
        "bmp": "\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB",
        "astral": "\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC38]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]"
      },
      {
        "name": "Cn",
        "alias": "Unassigned",
        "bmp": "\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EE\u05F5-\u05FF\u070E\u074B\u074C\u07B2-\u07BF\u07FB\u07FC\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u086F\u088F\u0892-\u0897\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A77-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C0D\u0C11\u0C29\u0C3A\u0C3B\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B\u0C5C\u0C5E\u0C5F\u0C64\u0C65\u0C70-\u0C76\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDC\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u1716-\u171E\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ACF-\u1AFF\u1B4D-\u1B4F\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1C8F\u1CBB\u1CBC\u1CC8-\u1CCF\u1CFB-\u1CFF\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C1-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E5E-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u3130\u318F\u31E4-\u31EF\u321F\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7CB-\uA7CF\uA7D2\uA7D4\uA7DA-\uA7F1\uA82D-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB6C-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC3-\uFBD2\uFD90\uFD91\uFDC8-\uFDCE\uFDD0-\uFDEF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF",
        "astral": "\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9D-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD7B\uDD8B\uDD93\uDD96\uDDA2\uDDB2\uDDBA\uDDBD-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDF7F\uDF86\uDFB1\uDFBB-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE49-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD28-\uDD2F\uDD3A-\uDE5F\uDE7F\uDEAA\uDEAE\uDEAF\uDEB2-\uDEFF\uDF28-\uDF2F\uDF5A-\uDF6F\uDF8A-\uDFAF\uDFCC-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC76-\uDC7E\uDCC3-\uDCCC\uDCCE\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD48-\uDD4F\uDD77-\uDD7F\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5C\uDC62-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEBA-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF47-\uDFFF]|\uD806[\uDC3C-\uDC9F\uDCF3-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD47-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE5-\uDDFF\uDE48-\uDE4F\uDEA3-\uDEAF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF9-\uDFAF\uDFB1-\uDFBF\uDFF2-\uDFFE]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80E-\uD810\uD812-\uD819\uD824-\uD82A\uD82D\uD82E\uD830-\uD832\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80B[\uDC00-\uDF8F\uDFF3-\uDFFF]|\uD80D[\uDC2F\uDC39-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDEBF\uDECA-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE9B-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82B[\uDC00-\uDFEF\uDFF4\uDFFC\uDFFF]|\uD82C[\uDD23-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD833[\uDC00-\uDEFF\uDF2E\uDF2F\uDF47-\uDF4F\uDFC4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDEB-\uDDFF\uDE46-\uDEDF\uDEF4-\uDEFF\uDF57-\uDF5F\uDF79-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD837[\uDC00-\uDEFF\uDF1F-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD50-\uDE8F\uDEAF-\uDEBF\uDEFA-\uDEFE\uDF00-\uDFFF]|\uD839[\uDC00-\uDFDF\uDFE7\uDFEC\uDFEF\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDC70\uDCB5-\uDD00\uDD3E-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDDAE-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED8-\uDEDC\uDEED-\uDEEF\uDEFD-\uDEFF\uDF74-\uDF7F\uDFD9-\uDFDF\uDFEC-\uDFEF\uDFF1-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE\uDCAF\uDCB2-\uDCFF\uDE54-\uDE5F\uDE6E\uDE6F\uDE75-\uDE77\uDE7D-\uDE7F\uDE87-\uDE8F\uDEAD-\uDEAF\uDEBB-\uDEBF\uDEC6-\uDECF\uDEDA-\uDEDF\uDEE8-\uDEEF\uDEF7-\uDEFF\uDF93\uDFCB-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEE0-\uDEFF]|\uD86D[\uDF39-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]"
      },
      {
        "name": "Co",
        "alias": "Private_Use",
        "bmp": "\uE000-\uF8FF",
        "astral": "[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]"
      },
      {
        "name": "Cs",
        "alias": "Surrogate",
        "bmp": "\uD800-\uDFFF"
      },
      {
        "name": "L",
        "alias": "Letter",
        "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "LC",
        "alias": "Cased_Letter",
        "bmp": "A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0560-\u0588\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FD-\u10FF\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F5\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A",
        "astral": "\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD81B[\uDE40-\uDE7F]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD00-\uDD43]"
      },
      {
        "name": "Ll",
        "alias": "Lowercase_Letter",
        "bmp": "a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7FA\uAB30-\uAB5A\uAB60-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
        "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
      },
      {
        "name": "Lm",
        "alias": "Modifier_Letter",
        "bmp": "\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u08C9\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F2-\uA7F4\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uAB69\uFF70\uFF9E\uFF9F",
        "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD838[\uDD37-\uDD3D]|\u{1E94B}"
      },
      {
        "name": "Lo",
        "alias": "Other_Letter",
        "bmp": "\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05EF-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C8\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1100-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF4A\uDF50]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\u{1DF0A}|\uD838[\uDD00-\uDD2C\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Lt",
        "alias": "Titlecase_Letter",
        "bmp": "\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC"
      },
      {
        "name": "Lu",
        "alias": "Uppercase_Letter",
        "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
        "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]"
      },
      {
        "name": "M",
        "alias": "Mark",
        "bmp": "\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC82\uDCB0-\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD34\uDD45\uDD46\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDC9-\uDDCC\uDDCE\uDDCF\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3B\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDC5E\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDC2C-\uDC3A\uDD30-\uDD35\uDD37\uDD38\uDD3B-\uDD3E\uDD40\uDD42\uDD43\uDDD1-\uDDD7\uDDDA-\uDDE0\uDDE4\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD8A-\uDD8E\uDD90\uDD91\uDD93-\uDD97\uDEF3-\uDEF6]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF51-\uDF87\uDF8F-\uDF92\uDFE4\uDFF0\uDFF1]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "Mc",
        "alias": "Spacing_Mark",
        "bmp": "\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC",
        "astral": "\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD30-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]"
      },
      {
        "name": "Me",
        "alias": "Enclosing_Mark",
        "bmp": "\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672"
      },
      {
        "name": "Mn",
        "alias": "Nonspacing_Mark",
        "bmp": "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F",
        "astral": "\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50\uDF82-\uDF85]|\uD804[\uDC01\uDC38-\uDC46\uDC70\uDC73\uDC74\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDCC2\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEAE\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "N",
        "alias": "Number",
        "bmp": "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDD30-\uDD39\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2\uDD50-\uDD59]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59\uDDA0-\uDDA9\uDFC0-\uDFD4]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nd",
        "alias": "Decimal_Number",
        "bmp": "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19",
        "astral": "\uD801[\uDCA0-\uDCA9]|\uD803[\uDD30-\uDD39]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9\uDD50-\uDD59]|\uD807[\uDC50-\uDC59\uDD50-\uDD59\uDDA0-\uDDA9]|\uD81A[\uDE60-\uDE69\uDEC0-\uDEC9\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD838[\uDD40-\uDD49\uDEF0-\uDEF9]|\uD83A[\uDD50-\uDD59]|\uD83E[\uDFF0-\uDFF9]"
      },
      {
        "name": "Nl",
        "alias": "Letter_Number",
        "bmp": "\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF",
        "astral": "\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]"
      },
      {
        "name": "No",
        "alias": "Other_Number",
        "bmp": "\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835",
        "astral": "\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE48\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E\uDF1D-\uDF26\uDF51-\uDF54\uDFC5-\uDFCB]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C\uDFC0-\uDFD4]|\uD81A[\uDF5B-\uDF61]|\uD81B[\uDE80-\uDE96]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD83A[\uDCC7-\uDCCF]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D]|\uD83C[\uDD00-\uDD0C]"
      },
      {
        "name": "P",
        "alias": "Punctuation",
        "bmp": "!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Pc",
        "alias": "Connector_Punctuation",
        "bmp": "_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F"
      },
      {
        "name": "Pd",
        "alias": "Dash_Punctuation",
        "bmp": "\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u2E5D\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D",
        "astral": "\u{10EAD}"
      },
      {
        "name": "Pe",
        "alias": "Close_Punctuation",
        "bmp": "\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u2E56\u2E58\u2E5A\u2E5C\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63"
      },
      {
        "name": "Pf",
        "alias": "Final_Punctuation",
        "bmp": "\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21"
      },
      {
        "name": "Pi",
        "alias": "Initial_Punctuation",
        "bmp": "\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20"
      },
      {
        "name": "Po",
        "alias": "Other_Punctuation",
        "bmp": "!-#%-'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E4F\u2E52-\u2E54\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65",
        "astral": "\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\u{1056F}|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\u{1BC9F}|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]"
      },
      {
        "name": "Ps",
        "alias": "Open_Punctuation",
        "bmp": "\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u2E55\u2E57\u2E59\u2E5B\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62"
      },
      {
        "name": "S",
        "alias": "Symbol",
        "bmp": "\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Sc",
        "alias": "Currency_Symbol",
        "bmp": "\\$\xA2-\xA5\u058F\u060B\u07FE\u07FF\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20C0\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6",
        "astral": "\uD807[\uDFDD-\uDFE0]|\u{1E2FF}|\u{1ECB0}"
      },
      {
        "name": "Sk",
        "alias": "Modifier_Symbol",
        "bmp": "\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u0888\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uAB6A\uAB6B\uFBB2-\uFBC2\uFF3E\uFF40\uFFE3",
        "astral": "\uD83C[\uDFFB-\uDFFF]"
      },
      {
        "name": "Sm",
        "alias": "Math_Symbol",
        "bmp": "\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC",
        "astral": "\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]"
      },
      {
        "name": "So",
        "alias": "Other_Symbol",
        "bmp": "\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFD40-\uFD4F\uFDCF\uFDFD-\uFDFF\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD",
        "astral": "\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\u{1173F}|\uD807[\uDFD5-\uDFDC\uDFE1-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\u{1BC9C}|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\u{1E14F}|\uD83B[\uDCAC\uDD2E]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA]"
      },
      {
        "name": "Z",
        "alias": "Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
      },
      {
        "name": "Zl",
        "alias": "Line_Separator",
        "bmp": "\u2028"
      },
      {
        "name": "Zp",
        "alias": "Paragraph_Separator",
        "bmp": "\u2029"
      },
      {
        "name": "Zs",
        "alias": "Space_Separator",
        "bmp": " \xA0\u1680\u2000-\u200A\u202F\u205F\u3000"
      }
    ];
  }
});

// node_modules/xregexp/lib/addons/unicode-categories.js
var require_unicode_categories = __commonJS({
  "node_modules/xregexp/lib/addons/unicode-categories.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _categories = _interopRequireDefault(require_categories());
    var _default = function _default2(XRegExp2) {
      if (!XRegExp2.addUnicodeData) {
        throw new ReferenceError("Unicode Base must be loaded before Unicode Categories");
      }
      XRegExp2.addUnicodeData(_categories["default"]);
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/tools/output/properties.js
var require_properties = __commonJS({
  "node_modules/xregexp/tools/output/properties.js"(exports, module2) {
    module2.exports = [
      {
        "name": "ASCII",
        "bmp": "\0-\x7F"
      },
      {
        "name": "Alphabetic",
        "bmp": "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05EF-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u108F\u109A-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1713\u171F-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1ABF\u1AC0\u1ACC-\u1ACE\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4C\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C36\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA805\uA807-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD-\uA8FF\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD27\uDE80-\uDEA9\uDEAB\uDEAC\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC00-\uDC45\uDC71-\uDC75\uDC82-\uDCB8\uDCC2\uDCD0-\uDCE8\uDD00-\uDD32\uDD44-\uDD47\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDCE\uDDCF\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDEB8\uDF00-\uDF1A\uDF1D-\uDF2A\uDF40-\uDF46]|\uD806[\uDC00-\uDC38\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B\uDD3C\uDD3F-\uDD42\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDDF\uDDE1\uDDE3\uDDE4\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE97\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD96\uDD98\uDEE0-\uDEF6\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F\uDFE0\uDFE1\uDFE3\uDFF0\uDFF1]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Any",
        "isBmpLast": true,
        "bmp": "\0-\uFFFF",
        "astral": "[\uD800-\uDBFF][\uDC00-\uDFFF]"
      },
      {
        "name": "Default_Ignorable_Code_Point",
        "bmp": "\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180F\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8",
        "astral": "\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]"
      },
      {
        "name": "Lowercase",
        "bmp": "a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5F\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7BB\uA7BD\uA7BF\uA7C1\uA7C3\uA7C8\uA7CA\uA7D1\uA7D3\uA7D5\uA7D7\uA7D9\uA7F6\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB68\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A",
        "astral": "\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDF80\uDF83-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD837[\uDF00-\uDF09\uDF0B-\uDF1E]|\uD83A[\uDD22-\uDD43]"
      },
      {
        "name": "Noncharacter_Code_Point",
        "bmp": "\uFDD0-\uFDEF\uFFFE\uFFFF",
        "astral": "[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]"
      },
      {
        "name": "Uppercase",
        "bmp": "A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2F\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uA7BA\uA7BC\uA7BE\uA7C0\uA7C2\uA7C4-\uA7C7\uA7C9\uA7D0\uA7D6\uA7D8\uA7F5\uFF21-\uFF3A",
        "astral": "\uD801[\uDC00-\uDC27\uDCB0-\uDCD3\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]"
      },
      {
        "name": "White_Space",
        "bmp": "	-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000"
      }
    ];
  }
});

// node_modules/xregexp/lib/addons/unicode-properties.js
var require_unicode_properties = __commonJS({
  "node_modules/xregexp/lib/addons/unicode-properties.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _properties = _interopRequireDefault(require_properties());
    var _default = function _default2(XRegExp2) {
      if (!XRegExp2.addUnicodeData) {
        throw new ReferenceError("Unicode Base must be loaded before Unicode Properties");
      }
      var unicodeData = _properties["default"];
      unicodeData.push({
        name: "Assigned",
        // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
        // Categories addon is required to use this property
        inverseOf: "Cn"
      });
      XRegExp2.addUnicodeData(unicodeData);
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/tools/output/scripts.js
var require_scripts = __commonJS({
  "node_modules/xregexp/tools/output/scripts.js"(exports, module2) {
    module2.exports = [
      {
        "name": "Adlam",
        "astral": "\uD83A[\uDD00-\uDD4B\uDD50-\uDD59\uDD5E\uDD5F]"
      },
      {
        "name": "Ahom",
        "astral": "\uD805[\uDF00-\uDF1A\uDF1D-\uDF2B\uDF30-\uDF46]"
      },
      {
        "name": "Anatolian_Hieroglyphs",
        "astral": "\uD811[\uDC00-\uDE46]"
      },
      {
        "name": "Arabic",
        "bmp": "\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C-\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u0870-\u088E\u0890\u0891\u0898-\u08E1\u08E3-\u08FF\uFB50-\uFBC2\uFBD3-\uFD3D\uFD40-\uFD8F\uFD92-\uFDC7\uFDCF\uFDF0-\uFDFF\uFE70-\uFE74\uFE76-\uFEFC",
        "astral": "\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]"
      },
      {
        "name": "Armenian",
        "bmp": "\u0531-\u0556\u0559-\u058A\u058D-\u058F\uFB13-\uFB17"
      },
      {
        "name": "Avestan",
        "astral": "\uD802[\uDF00-\uDF35\uDF39-\uDF3F]"
      },
      {
        "name": "Balinese",
        "bmp": "\u1B00-\u1B4C\u1B50-\u1B7E"
      },
      {
        "name": "Bamum",
        "bmp": "\uA6A0-\uA6F7",
        "astral": "\uD81A[\uDC00-\uDE38]"
      },
      {
        "name": "Bassa_Vah",
        "astral": "\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]"
      },
      {
        "name": "Batak",
        "bmp": "\u1BC0-\u1BF3\u1BFC-\u1BFF"
      },
      {
        "name": "Bengali",
        "bmp": "\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE"
      },
      {
        "name": "Bhaiksuki",
        "astral": "\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]"
      },
      {
        "name": "Bopomofo",
        "bmp": "\u02EA\u02EB\u3105-\u312F\u31A0-\u31BF"
      },
      {
        "name": "Brahmi",
        "astral": "\uD804[\uDC00-\uDC4D\uDC52-\uDC75\uDC7F]"
      },
      {
        "name": "Braille",
        "bmp": "\u2800-\u28FF"
      },
      {
        "name": "Buginese",
        "bmp": "\u1A00-\u1A1B\u1A1E\u1A1F"
      },
      {
        "name": "Buhid",
        "bmp": "\u1740-\u1753"
      },
      {
        "name": "Canadian_Aboriginal",
        "bmp": "\u1400-\u167F\u18B0-\u18F5",
        "astral": "\uD806[\uDEB0-\uDEBF]"
      },
      {
        "name": "Carian",
        "astral": "\uD800[\uDEA0-\uDED0]"
      },
      {
        "name": "Caucasian_Albanian",
        "astral": "\uD801[\uDD30-\uDD63\uDD6F]"
      },
      {
        "name": "Chakma",
        "astral": "\uD804[\uDD00-\uDD34\uDD36-\uDD47]"
      },
      {
        "name": "Cham",
        "bmp": "\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F"
      },
      {
        "name": "Cherokee",
        "bmp": "\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF"
      },
      {
        "name": "Chorasmian",
        "astral": "\uD803[\uDFB0-\uDFCB]"
      },
      {
        "name": "Common",
        "bmp": "\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20C0\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2E00-\u2E5D\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u32FF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uAB6A\uAB6B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD",
        "astral": "\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9C\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDEE0-\uDEF3\uDF00-\uDF56\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83B[\uDC71-\uDCB4\uDD01-\uDD3D]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDDAD\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDD-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6\uDF00-\uDF92\uDF94-\uDFCA\uDFF0-\uDFF9]|\uDB40[\uDC01\uDC20-\uDC7F]"
      },
      {
        "name": "Coptic",
        "bmp": "\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF"
      },
      {
        "name": "Cuneiform",
        "astral": "\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]"
      },
      {
        "name": "Cypriot",
        "astral": "\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]"
      },
      {
        "name": "Cypro_Minoan",
        "astral": "\uD80B[\uDF90-\uDFF2]"
      },
      {
        "name": "Cyrillic",
        "bmp": "\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F"
      },
      {
        "name": "Deseret",
        "astral": "\uD801[\uDC00-\uDC4F]"
      },
      {
        "name": "Devanagari",
        "bmp": "\u0900-\u0950\u0955-\u0963\u0966-\u097F\uA8E0-\uA8FF"
      },
      {
        "name": "Dives_Akuru",
        "astral": "\uD806[\uDD00-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD35\uDD37\uDD38\uDD3B-\uDD46\uDD50-\uDD59]"
      },
      {
        "name": "Dogra",
        "astral": "\uD806[\uDC00-\uDC3B]"
      },
      {
        "name": "Duployan",
        "astral": "\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]"
      },
      {
        "name": "Egyptian_Hieroglyphs",
        "astral": "\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E\uDC30-\uDC38]"
      },
      {
        "name": "Elbasan",
        "astral": "\uD801[\uDD00-\uDD27]"
      },
      {
        "name": "Elymaic",
        "astral": "\uD803[\uDFE0-\uDFF6]"
      },
      {
        "name": "Ethiopic",
        "bmp": "\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E",
        "astral": "\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]"
      },
      {
        "name": "Georgian",
        "bmp": "\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u1C90-\u1CBA\u1CBD-\u1CBF\u2D00-\u2D25\u2D27\u2D2D"
      },
      {
        "name": "Glagolitic",
        "bmp": "\u2C00-\u2C5F",
        "astral": "\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]"
      },
      {
        "name": "Gothic",
        "astral": "\uD800[\uDF30-\uDF4A]"
      },
      {
        "name": "Grantha",
        "astral": "\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]"
      },
      {
        "name": "Greek",
        "bmp": "\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65",
        "astral": "\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]"
      },
      {
        "name": "Gujarati",
        "bmp": "\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF"
      },
      {
        "name": "Gunjala_Gondi",
        "astral": "\uD807[\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD8E\uDD90\uDD91\uDD93-\uDD98\uDDA0-\uDDA9]"
      },
      {
        "name": "Gurmukhi",
        "bmp": "\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76"
      },
      {
        "name": "Han",
        "bmp": "\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFA6D\uFA70-\uFAD9",
        "astral": "\uD81B[\uDFE2\uDFE3\uDFF0\uDFF1]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A]"
      },
      {
        "name": "Hangul",
        "bmp": "\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC"
      },
      {
        "name": "Hanifi_Rohingya",
        "astral": "\uD803[\uDD00-\uDD27\uDD30-\uDD39]"
      },
      {
        "name": "Hanunoo",
        "bmp": "\u1720-\u1734"
      },
      {
        "name": "Hatran",
        "astral": "\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]"
      },
      {
        "name": "Hebrew",
        "bmp": "\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F"
      },
      {
        "name": "Hiragana",
        "bmp": "\u3041-\u3096\u309D-\u309F",
        "astral": "\uD82C[\uDC01-\uDD1F\uDD50-\uDD52]|\u{1F200}"
      },
      {
        "name": "Imperial_Aramaic",
        "astral": "\uD802[\uDC40-\uDC55\uDC57-\uDC5F]"
      },
      {
        "name": "Inherited",
        "bmp": "\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951-\u0954\u1AB0-\u1ACE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D",
        "astral": "\uD800[\uDDFD\uDEE0]|\u{1133B}|\uD833[\uDF00-\uDF2D\uDF30-\uDF46]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]"
      },
      {
        "name": "Inscriptional_Pahlavi",
        "astral": "\uD802[\uDF60-\uDF72\uDF78-\uDF7F]"
      },
      {
        "name": "Inscriptional_Parthian",
        "astral": "\uD802[\uDF40-\uDF55\uDF58-\uDF5F]"
      },
      {
        "name": "Javanese",
        "bmp": "\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF"
      },
      {
        "name": "Kaithi",
        "astral": "\uD804[\uDC80-\uDCC2\uDCCD]"
      },
      {
        "name": "Kannada",
        "bmp": "\u0C80-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2"
      },
      {
        "name": "Katakana",
        "bmp": "\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D",
        "astral": "\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00\uDD20-\uDD22\uDD64-\uDD67]"
      },
      {
        "name": "Kayah_Li",
        "bmp": "\uA900-\uA92D\uA92F"
      },
      {
        "name": "Kharoshthi",
        "astral": "\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE38-\uDE3A\uDE3F-\uDE48\uDE50-\uDE58]"
      },
      {
        "name": "Khitan_Small_Script",
        "astral": "\u{16FE4}|\uD822[\uDF00-\uDFFF]|\uD823[\uDC00-\uDCD5]"
      },
      {
        "name": "Khmer",
        "bmp": "\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF"
      },
      {
        "name": "Khojki",
        "astral": "\uD804[\uDE00-\uDE11\uDE13-\uDE3E]"
      },
      {
        "name": "Khudawadi",
        "astral": "\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]"
      },
      {
        "name": "Lao",
        "bmp": "\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF"
      },
      {
        "name": "Latin",
        "bmp": "A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uAB66-\uAB69\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A",
        "astral": "\uD801[\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD837[\uDF00-\uDF1E]"
      },
      {
        "name": "Lepcha",
        "bmp": "\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F"
      },
      {
        "name": "Limbu",
        "bmp": "\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F"
      },
      {
        "name": "Linear_A",
        "astral": "\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]"
      },
      {
        "name": "Linear_B",
        "astral": "\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]"
      },
      {
        "name": "Lisu",
        "bmp": "\uA4D0-\uA4FF",
        "astral": "\u{11FB0}"
      },
      {
        "name": "Lycian",
        "astral": "\uD800[\uDE80-\uDE9C]"
      },
      {
        "name": "Lydian",
        "astral": "\uD802[\uDD20-\uDD39\uDD3F]"
      },
      {
        "name": "Mahajani",
        "astral": "\uD804[\uDD50-\uDD76]"
      },
      {
        "name": "Makasar",
        "astral": "\uD807[\uDEE0-\uDEF8]"
      },
      {
        "name": "Malayalam",
        "bmp": "\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F"
      },
      {
        "name": "Mandaic",
        "bmp": "\u0840-\u085B\u085E"
      },
      {
        "name": "Manichaean",
        "astral": "\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]"
      },
      {
        "name": "Marchen",
        "astral": "\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]"
      },
      {
        "name": "Masaram_Gondi",
        "astral": "\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]"
      },
      {
        "name": "Medefaidrin",
        "astral": "\uD81B[\uDE40-\uDE9A]"
      },
      {
        "name": "Meetei_Mayek",
        "bmp": "\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9"
      },
      {
        "name": "Mende_Kikakui",
        "astral": "\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]"
      },
      {
        "name": "Meroitic_Cursive",
        "astral": "\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]"
      },
      {
        "name": "Meroitic_Hieroglyphs",
        "astral": "\uD802[\uDD80-\uDD9F]"
      },
      {
        "name": "Miao",
        "astral": "\uD81B[\uDF00-\uDF4A\uDF4F-\uDF87\uDF8F-\uDF9F]"
      },
      {
        "name": "Modi",
        "astral": "\uD805[\uDE00-\uDE44\uDE50-\uDE59]"
      },
      {
        "name": "Mongolian",
        "bmp": "\u1800\u1801\u1804\u1806-\u1819\u1820-\u1878\u1880-\u18AA",
        "astral": "\uD805[\uDE60-\uDE6C]"
      },
      {
        "name": "Mro",
        "astral": "\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]"
      },
      {
        "name": "Multani",
        "astral": "\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]"
      },
      {
        "name": "Myanmar",
        "bmp": "\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F"
      },
      {
        "name": "Nabataean",
        "astral": "\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]"
      },
      {
        "name": "Nandinagari",
        "astral": "\uD806[\uDDA0-\uDDA7\uDDAA-\uDDD7\uDDDA-\uDDE4]"
      },
      {
        "name": "New_Tai_Lue",
        "bmp": "\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF"
      },
      {
        "name": "Newa",
        "astral": "\uD805[\uDC00-\uDC5B\uDC5D-\uDC61]"
      },
      {
        "name": "Nko",
        "bmp": "\u07C0-\u07FA\u07FD-\u07FF"
      },
      {
        "name": "Nushu",
        "astral": "\u{16FE1}|\uD82C[\uDD70-\uDEFB]"
      },
      {
        "name": "Nyiakeng_Puachue_Hmong",
        "astral": "\uD838[\uDD00-\uDD2C\uDD30-\uDD3D\uDD40-\uDD49\uDD4E\uDD4F]"
      },
      {
        "name": "Ogham",
        "bmp": "\u1680-\u169C"
      },
      {
        "name": "Ol_Chiki",
        "bmp": "\u1C50-\u1C7F"
      },
      {
        "name": "Old_Hungarian",
        "astral": "\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]"
      },
      {
        "name": "Old_Italic",
        "astral": "\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]"
      },
      {
        "name": "Old_North_Arabian",
        "astral": "\uD802[\uDE80-\uDE9F]"
      },
      {
        "name": "Old_Permic",
        "astral": "\uD800[\uDF50-\uDF7A]"
      },
      {
        "name": "Old_Persian",
        "astral": "\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]"
      },
      {
        "name": "Old_Sogdian",
        "astral": "\uD803[\uDF00-\uDF27]"
      },
      {
        "name": "Old_South_Arabian",
        "astral": "\uD802[\uDE60-\uDE7F]"
      },
      {
        "name": "Old_Turkic",
        "astral": "\uD803[\uDC00-\uDC48]"
      },
      {
        "name": "Old_Uyghur",
        "astral": "\uD803[\uDF70-\uDF89]"
      },
      {
        "name": "Oriya",
        "bmp": "\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77"
      },
      {
        "name": "Osage",
        "astral": "\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]"
      },
      {
        "name": "Osmanya",
        "astral": "\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]"
      },
      {
        "name": "Pahawh_Hmong",
        "astral": "\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]"
      },
      {
        "name": "Palmyrene",
        "astral": "\uD802[\uDC60-\uDC7F]"
      },
      {
        "name": "Pau_Cin_Hau",
        "astral": "\uD806[\uDEC0-\uDEF8]"
      },
      {
        "name": "Phags_Pa",
        "bmp": "\uA840-\uA877"
      },
      {
        "name": "Phoenician",
        "astral": "\uD802[\uDD00-\uDD1B\uDD1F]"
      },
      {
        "name": "Psalter_Pahlavi",
        "astral": "\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]"
      },
      {
        "name": "Rejang",
        "bmp": "\uA930-\uA953\uA95F"
      },
      {
        "name": "Runic",
        "bmp": "\u16A0-\u16EA\u16EE-\u16F8"
      },
      {
        "name": "Samaritan",
        "bmp": "\u0800-\u082D\u0830-\u083E"
      },
      {
        "name": "Saurashtra",
        "bmp": "\uA880-\uA8C5\uA8CE-\uA8D9"
      },
      {
        "name": "Sharada",
        "astral": "\uD804[\uDD80-\uDDDF]"
      },
      {
        "name": "Shavian",
        "astral": "\uD801[\uDC50-\uDC7F]"
      },
      {
        "name": "Siddham",
        "astral": "\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]"
      },
      {
        "name": "SignWriting",
        "astral": "\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]"
      },
      {
        "name": "Sinhala",
        "bmp": "\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4",
        "astral": "\uD804[\uDDE1-\uDDF4]"
      },
      {
        "name": "Sogdian",
        "astral": "\uD803[\uDF30-\uDF59]"
      },
      {
        "name": "Sora_Sompeng",
        "astral": "\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]"
      },
      {
        "name": "Soyombo",
        "astral": "\uD806[\uDE50-\uDEA2]"
      },
      {
        "name": "Sundanese",
        "bmp": "\u1B80-\u1BBF\u1CC0-\u1CC7"
      },
      {
        "name": "Syloti_Nagri",
        "bmp": "\uA800-\uA82C"
      },
      {
        "name": "Syriac",
        "bmp": "\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A"
      },
      {
        "name": "Tagalog",
        "bmp": "\u1700-\u1715\u171F"
      },
      {
        "name": "Tagbanwa",
        "bmp": "\u1760-\u176C\u176E-\u1770\u1772\u1773"
      },
      {
        "name": "Tai_Le",
        "bmp": "\u1950-\u196D\u1970-\u1974"
      },
      {
        "name": "Tai_Tham",
        "bmp": "\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD"
      },
      {
        "name": "Tai_Viet",
        "bmp": "\uAA80-\uAAC2\uAADB-\uAADF"
      },
      {
        "name": "Takri",
        "astral": "\uD805[\uDE80-\uDEB9\uDEC0-\uDEC9]"
      },
      {
        "name": "Tamil",
        "bmp": "\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA",
        "astral": "\uD807[\uDFC0-\uDFF1\uDFFF]"
      },
      {
        "name": "Tangsa",
        "astral": "\uD81A[\uDE70-\uDEBE\uDEC0-\uDEC9]"
      },
      {
        "name": "Tangut",
        "astral": "\u{16FE0}|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFF7]|\uD822[\uDC00-\uDEFF]|\uD823[\uDD00-\uDD08]"
      },
      {
        "name": "Telugu",
        "bmp": "\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C7F"
      },
      {
        "name": "Thaana",
        "bmp": "\u0780-\u07B1"
      },
      {
        "name": "Thai",
        "bmp": "\u0E01-\u0E3A\u0E40-\u0E5B"
      },
      {
        "name": "Tibetan",
        "bmp": "\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA"
      },
      {
        "name": "Tifinagh",
        "bmp": "\u2D30-\u2D67\u2D6F\u2D70\u2D7F"
      },
      {
        "name": "Tirhuta",
        "astral": "\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]"
      },
      {
        "name": "Toto",
        "astral": "\uD838[\uDE90-\uDEAE]"
      },
      {
        "name": "Ugaritic",
        "astral": "\uD800[\uDF80-\uDF9D\uDF9F]"
      },
      {
        "name": "Vai",
        "bmp": "\uA500-\uA62B"
      },
      {
        "name": "Vithkuqi",
        "astral": "\uD801[\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC]"
      },
      {
        "name": "Wancho",
        "astral": "\uD838[\uDEC0-\uDEF9\uDEFF]"
      },
      {
        "name": "Warang_Citi",
        "astral": "\uD806[\uDCA0-\uDCF2\uDCFF]"
      },
      {
        "name": "Yezidi",
        "astral": "\uD803[\uDE80-\uDEA9\uDEAB-\uDEAD\uDEB0\uDEB1]"
      },
      {
        "name": "Yi",
        "bmp": "\uA000-\uA48C\uA490-\uA4C6"
      },
      {
        "name": "Zanabazar_Square",
        "astral": "\uD806[\uDE00-\uDE47]"
      }
    ];
  }
});

// node_modules/xregexp/lib/addons/unicode-scripts.js
var require_unicode_scripts = __commonJS({
  "node_modules/xregexp/lib/addons/unicode-scripts.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _scripts = _interopRequireDefault(require_scripts());
    var _default = function _default2(XRegExp2) {
      if (!XRegExp2.addUnicodeData) {
        throw new ReferenceError("Unicode Base must be loaded before Unicode Scripts");
      }
      XRegExp2.addUnicodeData(_scripts["default"], "Script");
    };
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/xregexp/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/xregexp/lib/index.js"(exports, module2) {
    "use strict";
    var _Object$defineProperty = require_define_property3();
    var _interopRequireDefault = require_interopRequireDefault();
    _Object$defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = void 0;
    var _xregexp = _interopRequireDefault(require_xregexp());
    var _build = _interopRequireDefault(require_build());
    var _matchrecursive = _interopRequireDefault(require_matchrecursive());
    var _unicodeBase = _interopRequireDefault(require_unicode_base());
    var _unicodeCategories = _interopRequireDefault(require_unicode_categories());
    var _unicodeProperties = _interopRequireDefault(require_unicode_properties());
    var _unicodeScripts = _interopRequireDefault(require_unicode_scripts());
    (0, _build["default"])(_xregexp["default"]);
    (0, _matchrecursive["default"])(_xregexp["default"]);
    (0, _unicodeBase["default"])(_xregexp["default"]);
    (0, _unicodeCategories["default"])(_xregexp["default"]);
    (0, _unicodeProperties["default"])(_xregexp["default"]);
    (0, _unicodeScripts["default"])(_xregexp["default"]);
    var _default = _xregexp["default"];
    exports["default"] = _default;
    module2.exports = exports.default;
  }
});

// node_modules/loglevel/lib/loglevel.js
var require_loglevel = __commonJS({
  "node_modules/loglevel/lib/loglevel.js"(exports, module2) {
    (function(root, definition) {
      "use strict";
      if (typeof define === "function" && define.amd) {
        define(definition);
      } else if (typeof module2 === "object" && module2.exports) {
        module2.exports = definition();
      } else {
        root.log = definition();
      }
    })(exports, function() {
      "use strict";
      var noop = function() {
      };
      var undefinedType = "undefined";
      var isIE = typeof window !== undefinedType && typeof window.navigator !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
      var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
      ];
      function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === "function") {
          return method.bind(obj);
        } else {
          try {
            return Function.prototype.bind.call(method, obj);
          } catch (e) {
            return function() {
              return Function.prototype.apply.apply(method, [obj, arguments]);
            };
          }
        }
      }
      function traceForIE() {
        if (console.log) {
          if (console.log.apply) {
            console.log.apply(console, arguments);
          } else {
            Function.prototype.apply.apply(console.log, [console, arguments]);
          }
        }
        if (console.trace)
          console.trace();
      }
      function realMethod(methodName) {
        if (methodName === "debug") {
          methodName = "log";
        }
        if (typeof console === undefinedType) {
          return false;
        } else if (methodName === "trace" && isIE) {
          return traceForIE;
        } else if (console[methodName] !== void 0) {
          return bindMethod(console, methodName);
        } else if (console.log !== void 0) {
          return bindMethod(console, "log");
        } else {
          return noop;
        }
      }
      function replaceLoggingMethods(level, loggerName) {
        for (var i = 0; i < logMethods.length; i++) {
          var methodName = logMethods[i];
          this[methodName] = i < level ? noop : this.methodFactory(methodName, level, loggerName);
        }
        this.log = this.debug;
      }
      function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function() {
          if (typeof console !== undefinedType) {
            replaceLoggingMethods.call(this, level, loggerName);
            this[methodName].apply(this, arguments);
          }
        };
      }
      function defaultMethodFactory(methodName, level, loggerName) {
        return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
      }
      function Logger(name, defaultLevel, factory) {
        var self2 = this;
        var currentLevel;
        defaultLevel = defaultLevel == null ? "WARN" : defaultLevel;
        var storageKey = "loglevel";
        if (typeof name === "string") {
          storageKey += ":" + name;
        } else if (typeof name === "symbol") {
          storageKey = void 0;
        }
        function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || "silent").toUpperCase();
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage[storageKey] = levelName;
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {
          }
        }
        function getPersistedLevel() {
          var storedLevel;
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            storedLevel = window.localStorage[storageKey];
          } catch (ignore) {
          }
          if (typeof storedLevel === undefinedType) {
            try {
              var cookie = window.document.cookie;
              var location = cookie.indexOf(
                encodeURIComponent(storageKey) + "="
              );
              if (location !== -1) {
                storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
              }
            } catch (ignore) {
            }
          }
          if (self2.levels[storedLevel] === void 0) {
            storedLevel = void 0;
          }
          return storedLevel;
        }
        function clearPersistedLevel() {
          if (typeof window === undefinedType || !storageKey)
            return;
          try {
            window.localStorage.removeItem(storageKey);
            return;
          } catch (ignore) {
          }
          try {
            window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
          } catch (ignore) {
          }
        }
        self2.name = name;
        self2.levels = {
          "TRACE": 0,
          "DEBUG": 1,
          "INFO": 2,
          "WARN": 3,
          "ERROR": 4,
          "SILENT": 5
        };
        self2.methodFactory = factory || defaultMethodFactory;
        self2.getLevel = function() {
          return currentLevel;
        };
        self2.setLevel = function(level, persist) {
          if (typeof level === "string" && self2.levels[level.toUpperCase()] !== void 0) {
            level = self2.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self2.levels.SILENT) {
            currentLevel = level;
            if (persist !== false) {
              persistLevelIfPossible(level);
            }
            replaceLoggingMethods.call(self2, level, name);
            if (typeof console === undefinedType && level < self2.levels.SILENT) {
              return "No console available for logging";
            }
          } else {
            throw "log.setLevel() called with invalid level: " + level;
          }
        };
        self2.setDefaultLevel = function(level) {
          defaultLevel = level;
          if (!getPersistedLevel()) {
            self2.setLevel(level, false);
          }
        };
        self2.resetLevel = function() {
          self2.setLevel(defaultLevel, false);
          clearPersistedLevel();
        };
        self2.enableAll = function(persist) {
          self2.setLevel(self2.levels.TRACE, persist);
        };
        self2.disableAll = function(persist) {
          self2.setLevel(self2.levels.SILENT, persist);
        };
        var initialLevel = getPersistedLevel();
        if (initialLevel == null) {
          initialLevel = defaultLevel;
        }
        self2.setLevel(initialLevel, false);
      }
      var defaultLogger = new Logger();
      var _loggersByName = {};
      defaultLogger.getLogger = function getLogger2(name) {
        if (typeof name !== "symbol" && typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }
        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name,
            defaultLogger.getLevel(),
            defaultLogger.methodFactory
          );
        }
        return logger;
      };
      var _log = typeof window !== undefinedType ? window.log : void 0;
      defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType && window.log === defaultLogger) {
          window.log = _log;
        }
        return defaultLogger;
      };
      defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
      };
      defaultLogger["default"] = defaultLogger;
      return defaultLogger;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WebdavFileExplorerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");
var import_web3 = __toESM(require_web());

// src/remoteForWebdav.ts
var import_buffer = require("buffer");
var import_obsidian2 = require("obsidian");
var import_tsqueue = __toESM(require_dist());
var import_chunk = __toESM(require_chunk());
var import_flatten = __toESM(require_flatten());

// node_modules/http-status-codes/build/es/legacy.js
var ACCEPTED = 202;
var BAD_GATEWAY = 502;
var BAD_REQUEST = 400;
var CONFLICT = 409;
var CONTINUE = 100;
var CREATED = 201;
var EXPECTATION_FAILED = 417;
var FORBIDDEN = 403;
var GATEWAY_TIMEOUT = 504;
var GONE = 410;
var HTTP_VERSION_NOT_SUPPORTED = 505;
var IM_A_TEAPOT = 418;
var INSUFFICIENT_SPACE_ON_RESOURCE = 419;
var INSUFFICIENT_STORAGE = 507;
var INTERNAL_SERVER_ERROR = 500;
var LENGTH_REQUIRED = 411;
var LOCKED = 423;
var METHOD_FAILURE = 420;
var METHOD_NOT_ALLOWED = 405;
var MOVED_PERMANENTLY = 301;
var MOVED_TEMPORARILY = 302;
var MULTI_STATUS = 207;
var MULTIPLE_CHOICES = 300;
var NETWORK_AUTHENTICATION_REQUIRED = 511;
var NO_CONTENT = 204;
var NON_AUTHORITATIVE_INFORMATION = 203;
var NOT_ACCEPTABLE = 406;
var NOT_FOUND = 404;
var NOT_IMPLEMENTED = 501;
var NOT_MODIFIED = 304;
var OK = 200;
var PARTIAL_CONTENT = 206;
var PAYMENT_REQUIRED = 402;
var PERMANENT_REDIRECT = 308;
var PRECONDITION_FAILED = 412;
var PRECONDITION_REQUIRED = 428;
var PROCESSING = 102;
var PROXY_AUTHENTICATION_REQUIRED = 407;
var REQUEST_HEADER_FIELDS_TOO_LARGE = 431;
var REQUEST_TIMEOUT = 408;
var REQUEST_TOO_LONG = 413;
var REQUEST_URI_TOO_LONG = 414;
var REQUESTED_RANGE_NOT_SATISFIABLE = 416;
var RESET_CONTENT = 205;
var SEE_OTHER = 303;
var SERVICE_UNAVAILABLE = 503;
var SWITCHING_PROTOCOLS = 101;
var TEMPORARY_REDIRECT = 307;
var TOO_MANY_REQUESTS = 429;
var UNAUTHORIZED = 401;
var UNPROCESSABLE_ENTITY = 422;
var UNSUPPORTED_MEDIA_TYPE = 415;
var USE_PROXY = 305;
var legacy_default = {
  ACCEPTED,
  BAD_GATEWAY,
  BAD_REQUEST,
  CONFLICT,
  CONTINUE,
  CREATED,
  EXPECTATION_FAILED,
  FORBIDDEN,
  GATEWAY_TIMEOUT,
  GONE,
  HTTP_VERSION_NOT_SUPPORTED,
  IM_A_TEAPOT,
  INSUFFICIENT_SPACE_ON_RESOURCE,
  INSUFFICIENT_STORAGE,
  INTERNAL_SERVER_ERROR,
  LENGTH_REQUIRED,
  LOCKED,
  METHOD_FAILURE,
  METHOD_NOT_ALLOWED,
  MOVED_PERMANENTLY,
  MOVED_TEMPORARILY,
  MULTI_STATUS,
  MULTIPLE_CHOICES,
  NETWORK_AUTHENTICATION_REQUIRED,
  NO_CONTENT,
  NON_AUTHORITATIVE_INFORMATION,
  NOT_ACCEPTABLE,
  NOT_FOUND,
  NOT_IMPLEMENTED,
  NOT_MODIFIED,
  OK,
  PARTIAL_CONTENT,
  PAYMENT_REQUIRED,
  PERMANENT_REDIRECT,
  PRECONDITION_FAILED,
  PRECONDITION_REQUIRED,
  PROCESSING,
  PROXY_AUTHENTICATION_REQUIRED,
  REQUEST_HEADER_FIELDS_TOO_LARGE,
  REQUEST_TIMEOUT,
  REQUEST_TOO_LONG,
  REQUEST_URI_TOO_LONG,
  REQUESTED_RANGE_NOT_SATISFIABLE,
  RESET_CONTENT,
  SEE_OTHER,
  SERVICE_UNAVAILABLE,
  SWITCHING_PROTOCOLS,
  TEMPORARY_REDIRECT,
  TOO_MANY_REQUESTS,
  UNAUTHORIZED,
  UNPROCESSABLE_ENTITY,
  UNSUPPORTED_MEDIA_TYPE,
  USE_PROXY
};

// node_modules/http-status-codes/build/es/utils.js
var statusCodeToReasonPhrase = {
  "202": "Accepted",
  "502": "Bad Gateway",
  "400": "Bad Request",
  "409": "Conflict",
  "100": "Continue",
  "201": "Created",
  "417": "Expectation Failed",
  "424": "Failed Dependency",
  "403": "Forbidden",
  "504": "Gateway Timeout",
  "410": "Gone",
  "505": "HTTP Version Not Supported",
  "418": "I'm a teapot",
  "419": "Insufficient Space on Resource",
  "507": "Insufficient Storage",
  "500": "Internal Server Error",
  "411": "Length Required",
  "423": "Locked",
  "420": "Method Failure",
  "405": "Method Not Allowed",
  "301": "Moved Permanently",
  "302": "Moved Temporarily",
  "207": "Multi-Status",
  "300": "Multiple Choices",
  "511": "Network Authentication Required",
  "204": "No Content",
  "203": "Non Authoritative Information",
  "406": "Not Acceptable",
  "404": "Not Found",
  "501": "Not Implemented",
  "304": "Not Modified",
  "200": "OK",
  "206": "Partial Content",
  "402": "Payment Required",
  "308": "Permanent Redirect",
  "412": "Precondition Failed",
  "428": "Precondition Required",
  "102": "Processing",
  "407": "Proxy Authentication Required",
  "431": "Request Header Fields Too Large",
  "408": "Request Timeout",
  "413": "Request Entity Too Large",
  "414": "Request-URI Too Long",
  "416": "Requested Range Not Satisfiable",
  "205": "Reset Content",
  "303": "See Other",
  "503": "Service Unavailable",
  "101": "Switching Protocols",
  "307": "Temporary Redirect",
  "429": "Too Many Requests",
  "401": "Unauthorized",
  "451": "Unavailable For Legal Reasons",
  "422": "Unprocessable Entity",
  "415": "Unsupported Media Type",
  "305": "Use Proxy",
  "421": "Misdirected Request"
};
var reasonPhraseToStatusCode = {
  "Accepted": 202,
  "Bad Gateway": 502,
  "Bad Request": 400,
  "Conflict": 409,
  "Continue": 100,
  "Created": 201,
  "Expectation Failed": 417,
  "Failed Dependency": 424,
  "Forbidden": 403,
  "Gateway Timeout": 504,
  "Gone": 410,
  "HTTP Version Not Supported": 505,
  "I'm a teapot": 418,
  "Insufficient Space on Resource": 419,
  "Insufficient Storage": 507,
  "Internal Server Error": 500,
  "Length Required": 411,
  "Locked": 423,
  "Method Failure": 420,
  "Method Not Allowed": 405,
  "Moved Permanently": 301,
  "Moved Temporarily": 302,
  "Multi-Status": 207,
  "Multiple Choices": 300,
  "Network Authentication Required": 511,
  "No Content": 204,
  "Non Authoritative Information": 203,
  "Not Acceptable": 406,
  "Not Found": 404,
  "Not Implemented": 501,
  "Not Modified": 304,
  "OK": 200,
  "Partial Content": 206,
  "Payment Required": 402,
  "Permanent Redirect": 308,
  "Precondition Failed": 412,
  "Precondition Required": 428,
  "Processing": 102,
  "Proxy Authentication Required": 407,
  "Request Header Fields Too Large": 431,
  "Request Timeout": 408,
  "Request Entity Too Large": 413,
  "Request-URI Too Long": 414,
  "Requested Range Not Satisfiable": 416,
  "Reset Content": 205,
  "See Other": 303,
  "Service Unavailable": 503,
  "Switching Protocols": 101,
  "Temporary Redirect": 307,
  "Too Many Requests": 429,
  "Unauthorized": 401,
  "Unavailable For Legal Reasons": 451,
  "Unprocessable Entity": 422,
  "Unsupported Media Type": 415,
  "Use Proxy": 305,
  "Misdirected Request": 421
};

// node_modules/http-status-codes/build/es/utils-functions.js
function getReasonPhrase(statusCode) {
  var result = statusCodeToReasonPhrase[statusCode.toString()];
  if (!result) {
    throw new Error("Status code does not exist: " + statusCode);
  }
  return result;
}
function getStatusCode(reasonPhrase) {
  var result = reasonPhraseToStatusCode[reasonPhrase];
  if (!result) {
    throw new Error("Reason phrase does not exist: " + reasonPhrase);
  }
  return result;
}
var getStatusText = getReasonPhrase;

// node_modules/http-status-codes/build/es/index.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var es_default = __assign(__assign({}, legacy_default), {
  getStatusCode,
  getStatusText
});

// src/baseTypes.ts
var import_obsidian = require("obsidian");
var OAUTH2_FORCE_EXPIRE_MILLISECONDS = 1e3 * 60 * 60 * 24 * 80;
var API_VER_REQURL = "0.13.26";
var API_VER_REQURL_ANDROID = "0.14.6";
var VALID_REQURL = !import_obsidian.Platform.isAndroidApp && (0, import_obsidian.requireApiVersion)(API_VER_REQURL) || import_obsidian.Platform.isAndroidApp && (0, import_obsidian.requireApiVersion)(API_VER_REQURL_ANDROID);

// node_modules/rfc4648/lib/index.mjs
var import_index = __toESM(require_lib(), 1);
var base16 = import_index.default.base16;
var base32 = import_index.default.base32;
var base32hex = import_index.default.base32hex;
var base64 = import_index.default.base64;
var base64url = import_index.default.base64url;
var codec = import_index.default.codec;

// src/misc.ts
var path = __toESM(require("path"));
var import_xregexp = __toESM(require_lib2());

// src/moreOnLog.ts
var origLog = __toESM(require_loglevel());
var log2 = origLog.getLogger("rs-default");
var originalFactory = log2.methodFactory;

// src/remoteForWebdav.ts
var import_web = __toESM(require_web());
var import_web2 = __toESM(require_web());
if (VALID_REQURL) {
  (0, import_web.getPatcher)().patch(
    "request",
    async (options) => {
      const transformedHeaders = { ...options.headers };
      delete transformedHeaders["host"];
      delete transformedHeaders["Host"];
      delete transformedHeaders["content-length"];
      delete transformedHeaders["Content-Length"];
      const r = await (0, import_obsidian2.requestUrl)({
        url: options.url,
        method: options.method,
        body: options.data,
        headers: transformedHeaders
      });
      let r2 = void 0;
      if (options.responseType === void 0) {
        r2 = {
          data: void 0,
          status: r.status,
          statusText: getReasonPhrase(r.status),
          headers: r.headers
        };
      } else if (options.responseType === "json") {
        r2 = {
          data: r.json,
          status: r.status,
          statusText: getReasonPhrase(r.status),
          headers: r.headers
        };
      } else if (options.responseType === "text") {
        r2 = {
          data: r.text,
          status: r.status,
          statusText: getReasonPhrase(r.status),
          headers: r.headers
        };
      } else if (options.responseType === "arraybuffer") {
        r2 = {
          data: r.arrayBuffer,
          status: r.status,
          statusText: getReasonPhrase(r.status),
          headers: r.headers
        };
      } else {
        throw Error(
          `do not know how to deal with responseType = ${options.responseType}`
        );
      }
      return r2;
    }
  );
}
var getNormPath = (fileOrFolderPath, remoteBaseDir) => {
  if (!(fileOrFolderPath === `/${remoteBaseDir}` || fileOrFolderPath.startsWith(`/${remoteBaseDir}/`))) {
    throw Error(
      `"${fileOrFolderPath}" doesn't starts with "/${remoteBaseDir}/"`
    );
  }
  return fileOrFolderPath.slice(`/${remoteBaseDir}/`.length);
};
var fromWebdavItemToRemoteItem = (x, remoteBaseDir) => {
  let key = getNormPath(x.filename, remoteBaseDir);
  if (x.type === "directory" && !key.endsWith("/")) {
    key = `${key}/`;
  }
  return {
    key,
    lastModified: Date.parse(x.lastmod).valueOf(),
    size: x.size,
    remoteType: "webdav",
    etag: x.etag || void 0
  };
};

// src/main.ts
var import_chunk2 = __toESM(require_chunk());
var import_flatten2 = __toESM(require_flatten());
var path2 = __toESM(require("path"));
var import_tsqueue2 = __toESM(require_dist());
var fs = __toESM(require("fs"));
var pathModule = __toESM(require("path"));
function createFileTreeFromWebdav(files) {
  const fileTree = {};
  for (const file of files) {
    const parts = file.filename.split("/");
    let currentLocation = fileTree;
    for (let i = 1; i < parts.length; i++) {
      const part = parts[i];
      if (i < parts.length - 1) {
        if (!currentLocation[part]) {
          currentLocation[part] = {};
        }
        currentLocation = currentLocation[part];
      } else {
        currentLocation[part] = file;
      }
    }
  }
  return fileTree;
}
var MyWebdavClient = class {
  constructor() {
    this.flag = false;
    this.init = async (webdavConfig) => {
      this.webdavConfig = webdavConfig;
      const headers = {
        "Cache-Control": "no-cache"
      };
      this.client = (0, import_web3.createClient)(webdavConfig.address, {
        username: webdavConfig.username,
        password: webdavConfig.password,
        headers,
        authType: import_web3.AuthType.Password
      });
      this.flag = true;
    };
    this.listFromRemote = async (depth) => {
      const remotePath = this.webdavConfig.remoteBaseDir || "/";
      let contents = [];
      if (depth === "auto_1" || depth === "manual_1") {
        const q = new import_tsqueue2.Queue([`/${remotePath}`]);
        const CHUNK_SIZE = 10;
        while (q.length > 0) {
          const itemsToFetch = [];
          while (q.length > 0) {
            itemsToFetch.push(q.pop());
          }
          const itemsToFetchChunks = (0, import_chunk2.default)(itemsToFetch, CHUNK_SIZE);
          const subContents = [];
          for (const singleChunk of itemsToFetchChunks) {
            const r = singleChunk.map((x) => {
              return this.client.getDirectoryContents(x, {
                deep: false,
                details: false
                // TODO: to support .obsidian,
                // we need to load all files including dot,
                // anyway to reduce the resources?
                // glob: "/**" /* avoid dot files by using glob */,
              });
            });
            const r2 = (0, import_flatten2.default)(await Promise.all(r));
            subContents.push(...r2);
          }
          for (let i = 0; i < subContents.length; ++i) {
            const f = subContents[i];
            contents.push(f);
            if (f.type === "directory") {
              q.push(f.filename);
            }
          }
        }
      } else {
        contents = await this.client.getDirectoryContents(
          `/${remotePath}`,
          {
            deep: true,
            details: false
            // TODO: to support .obsidian,
            // we need to load all files including dot,
            // anyway to reduce the resources?
            // glob: "/**" /* avoid dot files by using glob */,
          }
        );
      }
      const fileTree = createFileTreeFromWebdav(contents);
      return fileTree;
    };
    this.checkConnectivity = async (callbackFunc) => {
      if (!this.flag) {
        console.log("Error: webdav client is not initialized!");
        return;
      }
      if (!(this.webdavConfig.address.startsWith("http://") || this.webdavConfig.address.startsWith("https://"))) {
        const err = "Error: the url should start with http(s):// but it does not!";
        console.log(err);
        if (callbackFunc !== void 0) {
          callbackFunc(err);
        }
        return false;
      }
      try {
        const remotePath = this.webdavConfig.remoteBaseDir || "";
        const res = await this.client.stat(remotePath, {
          details: false
        });
        const results = fromWebdavItemToRemoteItem(res, remotePath);
        if (results === void 0) {
          const err = "results is undefined";
          console.log(err);
          if (callbackFunc !== void 0) {
            callbackFunc(err);
          }
          return false;
        }
        return true;
      } catch (err) {
        console.log(err);
        if (callbackFunc !== void 0) {
          callbackFunc(err);
        }
        return false;
      }
    };
  }
};
var WebdavListViewType = "webdav-file-explorer";
var WebdavFilesListView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin, data, fileTree = {}) {
    super(leaf);
    this.fileTreeData = {};
    /**
     * Open the provided file in the most recent leaf.
     *
     * @param shouldSplit Whether the file should be opened in a new split, or in
     * the most recent split. If the most recent split is pinned, this is set to
     * true.
     */
    this.focusFile = (file, shouldSplit = false) => {
      const targetFile = this.app.vault.getFiles().find((f) => f.path === file.path);
      if (targetFile) {
        let leaf = this.app.workspace.getMostRecentLeaf();
        if (leaf) {
          const createLeaf = shouldSplit || leaf.getViewState().pinned;
          if (createLeaf) {
            leaf = this.app.workspace.getLeaf("tab");
          }
          leaf.openFile(targetFile);
        }
      } else {
        new import_obsidian3.Notice("Cannot find a file with that name");
      }
    };
    this.plugin = plugin;
    this.data = data;
    this.fileTreeData = fileTree;
  }
  getViewType() {
    return WebdavListViewType;
  }
  getDisplayText() {
    return "Webdav File Explorer";
  }
  getIcon() {
    return "folder";
  }
  onload() {
    super.onload();
    this.redraw();
  }
  async onOpen() {
    super.onOpen();
    this.redraw();
  }
  redraw() {
    this.containerEl.empty();
    this.containerEl.addClass("file-explorer-view");
    this.containerEl.style.overflowY = "auto";
    let refreshButton = this.containerEl.createEl("button", { text: "Refresh" });
    refreshButton.addEventListener("click", async () => {
      await this.plugin.updateData();
      this.fileTreeData = this.plugin.fileTreeData;
      await this.redraw();
    });
    let rootUl = this.containerEl.createEl("ul", { cls: "file-list" });
    this.constructList(this.fileTreeData, rootUl);
  }
  filterFileTree(data, searchValue) {
    let filteredData = {};
    for (const key in data) {
      if (data[key].type === "file" && key.includes(searchValue)) {
        filteredData[key] = data[key];
      } else if (data[key].type === "directory") {
        let filteredSubdirectory = this.filterFileTree(data[key], searchValue);
        if (Object.keys(filteredSubdirectory).length > 0) {
          filteredData[key] = filteredSubdirectory;
        }
      }
    }
    return filteredData;
  }
  getPathForKey(data, targetKey, path3 = []) {
    for (const key in data) {
      if (key === targetKey) {
        return [...path3, key].join("/");
      } else if (data[key].type === "directory") {
        let result = this.getPathForKey(data[key], targetKey, [...path3, key]);
        if (result)
          return result;
      }
    }
    return null;
  }
  constructList(data, parentEl) {
    for (const key in data) {
      if (data[key].type === "directory") {
        let dirLi = parentEl.createEl("li", { cls: "file-list-item dir" });
        let indicator = dirLi.createEl("span", { text: "\u25B6", cls: "indicator", style: "font-size: 0.1em;" });
        let dirSpan = dirLi.createEl("span", { text: key, cls: "dir-name" });
        dirSpan.addEventListener("contextmenu", (event) => {
          event.preventDefault();
          new import_obsidian3.Menu(this.app).addItem(
            (item) => item.setTitle("Copy Path").onClick(() => {
              let path3 = this.getPathForKey(this.fileTreeData, key);
              navigator.clipboard.writeText(` **[${path3}]** `);
            })
          ).showAtPosition({ x: event.pageX, y: event.pageY });
        });
        let childUl = dirLi.createEl("ul", { cls: "file-list" });
        childUl.style.display = "none";
        dirLi.addEventListener("click", (event) => {
          event.stopPropagation();
          if (childUl.style.display === "none") {
            childUl.style.display = "block";
            indicator.textContent = "\u25BC";
          } else {
            childUl.style.display = "none";
            indicator.textContent = "\u25B6";
          }
        });
        this.constructList(data[key], childUl);
      } else if (data[key].type === "file") {
        let fileLi = parentEl.createEl("li", { cls: "file-list-item file" });
        fileLi.addEventListener("click", (event) => {
          event.stopPropagation();
          const ori_webdav_path = data[key].filename;
          const new_obsdiian_path_name = ori_webdav_path.replace(/^\/[^\/]+/, this.plugin.data.rootFolderPath) + ".md";
          const new_obsdiian_path = {
            path: new_obsdiian_path_name,
            basename: path2.basename(new_obsdiian_path_name)
          };
          this.focusFile(new_obsdiian_path, event.ctrlKey || event.metaKey);
        });
        let fileEl = fileLi.createEl("span", { text: key, cls: "file-name" });
        fileEl.addEventListener("contextmenu", (event) => {
          event.preventDefault();
          new import_obsidian3.Menu(this.app).addItem(
            (item) => item.setTitle("Copy Path").onClick(() => {
              let path3 = this.getPathForKey(this.fileTreeData, key);
              navigator.clipboard.writeText(` **[${path3}]** `);
            })
          ).showAtPosition({ x: event.pageX, y: event.pageY });
        });
      }
    }
  }
};
var DEFAULT_DATA = {
  rootFolderPath: "0_Webdav",
  webdavConfig: {
    address: "http://127.0.0.1:8080",
    username: "admin",
    password: "admin",
    authType: "basic",
    manualRecursive: false,
    remoteBaseDir: "obsidian"
  }
};
var WebdavFileExplorerPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.data = DEFAULT_DATA;
    this.updateData = async () => {
      this.webdavClient.init(this.data.webdavConfig);
      this.webdavClient.checkConnectivity();
      const fileTree = await this.webdavClient.listFromRemote("auto_1");
      const [uniqueMember] = Object.values(fileTree);
      this.fileTreeData = uniqueMember;
      const vaultPath = this.app.vault.adapter.getBasePath();
      const rootPath = vaultPath;
      this.createFileStructure(rootPath, uniqueMember, this.data.rootFolderPath, this.app.vault);
    };
    this.initView = async () => {
      let leaf;
      for (leaf of this.app.workspace.getLeavesOfType(WebdavListViewType)) {
        if (leaf.view instanceof WebdavFilesListView) {
          console.log("already exists");
          return;
        }
        await leaf.setViewState({ type: "empty" });
        break;
      }
      (leaf != null ? leaf : this.app.workspace.getLeftLeaf(false)).setViewState({
        type: WebdavListViewType,
        active: true
      });
    };
  }
  async onload() {
    await this.loadData();
    console.log("Webdav File Explorer: Loading plugin v" + this.manifest.version);
    this.webdavClient = new MyWebdavClient();
    try {
      await this.updateData();
    } catch (error) {
      console.error("Data not ready.", error);
    }
    this.registerView(
      WebdavListViewType,
      (leaf) => this.view = new WebdavFilesListView(leaf, this, this.data, this.fileTreeData)
    );
    this.addCommand({
      id: "webdav-file-explorer-open",
      name: "Open Webdav File Explorer",
      callback: async () => {
        let [leaf] = this.app.workspace.getLeavesOfType(WebdavListViewType);
        if (!leaf) {
          leaf = this.app.workspace.getLeftLeaf(false);
          await leaf.setViewState({ type: WebdavListViewType });
        }
        this.app.workspace.revealLeaf(leaf);
      }
    });
    this.app.workspace.registerHoverLinkSource(
      WebdavListViewType,
      {
        display: "Webdav File Explorer",
        defaultMod: true
      }
    );
    this.app.workspace.onLayoutReady(() => {
      this.initView();
    });
    this.addSettingTab(new WebdavFileExplorerSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.unregisterHoverLinkSource(WebdavListViewType);
  }
  async redraw() {
    try {
      this.updateData();
      this.view.fileTreeData = this.fileTreeData;
      this.view.redraw();
    } catch (err) {
      console.log(err);
    }
  }
  async createFileTreeInFolder(folderPath) {
    const allFiles = this.app.vault.getFiles();
    const filesInFolder = allFiles.filter((file) => file.path.startsWith(folderPath));
    const fileTree = {};
    for (const file of filesInFolder) {
      const parts = file.path.split("/");
      let currentLocation = fileTree;
      for (let i = 1; i < parts.length; i++) {
        const part = parts[i];
        if (i < parts.length - 1) {
          if (!currentLocation[part]) {
            currentLocation[part] = {};
          }
          currentLocation = currentLocation[part];
        } else {
          currentLocation[part] = file;
        }
      }
    }
    return fileTree;
  }
  // This function parses the file tree and creates .md files for each file
  async createFileStructure(rootPath, fileTree, path3, vault) {
    for (const key in fileTree) {
      const item = fileTree[key];
      if (item.type === "directory") {
        await this.createFileStructure(rootPath, item, path3 + "/" + item.basename, vault);
      } else if (item.type === "file") {
        const filePath = path3 + "/" + item.basename + ".md";
        const dirPath = pathModule.dirname(filePath);
        fs.mkdirSync(rootPath + "/" + dirPath, { recursive: true });
        const fileExists = await vault.adapter.exists(filePath);
        if (!fileExists) {
          await vault.create(filePath, "");
        }
      }
    }
  }
  async loadData() {
    this.data = Object.assign(DEFAULT_DATA, await super.loadData());
  }
  async saveData() {
    await super.saveData(this.data);
  }
};
var WebdavFileExplorerSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Webdav File Explorer Settings" });
    new import_obsidian3.Setting(containerEl).setName("WebDAV: address").setDesc("WebDAV \u670D\u52A1\u5668\u7684\u7AEF\u53E3").addText((text) => {
      text.inputEl.setAttr("type", "text");
      text.inputEl.setAttr("placeholder", "127.0.0.1:5050");
      text.setValue(this.plugin.webdavClient.webdavConfig.address.toString());
      text.inputEl.onblur = (e) => {
        this.plugin.webdavClient.webdavConfig.address = e.target.value;
        this.plugin.redraw();
        this.plugin.saveData();
      };
    });
    new import_obsidian3.Setting(containerEl).setName("WebDAV: user").setDesc("WebDAV \u670D\u52A1\u5668\u7684\u7528\u6237\u540D").addText((text) => {
      text.inputEl.setAttr("type", "text");
      text.inputEl.setAttr("placeholder", "admin");
      text.setValue(this.plugin.webdavClient.webdavConfig.username);
      text.inputEl.onblur = (e) => {
        this.plugin.webdavClient.webdavConfig.username = e.target.value;
        this.plugin.redraw();
        this.plugin.saveData();
      };
    });
    new import_obsidian3.Setting(containerEl).setName("WebDAV: password").setDesc("WebDAV \u670D\u52A1\u5668\u7684\u5BC6\u7801").addText((text) => {
      text.inputEl.setAttr("type", "text");
      text.inputEl.setAttr("placeholder", "admin");
      text.setValue(this.plugin.webdavClient.webdavConfig.password);
      text.inputEl.onblur = (e) => {
        this.plugin.webdavClient.webdavConfig.password = e.target.value;
        this.plugin.redraw();
        this.plugin.saveData();
      };
    });
    new import_obsidian3.Setting(containerEl).setName("WebDAV: remote dir").setDesc("WebDAV \u6839\u8DEF\u5F84").addText((text) => {
      text.inputEl.setAttr("type", "text");
      text.inputEl.setAttr("placeholder", "Obsidian");
      text.setValue(this.plugin.webdavClient.webdavConfig.remoteBaseDir);
      text.inputEl.onblur = (e) => {
        this.plugin.webdavClient.webdavConfig.remoteBaseDir = e.target.value;
        this.plugin.redraw();
        this.plugin.saveData();
      };
    });
    new import_obsidian3.Setting(containerEl).setName("Root folder path").setDesc("The path to the root folder to display in the file explorer").addText((text) => {
      text.inputEl.setAttr("type", "text");
      text.inputEl.setAttr("placeholder", "0_Webdav");
      text.setValue(this.plugin.data.rootFolderPath);
      text.inputEl.onblur = (e) => {
        this.plugin.data.rootFolderPath = e.target.value;
        this.plugin.redraw();
        this.plugin.saveData();
      };
    });
  }
};
/*! Bundled license information:

webdav/web/index.js:
  (*! For license information please see webdav.js.LICENSE.txt *)

xregexp/lib/xregexp.js:
  (*!
   * XRegExp 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2007-present MIT License
   *)

xregexp/lib/addons/build.js:
  (*!
   * XRegExp.build 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2012-present MIT License
   *)

xregexp/lib/addons/matchrecursive.js:
  (*!
   * XRegExp.matchRecursive 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2009-present MIT License
   *)

xregexp/lib/addons/unicode-base.js:
  (*!
   * XRegExp Unicode Base 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2008-present MIT License
   *)

xregexp/lib/addons/unicode-categories.js:
  (*!
   * XRegExp Unicode Categories 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2010-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   *)

xregexp/lib/addons/unicode-properties.js:
  (*!
   * XRegExp Unicode Properties 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2012-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   *)

xregexp/lib/addons/unicode-scripts.js:
  (*!
   * XRegExp Unicode Scripts 5.1.1
   * <xregexp.com>
   * Steven Levithan (c) 2010-present MIT License
   * Unicode data by Mathias Bynens <mathiasbynens.be>
   *)
*/
//# sourceMappingURL=data:application/json;base64,
